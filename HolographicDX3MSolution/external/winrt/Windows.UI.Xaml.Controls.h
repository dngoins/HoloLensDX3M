// C++ for the Windows Runtime v1.0.161012.5
// Copyright (c) 2016 Microsoft Corporation. All rights reserved.

#pragma once

#include "internal/Windows.Foundation.3.h"
#include "internal/Windows.UI.Xaml.3.h"
#include "internal/Windows.UI.Xaml.Interop.3.h"
#include "internal/Windows.UI.Xaml.Controls.Primitives.3.h"
#include "internal/Windows.Foundation.Collections.3.h"
#include "internal/Windows.ApplicationModel.DataTransfer.3.h"
#include "internal/Windows.UI.Xaml.Media.3.h"
#include "internal/Windows.Media.Capture.3.h"
#include "internal/Windows.UI.Text.3.h"
#include "internal/Windows.Media.PlayTo.3.h"
#include "internal/Windows.Media.Casting.3.h"
#include "internal/Windows.UI.Composition.3.h"
#include "internal/Windows.UI.Xaml.Documents.3.h"
#include "internal/Windows.UI.Xaml.Input.3.h"
#include "internal/Windows.UI.Xaml.Data.3.h"
#include "internal/Windows.ApplicationModel.Search.3.h"
#include "internal/Windows.System.3.h"
#include "internal/Windows.Web.3.h"
#include "internal/Windows.UI.Input.Inking.3.h"
#include "internal/Windows.Media.Protection.3.h"
#include "internal/Windows.Storage.Streams.3.h"
#include "internal/Windows.Media.Core.3.h"
#include "internal/Windows.Media.Playback.3.h"
#include "internal/Windows.UI.Xaml.Navigation.3.h"
#include "internal/Windows.UI.3.h"
#include "internal/Windows.Web.Http.3.h"
#include "internal/Windows.Globalization.3.h"
#include "internal/Windows.UI.Xaml.Media.Animation.3.h"
#include "internal/Windows.UI.Core.3.h"
#include "internal/Windows.UI.Xaml.Controls.3.h"
#include "Windows.UI.Xaml.h"
#include "Windows.Foundation.Collections.h"
#include "Windows.UI.Xaml.Controls.Primitives.h"
#include "Windows.UI.Xaml.Data.h"
#include "Windows.UI.Xaml.Media.h"
#include "internal/Windows.UI.Xaml.Controls.4.h"
#include "internal/Windows.UI.Xaml.Controls.5.h"

WINRT_EXPORT namespace winrt {

namespace Windows::UI::Xaml::Controls {

template <typename L> BackClickEventHandler::BackClickEventHandler(L lambda) :
    BackClickEventHandler(impl::make_delegate<impl_BackClickEventHandler<L>, BackClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> BackClickEventHandler::BackClickEventHandler(F * function) :
    BackClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> BackClickEventHandler::BackClickEventHandler(O * object, M method) :
    BackClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void BackClickEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::BackClickEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(L lambda) :
    CalendarViewDayItemChangingEventHandler(impl::make_delegate<impl_CalendarViewDayItemChangingEventHandler<L>, CalendarViewDayItemChangingEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(F * function) :
    CalendarViewDayItemChangingEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> CalendarViewDayItemChangingEventHandler::CalendarViewDayItemChangingEventHandler(O * object, M method) :
    CalendarViewDayItemChangingEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void CalendarViewDayItemChangingEventHandler::operator()(const Windows::UI::Xaml::Controls::CalendarView & sender, const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(L lambda) :
    CleanUpVirtualizedItemEventHandler(impl::make_delegate<impl_CleanUpVirtualizedItemEventHandler<L>, CleanUpVirtualizedItemEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(F * function) :
    CleanUpVirtualizedItemEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> CleanUpVirtualizedItemEventHandler::CleanUpVirtualizedItemEventHandler(O * object, M method) :
    CleanUpVirtualizedItemEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void CleanUpVirtualizedItemEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(L lambda) :
    ContextMenuOpeningEventHandler(impl::make_delegate<impl_ContextMenuOpeningEventHandler<L>, ContextMenuOpeningEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(F * function) :
    ContextMenuOpeningEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> ContextMenuOpeningEventHandler::ContextMenuOpeningEventHandler(O * object, M method) :
    ContextMenuOpeningEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void ContextMenuOpeningEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::ContextMenuEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> DragItemsStartingEventHandler::DragItemsStartingEventHandler(L lambda) :
    DragItemsStartingEventHandler(impl::make_delegate<impl_DragItemsStartingEventHandler<L>, DragItemsStartingEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> DragItemsStartingEventHandler::DragItemsStartingEventHandler(F * function) :
    DragItemsStartingEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> DragItemsStartingEventHandler::DragItemsStartingEventHandler(O * object, M method) :
    DragItemsStartingEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void DragItemsStartingEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::DragItemsStartingEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(L lambda) :
    HubSectionHeaderClickEventHandler(impl::make_delegate<impl_HubSectionHeaderClickEventHandler<L>, HubSectionHeaderClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(F * function) :
    HubSectionHeaderClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> HubSectionHeaderClickEventHandler::HubSectionHeaderClickEventHandler(O * object, M method) :
    HubSectionHeaderClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void HubSectionHeaderClickEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> ItemClickEventHandler::ItemClickEventHandler(L lambda) :
    ItemClickEventHandler(impl::make_delegate<impl_ItemClickEventHandler<L>, ItemClickEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> ItemClickEventHandler::ItemClickEventHandler(F * function) :
    ItemClickEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> ItemClickEventHandler::ItemClickEventHandler(O * object, M method) :
    ItemClickEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void ItemClickEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::ItemClickEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> ListViewItemToKeyHandler::ListViewItemToKeyHandler(L lambda) :
    ListViewItemToKeyHandler(impl::make_delegate<impl_ListViewItemToKeyHandler<L>, ListViewItemToKeyHandler>(std::forward<L>(lambda)))
{}

template <typename F> ListViewItemToKeyHandler::ListViewItemToKeyHandler(F * function) :
    ListViewItemToKeyHandler([=](auto && ... args) { return function(args ...); })
{}

template <typename O, typename M> ListViewItemToKeyHandler::ListViewItemToKeyHandler(O * object, M method) :
    ListViewItemToKeyHandler([=](auto && ... args) { return ((*object).*(method))(args ...); })
{}

inline hstring ListViewItemToKeyHandler::operator()(const Windows::IInspectable & item) const
{
    hstring returnValue;
    check_hresult((*this)->abi_Invoke(get(item), put(returnValue)));
    return returnValue;
}

template <typename L> ListViewKeyToItemHandler::ListViewKeyToItemHandler(L lambda) :
    ListViewKeyToItemHandler(impl::make_delegate<impl_ListViewKeyToItemHandler<L>, ListViewKeyToItemHandler>(std::forward<L>(lambda)))
{}

template <typename F> ListViewKeyToItemHandler::ListViewKeyToItemHandler(F * function) :
    ListViewKeyToItemHandler([=](auto && ... args) { return function(args ...); })
{}

template <typename O, typename M> ListViewKeyToItemHandler::ListViewKeyToItemHandler(O * object, M method) :
    ListViewKeyToItemHandler([=](auto && ... args) { return ((*object).*(method))(args ...); })
{}

inline Windows::Foundation::IAsyncOperation<Windows::IInspectable> ListViewKeyToItemHandler::operator()(hstring_ref key) const
{
    Windows::Foundation::IAsyncOperation<Windows::IInspectable> returnValue;
    check_hresult((*this)->abi_Invoke(get(key), put(returnValue)));
    return returnValue;
}

template <typename L> NotifyEventHandler::NotifyEventHandler(L lambda) :
    NotifyEventHandler(impl::make_delegate<impl_NotifyEventHandler<L>, NotifyEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> NotifyEventHandler::NotifyEventHandler(F * function) :
    NotifyEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> NotifyEventHandler::NotifyEventHandler(O * object, M method) :
    NotifyEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void NotifyEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::NotifyEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(L lambda) :
    SectionsInViewChangedEventHandler(impl::make_delegate<impl_SectionsInViewChangedEventHandler<L>, SectionsInViewChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(F * function) :
    SectionsInViewChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SectionsInViewChangedEventHandler::SectionsInViewChangedEventHandler(O * object, M method) :
    SectionsInViewChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SectionsInViewChangedEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::SectionsInViewChangedEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> SelectionChangedEventHandler::SelectionChangedEventHandler(L lambda) :
    SelectionChangedEventHandler(impl::make_delegate<impl_SelectionChangedEventHandler<L>, SelectionChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SelectionChangedEventHandler::SelectionChangedEventHandler(F * function) :
    SelectionChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SelectionChangedEventHandler::SelectionChangedEventHandler(O * object, M method) :
    SelectionChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SelectionChangedEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::SelectionChangedEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(L lambda) :
    SemanticZoomViewChangedEventHandler(impl::make_delegate<impl_SemanticZoomViewChangedEventHandler<L>, SemanticZoomViewChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(F * function) :
    SemanticZoomViewChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> SemanticZoomViewChangedEventHandler::SemanticZoomViewChangedEventHandler(O * object, M method) :
    SemanticZoomViewChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void SemanticZoomViewChangedEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> TextChangedEventHandler::TextChangedEventHandler(L lambda) :
    TextChangedEventHandler(impl::make_delegate<impl_TextChangedEventHandler<L>, TextChangedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> TextChangedEventHandler::TextChangedEventHandler(F * function) :
    TextChangedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> TextChangedEventHandler::TextChangedEventHandler(O * object, M method) :
    TextChangedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void TextChangedEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::TextChangedEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> TextControlPasteEventHandler::TextControlPasteEventHandler(L lambda) :
    TextControlPasteEventHandler(impl::make_delegate<impl_TextControlPasteEventHandler<L>, TextControlPasteEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> TextControlPasteEventHandler::TextControlPasteEventHandler(F * function) :
    TextControlPasteEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> TextControlPasteEventHandler::TextControlPasteEventHandler(O * object, M method) :
    TextControlPasteEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void TextControlPasteEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::TextControlPasteEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

template <typename L> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(L lambda) :
    WebViewNavigationFailedEventHandler(impl::make_delegate<impl_WebViewNavigationFailedEventHandler<L>, WebViewNavigationFailedEventHandler>(std::forward<L>(lambda)))
{}

template <typename F> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(F * function) :
    WebViewNavigationFailedEventHandler([=](auto && ... args) { function(args ...); })
{}

template <typename O, typename M> WebViewNavigationFailedEventHandler::WebViewNavigationFailedEventHandler(O * object, M method) :
    WebViewNavigationFailedEventHandler([=](auto && ... args) { ((*object).*(method))(args ...); })
{}

inline void WebViewNavigationFailedEventHandler::operator()(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventArgs & e) const
{
    check_hresult((*this)->abi_Invoke(get(sender), get(e)));
}

}

namespace impl {

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar>
{
    HRESULT __stdcall get_IsOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSticky(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSticky());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSticky(bool value) noexcept override
    {
        try
        {
            this->shim().IsSticky(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar2> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar2>
{
    HRESULT __stdcall get_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClosedDisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value) noexcept override
    {
        try
        {
            this->shim().ClosedDisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar3>
{
    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IAppBarTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opening(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Opening(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opening(event_token token) noexcept override
    {
        try
        {
            this->shim().Opening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closing(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closing(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closing(event_token token) noexcept override
    {
        try
        {
            this->shim().Closing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBar4> : produce_base<D, Windows::UI::Xaml::Controls::IAppBar4>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButton> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButton>
{
    HRESULT __stdcall get_Label(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Label());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Label(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Label(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Icon(abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Icon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Icon(abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            this->shim().Icon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButton3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButton3>
{
    HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept override
    {
        try
        {
            this->shim().LabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IAppBarButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics>
{
    HRESULT __stdcall get_LabelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarButtonStatics3>
{
    HRESULT __stdcall get_LabelPositionProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInOverflowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarOverrides>
{
    HRESULT __stdcall abi_OnClosed(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnClosed(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOpened(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnOpened(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarOverrides3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarOverrides3>
{
    HRESULT __stdcall abi_OnClosing(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnClosing(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOpening(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnOpening(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparator> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparator>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IAppBarSeparator> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics>
{
    HRESULT __stdcall get_IsCompactProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarSeparatorStatics3>
{
    HRESULT __stdcall get_IsInOverflowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics>
{
    HRESULT __stdcall get_IsOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStickyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStickyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics2>
{
    HRESULT __stdcall get_ClosedDisplayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClosedDisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarStatics4>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButton>
{
    HRESULT __stdcall get_Label(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Label());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Label(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Label(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Icon(abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Icon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Icon(abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            this->shim().Icon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButton3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButton3>
{
    HRESULT __stdcall get_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) noexcept override
    {
        try
        {
            this->shim().LabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IAppBarToggleButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics>
{
    HRESULT __stdcall get_LabelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAppBarToggleButtonStatics3>
{
    HRESULT __stdcall get_LabelPositionProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInOverflowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsInOverflowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DynamicOverflowOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox>
{
    HRESULT __stdcall get_MaxSuggestionListHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxSuggestionListHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxSuggestionListHeight(double value) noexcept override
    {
        try
        {
            this->shim().MaxSuggestionListHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuggestionListOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSuggestionListOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSuggestionListOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsSuggestionListOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextMemberPath(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextMemberPath(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().TextMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UpdateTextOnSelect(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UpdateTextOnSelect());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UpdateTextOnSelect(bool value) noexcept override
    {
        try
        {
            this->shim().UpdateTextOnSelect(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoMaximizeSuggestionArea(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoMaximizeSuggestionArea());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoMaximizeSuggestionArea(bool value) noexcept override
    {
        try
        {
            this->shim().AutoMaximizeSuggestionArea(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextBoxStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextBoxStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextBoxStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().TextBoxStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SuggestionChosen(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SuggestionChosen(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SuggestionChosen(event_token token) noexcept override
    {
        try
        {
            this->shim().SuggestionChosen(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox2> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox2>
{
    HRESULT __stdcall get_QueryIcon(abi_arg_out<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryIcon());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_QueryIcon(abi_arg_in<Windows::UI::Xaml::Controls::IIconElement> value) noexcept override
    {
        try
        {
            this->shim().QueryIcon(*reinterpret_cast<const Windows::UI::Xaml::Controls::IconElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QuerySubmitted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().QuerySubmitted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept override
    {
        try
        {
            this->shim().QuerySubmitted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBox3> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBox3>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxQuerySubmittedEventArgs>
{
    HRESULT __stdcall get_QueryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChosenSuggestion(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChosenSuggestion());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics>
{
    HRESULT __stdcall get_MaxSuggestionListHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxSuggestionListHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuggestionListOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSuggestionListOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextMemberPathProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UpdateTextOnSelectProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UpdateTextOnSelectProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoMaximizeSuggestionAreaProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoMaximizeSuggestionAreaProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextBoxStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextBoxStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics2>
{
    HRESULT __stdcall get_QueryIconProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryIconProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxStatics3>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxSuggestionChosenEventArgs>
{
    HRESULT __stdcall get_SelectedItem(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgs>
{
    HRESULT __stdcall get_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Reason());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value) noexcept override
    {
        try
        {
            this->shim().Reason(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CheckCurrent(bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CheckCurrent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics> : produce_base<D, Windows::UI::Xaml::Controls::IAutoSuggestBoxTextChangedEventArgsStatics>
{
    HRESULT __stdcall get_ReasonProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ReasonProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBackClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IBackClickEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIcon> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIcon>
{
    HRESULT __stdcall get_UriSource(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UriSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UriSource(abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            this->shim().UriSource(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IBitmapIcon> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBitmapIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IBitmapIconStatics>
{
    HRESULT __stdcall get_UriSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UriSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBorder> : produce_base<D, Windows::UI::Xaml::Controls::IBorder>
{
    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Child(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Child());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Child(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Child(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChildTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChildTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().ChildTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IBorderStatics> : produce_base<D, Windows::UI::Xaml::Controls::IBorderStatics>
{
    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChildTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButton> : produce_base<D, Windows::UI::Xaml::Controls::IButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IButtonStaticsWithFlyout>
{
    HRESULT __stdcall get_FlyoutProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FlyoutProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IButtonWithFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IButtonWithFlyout>
{
    HRESULT __stdcall get_Flyout(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IFlyoutBase> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Flyout());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Flyout(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::IFlyoutBase> value) noexcept override
    {
        try
        {
            this->shim().Flyout(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::FlyoutBase *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePicker> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePicker>
{
    HRESULT __stdcall get_Date(abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(abi_arg_in<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::IReference<Windows::Foundation::DateTime> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCalendarOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCalendarOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCalendarOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsCalendarOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DateFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DateFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarViewStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarViewStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().CalendarViewStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinDate(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MinDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDate(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MaxDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlighted(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTodayHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept override
    {
        try
        {
            this->shim().IsTodayHighlighted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept override
    {
        try
        {
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstDayOfWeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept override
    {
        try
        {
            this->shim().FirstDayOfWeek(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayOfWeekFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayOfWeekFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DayOfWeekFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOutOfScopeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsOutOfScopeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGroupLabelVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsGroupLabelVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CalendarViewDayItemChanging(abi_arg_in<Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CalendarViewDayItemChanging(*reinterpret_cast<const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().CalendarViewDayItemChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DateChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DateChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DateChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().DateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDisplayDate(abi_arg_in<Windows::Foundation::DateTime> date) noexcept override
    {
        try
        {
            this->shim().SetDisplayDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&date));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept override
    {
        try
        {
            this->shim().SetYearDecadeDisplayDimensions(columns, rows);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePicker2> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerDateChangedEventArgs>
{
    HRESULT __stdcall get_NewDate(abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OldDate(abi_arg_out<Windows::Foundation::IReference<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICalendarDatePicker> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics>
{
    HRESULT __stdcall get_DateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCalendarOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCalendarOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarViewStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlightedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTodayHighlightedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeekProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstDayOfWeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayOfWeekFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOutOfScopeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGroupLabelVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarDatePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarView> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarView>
{
    HRESULT __stdcall get_CalendarIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayOfWeekFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayOfWeekFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DayOfWeekFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGroupLabelVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsGroupLabelVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsGroupLabelVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) noexcept override
    {
        try
        {
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeek(Windows::Globalization::DayOfWeek * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstDayOfWeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstDayOfWeek(Windows::Globalization::DayOfWeek value) noexcept override
    {
        try
        {
            this->shim().FirstDayOfWeek(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOutOfScopeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOutOfScopeEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsOutOfScopeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlighted(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTodayHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTodayHighlighted(bool value) noexcept override
    {
        try
        {
            this->shim().IsTodayHighlighted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDate(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MaxDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinDate(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MinDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NumberOfWeeksInView(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NumberOfWeeksInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NumberOfWeeksInView(int32_t value) noexcept override
    {
        try
        {
            this->shim().NumberOfWeeksInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedDates(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode value) noexcept override
    {
        try
        {
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ICalendarViewTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FocusBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().FocusBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedHoverBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedHoverBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedHoverBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectedHoverBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedPressedBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedPressedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedPressedBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectedPressedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HoverBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HoverBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HoverBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().HoverBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PressedBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PressedBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().PressedBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().CalendarItemBorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeBackground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OutOfScopeBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OutOfScopeBackground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().OutOfScopeBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBackground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBackground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().CalendarItemBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PressedForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PressedForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().PressedForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TodayForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TodayForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().TodayForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BlackoutForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BlackoutForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BlackoutForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BlackoutForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectedForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OutOfScopeForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OutOfScopeForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().OutOfScopeForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().CalendarItemForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().DayItemFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontSize(double value) noexcept override
    {
        try
        {
            this->shim().DayItemFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().DayItemFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayItemFontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().DayItemFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayFontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TodayFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TodayFontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().TodayFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FirstOfMonthLabelFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontSize(double value) noexcept override
    {
        try
        {
            this->shim().FirstOfMonthLabelFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FirstOfMonthLabelFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfMonthLabelFontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FirstOfMonthLabelFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().MonthYearItemFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontSize(double value) noexcept override
    {
        try
        {
            this->shim().MonthYearItemFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().MonthYearItemFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthYearItemFontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().MonthYearItemFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FirstOfYearDecadeLabelFontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontSize(double value) noexcept override
    {
        try
        {
            this->shim().FirstOfYearDecadeLabelFontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FirstOfYearDecadeLabelFontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FirstOfYearDecadeLabelFontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FirstOfYearDecadeLabelFontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalDayItemAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalDayItemAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalDayItemAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalDayItemAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalFirstOfMonthLabelAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalFirstOfMonthLabelAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalFirstOfMonthLabelAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalFirstOfMonthLabelAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarItemBorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().CalendarItemBorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewDayItemStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarViewDayItemStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarViewDayItemStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().CalendarViewDayItemStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CalendarViewDayItemChanging(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CalendarViewDayItemChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CalendarViewDayItemChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().CalendarViewDayItemChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectedDatesChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectedDatesChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectedDatesChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectedDatesChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDisplayDate(abi_arg_in<Windows::Foundation::DateTime> date) noexcept override
    {
        try
        {
            this->shim().SetDisplayDate(*reinterpret_cast<const Windows::Foundation::DateTime *>(&date));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) noexcept override
    {
        try
        {
            this->shim().SetYearDecadeDisplayDimensions(columns, rows);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItem> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItem>
{
    HRESULT __stdcall get_IsBlackout(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsBlackout());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsBlackout(bool value) noexcept override
    {
        try
        {
            this->shim().IsBlackout(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDensityColors(abi_arg_in<Windows::Foundation::Collections::IIterable<Windows::UI::Color>> colors) noexcept override
    {
        try
        {
            this->shim().SetDensityColors(*reinterpret_cast<const Windows::Foundation::Collections::IIterable<Windows::UI::Color> *>(&colors));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemChangingEventArgs>
{
    HRESULT __stdcall get_InRecycleQueue(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InRecycleQueue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(abi_arg_out<Windows::UI::Xaml::Controls::ICalendarViewDayItem> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Phase(uint32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Phase());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallback(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> callback) noexcept override
    {
        try
        {
            this->shim().RegisterUpdateCallback(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs>> callback) noexcept override
    {
        try
        {
            this->shim().RegisterUpdateCallback(callbackPhase, *reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICalendarViewDayItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewDayItemStatics>
{
    HRESULT __stdcall get_IsBlackoutProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsBlackoutProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICalendarView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewSelectedDatesChangedEventArgs>
{
    HRESULT __stdcall get_AddedDates(abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AddedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedDates(abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RemovedDates());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICalendarViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICalendarViewStatics>
{
    HRESULT __stdcall get_CalendarIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayOfWeekFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayOfWeekFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupLabelVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGroupLabelVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstDayOfWeekProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstDayOfWeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOutOfScopeEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOutOfScopeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTodayHighlightedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTodayHighlightedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinDateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinDateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NumberOfWeeksInViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NumberOfWeeksInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedDatesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedDatesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettingsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettingsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedHoverBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedHoverBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedPressedBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedPressedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HoverBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HoverBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PressedBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeBackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OutOfScopeBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PressedForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PressedForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TodayForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BlackoutForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BlackoutForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OutOfScopeForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OutOfScopeForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayItemFontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayItemFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TodayFontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TodayFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfMonthLabelFontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfMonthLabelFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthYearItemFontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthYearItemFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstOfYearDecadeLabelFontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstOfYearDecadeLabelFontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalDayItemAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalDayItemAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalDayItemAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalDayItemAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalFirstOfMonthLabelAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalFirstOfMonthLabelAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalFirstOfMonthLabelAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalFirstOfMonthLabelAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarItemBorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarItemBorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarViewDayItemStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarViewDayItemStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICandidateWindowBoundsChangedEventArgs>
{
    HRESULT __stdcall get_Bounds(abi_arg_out<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Bounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvas> : produce_base<D, Windows::UI::Xaml::Controls::ICanvas>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvasFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICanvasFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICanvas> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICanvasStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICanvasStatics>
{
    HRESULT __stdcall get_LeftProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetLeft(abi_arg_in<Windows::UI::Xaml::IUIElement> element, double * length) noexcept override
    {
        try
        {
            *length = detach(this->shim().GetLeft(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLeft(abi_arg_in<Windows::UI::Xaml::IUIElement> element, double length) noexcept override
    {
        try
        {
            this->shim().SetLeft(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetTop(abi_arg_in<Windows::UI::Xaml::IUIElement> element, double * length) noexcept override
    {
        try
        {
            *length = detach(this->shim().GetTop(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetTop(abi_arg_in<Windows::UI::Xaml::IUIElement> element, double length) noexcept override
    {
        try
        {
            this->shim().SetTop(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetZIndex(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetZIndex(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetZIndex(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetZIndex(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICaptureElement> : produce_base<D, Windows::UI::Xaml::Controls::ICaptureElement>
{
    HRESULT __stdcall get_Source(abi_arg_out<Windows::Media::Capture::IMediaCapture> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(abi_arg_in<Windows::Media::Capture::IMediaCapture> value) noexcept override
    {
        try
        {
            this->shim().Source(*reinterpret_cast<const Windows::Media::Capture::MediaCapture *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICaptureElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICaptureElementStatics>
{
    HRESULT __stdcall get_SourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICheckBox> : produce_base<D, Windows::UI::Xaml::Controls::ICheckBox>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICheckBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICheckBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICheckBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IChoosingGroupHeaderContainerEventArgs>
{
    HRESULT __stdcall get_GroupHeaderContainer(abi_arg_out<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupHeaderContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderContainer(abi_arg_in<Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> value) noexcept override
    {
        try
        {
            this->shim().GroupHeaderContainer(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBaseHeaderItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Group(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Group());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IChoosingItemContainerEventArgs>
{
    HRESULT __stdcall get_ItemIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainer(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainer(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            this->shim().ItemContainer(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::SelectorItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsContainerPrepared(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsContainerPrepared());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsContainerPrepared(bool value) noexcept override
    {
        try
        {
            this->shim().IsContainerPrepared(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs>
{
    HRESULT __stdcall get_Value(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Value());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_UIElement(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UIElement());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IColumnDefinition> : produce_base<D, Windows::UI::Xaml::Controls::IColumnDefinition>
{
    HRESULT __stdcall get_Width(abi_arg_out<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Width());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Width(abi_arg_in<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            this->shim().Width(*reinterpret_cast<const Windows::UI::Xaml::GridLength *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxWidth(double value) noexcept override
    {
        try
        {
            this->shim().MaxWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinWidth(double value) noexcept override
    {
        try
        {
            this->shim().MinWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActualWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IColumnDefinitionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IColumnDefinitionStatics>
{
    HRESULT __stdcall get_WidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().WidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox>
{
    HRESULT __stdcall get_IsDropDownOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDropDownOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDropDownOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsDropDownOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEditable(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsEditable());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSelectionBoxHighlighted(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSelectionBoxHighlighted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDropDownHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDropDownHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxDropDownHeight(double value) noexcept override
    {
        try
        {
            this->shim().MaxDropDownHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionBoxItem(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionBoxItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionBoxItemTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionBoxItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IComboBoxTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DropDownClosed(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DropDownClosed(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DropDownClosed(event_token token) noexcept override
    {
        try
        {
            this->shim().DropDownClosed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DropDownOpened(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DropDownOpened(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DropDownOpened(event_token token) noexcept override
    {
        try
        {
            this->shim().DropDownOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox2> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox2>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBox3> : produce_base<D, Windows::UI::Xaml::Controls::IComboBox3>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSearchEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSearchEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSearchEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextSearchEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IComboBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxItem> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IComboBoxItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxOverrides>
{
    HRESULT __stdcall abi_OnDropDownClosed(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnDropDownClosed(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDropDownOpened(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnDropDownOpened(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics>
{
    HRESULT __stdcall get_IsDropDownOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDropDownOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxDropDownHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxDropDownHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IComboBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IComboBoxStatics3>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSearchEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSearchEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar>
{
    HRESULT __stdcall get_PrimaryCommands(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryCommands());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryCommands(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryCommands());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar2>
{
    HRESULT __stdcall get_CommandBarOverflowPresenterStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandBarOverflowPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CommandBarOverflowPresenterStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().CommandBarOverflowPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandBarTemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ICommandBarTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandBarTemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBar3> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBar3>
{
    HRESULT __stdcall get_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultLabelPosition());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value) noexcept override
    {
        try
        {
            this->shim().DefaultLabelPosition(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowButtonVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value) noexcept override
    {
        try
        {
            this->shim().OverflowButtonVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDynamicOverflowEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDynamicOverflowEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDynamicOverflowEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsDynamicOverflowEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DynamicOverflowItemsChanging(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DynamicOverflowItemsChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DynamicOverflowItemsChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().DynamicOverflowItemsChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarElement> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarElement>
{
    HRESULT __stdcall get_IsCompact(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompact());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCompact(bool value) noexcept override
    {
        try
        {
            this->shim().IsCompact(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarElement2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarElement2>
{
    HRESULT __stdcall get_IsInOverflow(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsInOverflow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DynamicOverflowOrder(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DynamicOverflowOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DynamicOverflowOrder(int32_t value) noexcept override
    {
        try
        {
            this->shim().DynamicOverflowOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICommandBar> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarOverflowPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ICommandBarOverflowPresenter> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics>
{
    HRESULT __stdcall get_PrimaryCommandsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryCommandsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryCommandsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryCommandsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics2>
{
    HRESULT __stdcall get_CommandBarOverflowPresenterStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandBarOverflowPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ICommandBarStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ICommandBarStatics3>
{
    HRESULT __stdcall get_DefaultLabelPositionProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultLabelPositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowButtonVisibilityProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowButtonVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDynamicOverflowEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDynamicOverflowEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContainerContentChangingEventArgs>
{
    HRESULT __stdcall get_ItemContainer(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISelectorItem> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InRecycleQueue(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InRecycleQueue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Item(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Phase(uint32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Phase());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallback(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> callback) noexcept override
    {
        try
        {
            this->shim().RegisterUpdateCallback(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RegisterUpdateCallbackWithPhase(uint32_t callbackPhase, abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> callback) noexcept override
    {
        try
        {
            this->shim().RegisterUpdateCallback(callbackPhase, *reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControl> : produce_base<D, Windows::UI::Xaml::Controls::IContentControl>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelector(abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplateSelector(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            this->shim().ContentTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().ContentTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControl2> : produce_base<D, Windows::UI::Xaml::Controls::IContentControl2>
{
    HRESULT __stdcall get_ContentTemplateRoot(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateRoot());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IContentControl> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlOverrides>
{
    HRESULT __stdcall abi_OnContentChanged(abi_arg_in<Windows::IInspectable> oldContent, abi_arg_in<Windows::IInspectable> newContent) noexcept override
    {
        try
        {
            this->shim().OnContentChanged(*reinterpret_cast<const Windows::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateChanged(abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldContentTemplate, abi_arg_in<Windows::UI::Xaml::IDataTemplate> newContentTemplate) noexcept override
    {
        try
        {
            this->shim().OnContentTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldContentTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newContentTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateSelectorChanged(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldContentTemplateSelector, abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newContentTemplateSelector) noexcept override
    {
        try
        {
            this->shim().OnContentTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldContentTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newContentTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentControlStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelectorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialog> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialog>
{
    HRESULT __stdcall get_Title(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Title(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TitleTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().TitleTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FullSizeDesired(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FullSizeDesired());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FullSizeDesired(bool value) noexcept override
    {
        try
        {
            this->shim().FullSizeDesired(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PrimaryButtonText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SecondaryButtonText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommand(abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonCommand());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonCommand(abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            this->shim().PrimaryButtonCommand(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommand(abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonCommand());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonCommand(abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            this->shim().SecondaryButtonCommand(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandParameter(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonCommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryButtonCommandParameter(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().PrimaryButtonCommandParameter(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandParameter(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonCommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryButtonCommandParameter(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SecondaryButtonCommandParameter(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPrimaryButtonEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPrimaryButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPrimaryButtonEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsPrimaryButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSecondaryButtonEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSecondaryButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSecondaryButtonEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSecondaryButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closing(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closing(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closing(event_token token) noexcept override
    {
        try
        {
            this->shim().Closing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Opened(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PrimaryButtonClick(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PrimaryButtonClick(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PrimaryButtonClick(event_token token) noexcept override
    {
        try
        {
            this->shim().PrimaryButtonClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SecondaryButtonClick(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SecondaryButtonClick(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SecondaryButtonClick(event_token token) noexcept override
    {
        try
        {
            this->shim().SecondaryButtonClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Hide() noexcept override
    {
        try
        {
            this->shim().Hide();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAsync(abi_arg_out<Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ShowAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral>
{
    HRESULT __stdcall abi_Complete() noexcept override
    {
        try
        {
            this->shim().Complete();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogButtonClickEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDeferral(abi_arg_out<Windows::UI::Xaml::Controls::IContentDialogButtonClickDeferral> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetDeferral());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosedEventArgs>
{
    HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Result());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosingDeferral>
{
    HRESULT __stdcall abi_Complete() noexcept override
    {
        try
        {
            this->shim().Complete();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogClosingEventArgs>
{
    HRESULT __stdcall get_Result(Windows::UI::Xaml::Controls::ContentDialogResult * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Result());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDeferral(abi_arg_out<Windows::UI::Xaml::Controls::IContentDialogClosingDeferral> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetDeferral());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IContentDialog> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogOpenedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentDialogStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentDialogStatics>
{
    HRESULT __stdcall get_TitleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FullSizeDesiredProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FullSizeDesiredProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonCommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonCommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PrimaryButtonCommandParameterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryButtonCommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryButtonCommandParameterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryButtonCommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPrimaryButtonEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPrimaryButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSecondaryButtonEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSecondaryButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelector(abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplateSelector(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            this->shim().ContentTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().ContentTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter2>
{
    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter3> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenter4> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenter4>
{
    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IContentPresenter> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterOverrides>
{
    HRESULT __stdcall abi_OnContentTemplateChanged(abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldContentTemplate, abi_arg_in<Windows::UI::Xaml::IDataTemplate> newContentTemplate) noexcept override
    {
        try
        {
            this->shim().OnContentTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldContentTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newContentTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnContentTemplateSelectorChanged(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldContentTemplateSelector, abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newContentTemplateSelector) noexcept override
    {
        try
        {
            this->shim().OnContentTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldContentTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newContentTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateSelectorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics2>
{
    HRESULT __stdcall get_OpticalMarginAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContentPresenterStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IContentPresenterStatics4>
{
    HRESULT __stdcall get_TextWrappingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLinesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IContextMenuEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IContextMenuEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CursorLeft(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CursorLeft());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CursorTop(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CursorTop());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl> : produce_base<D, Windows::UI::Xaml::Controls::IControl>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTabStop(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTabStop());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTabStop(bool value) noexcept override
    {
        try
        {
            this->shim().IsTabStop(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TabIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TabIndex(int32_t value) noexcept override
    {
        try
        {
            this->shim().TabIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TabNavigation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) noexcept override
    {
        try
        {
            this->shim().TabNavigation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Template(abi_arg_out<Windows::UI::Xaml::Controls::IControlTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Template());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Template(abi_arg_in<Windows::UI::Xaml::Controls::IControlTemplate> value) noexcept override
    {
        try
        {
            this->shim().Template(*reinterpret_cast<const Windows::UI::Xaml::Controls::ControlTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalContentAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalContentAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusState(Windows::UI::Xaml::FocusState * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusState());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_IsEnabledChanged(abi_arg_in<Windows::UI::Xaml::DependencyPropertyChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().IsEnabledChanged(*reinterpret_cast<const Windows::UI::Xaml::DependencyPropertyChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_IsEnabledChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().IsEnabledChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ApplyTemplate(bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ApplyTemplate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl2> : produce_base<D, Windows::UI::Xaml::Controls::IControl2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl3> : produce_base<D, Windows::UI::Xaml::Controls::IControl3>
{
    HRESULT __stdcall get_UseSystemFocusVisuals(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UseSystemFocusVisuals());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UseSystemFocusVisuals(bool value) noexcept override
    {
        try
        {
            this->shim().UseSystemFocusVisuals(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControl4> : produce_base<D, Windows::UI::Xaml::Controls::IControl4>
{
    HRESULT __stdcall get_IsFocusEngagementEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFocusEngagementEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFocusEngagementEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsFocusEngagementEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFocusEngaged(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFocusEngaged());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFocusEngaged(bool value) noexcept override
    {
        try
        {
            this->shim().IsFocusEngaged(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RequiresPointer());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer value) noexcept override
    {
        try
        {
            this->shim().RequiresPointer(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusLeft(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusLeft());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusLeft(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusLeft(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRight(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusRight());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusRight(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusRight(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUp(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusUp());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusUp(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusUp(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDown(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusDown());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusDown(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusDown(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ElementSoundMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ElementSoundMode(Windows::UI::Xaml::ElementSoundMode value) noexcept override
    {
        try
        {
            this->shim().ElementSoundMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FocusEngaged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FocusEngaged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FocusEngaged(event_token token) noexcept override
    {
        try
        {
            this->shim().FocusEngaged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FocusDisengaged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FocusDisengaged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FocusDisengaged(event_token token) noexcept override
    {
        try
        {
            this->shim().FocusDisengaged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveFocusEngagement() noexcept override
    {
        try
        {
            this->shim().RemoveFocusEngagement();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IControl> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IControlOverrides>
{
    HRESULT __stdcall abi_OnPointerEntered(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerEntered(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerPressed(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerPressed(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerMoved(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerMoved(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerReleased(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerReleased(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerExited(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerExited(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerCaptureLost(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerCaptureLost(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerCanceled(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerCanceled(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnPointerWheelChanged(abi_arg_in<Windows::UI::Xaml::Input::IPointerRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnPointerWheelChanged(*reinterpret_cast<const Windows::UI::Xaml::Input::PointerRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnTapped(abi_arg_in<Windows::UI::Xaml::Input::ITappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::TappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDoubleTapped(abi_arg_in<Windows::UI::Xaml::Input::IDoubleTappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnDoubleTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnHolding(abi_arg_in<Windows::UI::Xaml::Input::IHoldingRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnHolding(*reinterpret_cast<const Windows::UI::Xaml::Input::HoldingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnRightTapped(abi_arg_in<Windows::UI::Xaml::Input::IRightTappedRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnRightTapped(*reinterpret_cast<const Windows::UI::Xaml::Input::RightTappedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationStarting(abi_arg_in<Windows::UI::Xaml::Input::IManipulationStartingRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnManipulationStarting(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationInertiaStarting(abi_arg_in<Windows::UI::Xaml::Input::IManipulationInertiaStartingRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnManipulationInertiaStarting(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationStarted(abi_arg_in<Windows::UI::Xaml::Input::IManipulationStartedRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnManipulationStarted(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationDelta(abi_arg_in<Windows::UI::Xaml::Input::IManipulationDeltaRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnManipulationDelta(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnManipulationCompleted(abi_arg_in<Windows::UI::Xaml::Input::IManipulationCompletedRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnManipulationCompleted(*reinterpret_cast<const Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnKeyUp(abi_arg_in<Windows::UI::Xaml::Input::IKeyRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnKeyUp(*reinterpret_cast<const Windows::UI::Xaml::Input::KeyRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnKeyDown(abi_arg_in<Windows::UI::Xaml::Input::IKeyRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnKeyDown(*reinterpret_cast<const Windows::UI::Xaml::Input::KeyRoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnGotFocus(abi_arg_in<Windows::UI::Xaml::IRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnGotFocus(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnLostFocus(abi_arg_in<Windows::UI::Xaml::IRoutedEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnLostFocus(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragEnter(abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnDragEnter(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragLeave(abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnDragLeave(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDragOver(abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnDragOver(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnDrop(abi_arg_in<Windows::UI::Xaml::IDragEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnDrop(*reinterpret_cast<const Windows::UI::Xaml::DragEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlProtected> : produce_base<D, Windows::UI::Xaml::Controls::IControlProtected>
{
    HRESULT __stdcall get_DefaultStyleKey(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultStyleKey());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultStyleKey(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().DefaultStyleKey(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetTemplateChild(abi_arg_in<hstring> childName, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetTemplateChild(*reinterpret_cast<const hstring *>(&childName)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics>
{
    HRESULT __stdcall get_FontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTabStopProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTabStopProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TabIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TabNavigationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TabNavigationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalContentAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalContentAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalContentAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultStyleKeyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultStyleKeyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusStateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusStateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics3>
{
    HRESULT __stdcall get_UseSystemFocusVisualsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UseSystemFocusVisualsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTemplateFocusTargetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTemplateFocusTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsTemplateFocusTarget(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetIsTemplateFocusTarget(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsTemplateFocusTarget(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetIsTemplateFocusTarget(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IControlStatics4>
{
    HRESULT __stdcall get_IsFocusEngagementEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFocusEngagementEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFocusEngagedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFocusEngagedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RequiresPointerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RequiresPointerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusLeftProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusRightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUpProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusUpProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDownProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusDownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ElementSoundModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ElementSoundModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IControlTemplate> : produce_base<D, Windows::UI::Xaml::Controls::IControlTemplate>
{
    HRESULT __stdcall get_TargetType(abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TargetType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TargetType(abi_arg_in<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            this->shim().TargetType(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelector> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelector>
{
    HRESULT __stdcall abi_SelectTemplate(abi_arg_in<Windows::IInspectable> item, abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectTemplate(*reinterpret_cast<const Windows::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelector2> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelector2>
{
    HRESULT __stdcall abi_SelectTemplateForItem(abi_arg_in<Windows::IInspectable> item, abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectTemplate(*reinterpret_cast<const Windows::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides>
{
    HRESULT __stdcall abi_SelectTemplateCore(abi_arg_in<Windows::IInspectable> item, abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectTemplateCore(*reinterpret_cast<const Windows::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2> : produce_base<D, Windows::UI::Xaml::Controls::IDataTemplateSelectorOverrides2>
{
    HRESULT __stdcall abi_SelectTemplateForItemCore(abi_arg_in<Windows::IInspectable> item, abi_arg_out<Windows::UI::Xaml::IDataTemplate> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectTemplateCore(*reinterpret_cast<const Windows::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickedEventArgs>
{
    HRESULT __stdcall get_OldDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePicker> : produce_base<D, Windows::UI::Xaml::Controls::IDatePicker>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayVisible(bool value) noexcept override
    {
        try
        {
            this->shim().DayVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthVisible(bool value) noexcept override
    {
        try
        {
            this->shim().MonthVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearVisible(bool value) noexcept override
    {
        try
        {
            this->shim().YearVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DayFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().MonthFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().YearFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYear(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinYear(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MinYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYear(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxYear(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MaxYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DateChanged(abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DateChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DateChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().DateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePicker2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IDatePicker> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyout>
{
    HRESULT __stdcall get_CalendarIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CalendarIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().CalendarIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Date(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Date());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Date(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().Date(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayVisible(bool value) noexcept override
    {
        try
        {
            this->shim().DayVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthVisible(bool value) noexcept override
    {
        try
        {
            this->shim().MonthVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearVisible(bool value) noexcept override
    {
        try
        {
            this->shim().YearVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYear(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinYear(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MinYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYear(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxYear());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxYear(abi_arg_in<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            this->shim().MaxYear(*reinterpret_cast<const Windows::Foundation::DateTime *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DatePicked(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DatePicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DatePicked(event_token token) noexcept override
    {
        try
        {
            this->shim().DatePicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyout2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyout2>
{
    HRESULT __stdcall get_DayFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DayFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DayFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MonthFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().MonthFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormat(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearFormat());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_YearFormat(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().YearFormat(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItem>
{
    HRESULT __stdcall get_PrimaryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PrimaryText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PrimaryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SecondaryText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SecondaryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutItemStatics>
{
    HRESULT __stdcall get_PrimaryTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PrimaryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SecondaryTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SecondaryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics>
{
    HRESULT __stdcall get_CalendarIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYearProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYearProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerFlyoutStatics2>
{
    HRESULT __stdcall get_DayFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CalendarIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CalendarIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DayFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DayFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MonthFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MonthFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_YearFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().YearFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinYearProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxYearProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxYearProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDatePickerValueChangedEventArgs>
{
    HRESULT __stdcall get_OldDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OldDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewDate(abi_arg_out<Windows::Foundation::DateTime> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NewDate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDragItemsCompletedEventArgs>
{
    HRESULT __stdcall get_Items(abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DropResult(Windows::ApplicationModel::DataTransfer::DataPackageOperation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DropResult());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDragItemsStartingEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Items(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Data(abi_arg_out<Windows::ApplicationModel::DataTransfer::IDataPackage> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Data());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IDynamicOverflowItemsChangingEventArgs>
{
    HRESULT __stdcall get_Action(Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Action());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipView> : produce_base<D, Windows::UI::Xaml::Controls::IFlipView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipView2> : produce_base<D, Windows::UI::Xaml::Controls::IFlipView2>
{
    HRESULT __stdcall get_UseTouchAnimationsForAllNavigation(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UseTouchAnimationsForAllNavigation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_UseTouchAnimationsForAllNavigation(bool value) noexcept override
    {
        try
        {
            this->shim().UseTouchAnimationsForAllNavigation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFlipView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFlipViewItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlipViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFlipViewStatics2>
{
    HRESULT __stdcall get_UseTouchAnimationsForAllNavigationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().UseTouchAnimationsForAllNavigationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IFlyout>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FlyoutPresenterStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FlyoutPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FlyoutPresenterStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().FlyoutPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFlyout> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFlyoutPresenter> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFlyoutStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FlyoutPresenterStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FlyoutPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IFocusDisengagedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFocusEngagedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IFocusEngagedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon>
{
    HRESULT __stdcall get_Glyph(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Glyph());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Glyph(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Glyph(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon2> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIcon3> : produce_base<D, Windows::UI::Xaml::Controls::IFontIcon3>
{
    HRESULT __stdcall get_MirroredWhenRightToLeft(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MirroredWhenRightToLeft());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MirroredWhenRightToLeft(bool value) noexcept override
    {
        try
        {
            this->shim().MirroredWhenRightToLeft(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFontIcon> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics>
{
    HRESULT __stdcall get_GlyphProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GlyphProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics2>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFontIconStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IFontIconStatics3>
{
    HRESULT __stdcall get_MirroredWhenRightToLeftProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MirroredWhenRightToLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame> : produce_base<D, Windows::UI::Xaml::Controls::IFrame>
{
    HRESULT __stdcall get_CacheSize(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheSize(int32_t value) noexcept override
    {
        try
        {
            this->shim().CacheSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoBack(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoBack());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForward(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoForward());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentSourcePageType(abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CurrentSourcePageType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourcePageType(abi_arg_out<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourcePageType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourcePageType(abi_arg_in<Windows::UI::Xaml::Interop::TypeName> value) noexcept override
    {
        try
        {
            this->shim().SourcePageType(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackStackDepth(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackStackDepth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Navigated(abi_arg_in<Windows::UI::Xaml::Navigation::NavigatedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Navigated(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Navigated(event_token token) noexcept override
    {
        try
        {
            this->shim().Navigated(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Navigating(abi_arg_in<Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Navigating(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Navigating(event_token token) noexcept override
    {
        try
        {
            this->shim().Navigating(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationFailed(abi_arg_in<Windows::UI::Xaml::Navigation::NavigationFailedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NavigationFailed(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept override
    {
        try
        {
            this->shim().NavigationFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationStopped(abi_arg_in<Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NavigationStopped(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationStopped(event_token token) noexcept override
    {
        try
        {
            this->shim().NavigationStopped(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoBack() noexcept override
    {
        try
        {
            this->shim().GoBack();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoForward() noexcept override
    {
        try
        {
            this->shim().GoForward();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, abi_arg_in<Windows::IInspectable> parameter, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType), *reinterpret_cast<const Windows::IInspectable *>(&parameter)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetNavigationState(abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetNavigationState());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetNavigationState(abi_arg_in<hstring> navigationState) noexcept override
    {
        try
        {
            this->shim().SetNavigationState(*reinterpret_cast<const hstring *>(&navigationState));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame2> : produce_base<D, Windows::UI::Xaml::Controls::IFrame2>
{
    HRESULT __stdcall get_BackStack(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackStack());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForwardStack(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForwardStack());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, abi_arg_in<Windows::IInspectable> parameter, abi_arg_in<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo> infoOverride, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType), *reinterpret_cast<const Windows::IInspectable *>(&parameter), *reinterpret_cast<const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo *>(&infoOverride)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrame3> : produce_base<D, Windows::UI::Xaml::Controls::IFrame3>
{
    HRESULT __stdcall abi_GoBack(abi_arg_in<Windows::UI::Xaml::Media::Animation::INavigationTransitionInfo> transitionInfoOverride) noexcept override
    {
        try
        {
            this->shim().GoBack(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo *>(&transitionInfoOverride));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameFactory> : produce_base<D, Windows::UI::Xaml::Controls::IFrameFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IFrame> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameStatics> : produce_base<D, Windows::UI::Xaml::Controls::IFrameStatics>
{
    HRESULT __stdcall get_CacheSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoBackProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoBackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForwardProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoForwardProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentSourcePageTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CurrentSourcePageTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourcePageTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourcePageTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BackStackDepthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackStackDepthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IFrameStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IFrameStatics2>
{
    HRESULT __stdcall get_BackStackProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackStackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForwardStackProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForwardStackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGrid> : produce_base<D, Windows::UI::Xaml::Controls::IGrid>
{
    HRESULT __stdcall get_RowDefinitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::RowDefinition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RowDefinitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnDefinitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::ColumnDefinition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ColumnDefinitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGrid2> : produce_base<D, Windows::UI::Xaml::Controls::IGrid2>
{
    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGrid> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IGridStatics>
{
    HRESULT __stdcall get_RowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRow(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetRow(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRow(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetRow(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ColumnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumn(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetColumn(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumn(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetColumn(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RowSpanProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RowSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRowSpan(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRowSpan(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnSpanProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ColumnSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumnSpan(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumnSpan(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IGridStatics2>
{
    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridView> : produce_base<D, Windows::UI::Xaml::Controls::IGridView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGridView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewHeaderItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGridViewHeaderItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewItem>
{
    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IGridViewItemTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGridViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGridViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGridViewItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupItem> : produce_base<D, Windows::UI::Xaml::Controls::IGroupItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGroupItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyle> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyle>
{
    HRESULT __stdcall get_Panel(abi_arg_out<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Panel());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Panel(abi_arg_in<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            this->shim().Panel(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemsPanelTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContainerStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContainerStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().ContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContainerStyleSelector(abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContainerStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContainerStyleSelector(abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            this->shim().ContainerStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateSelector(abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplateSelector(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HidesIfEmpty(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HidesIfEmpty());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HidesIfEmpty(bool value) noexcept override
    {
        try
        {
            this->shim().HidesIfEmpty(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyle2> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyle2>
{
    HRESULT __stdcall get_HeaderContainerStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderContainerStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().HeaderContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelector> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelector>
{
    HRESULT __stdcall abi_SelectGroupStyle(abi_arg_in<Windows::IInspectable> group, uint32_t level, abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectGroupStyle(*reinterpret_cast<const Windows::IInspectable *>(&group), level));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyleSelector> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IGroupStyleSelectorOverrides>
{
    HRESULT __stdcall abi_SelectGroupStyleCore(abi_arg_in<Windows::IInspectable> group, uint32_t level, abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyle> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectGroupStyleCore(*reinterpret_cast<const Windows::IInspectable *>(&group), level));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHub> : produce_base<D, Windows::UI::Xaml::Controls::IHub>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultSectionIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultSectionIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultSectionIndex(int32_t value) noexcept override
    {
        try
        {
            this->shim().DefaultSectionIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Sections(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Sections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SectionsInView(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SectionsInView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SectionHeaders(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SectionHeaders());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SectionHeaderClick(abi_arg_in<Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SectionHeaderClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SectionHeaderClick(event_token token) noexcept override
    {
        try
        {
            this->shim().SectionHeaderClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SectionsInViewChanged(abi_arg_in<Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SectionsInViewChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SectionsInViewChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SectionsInViewChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToSection(abi_arg_in<Windows::UI::Xaml::Controls::IHubSection> section) noexcept override
    {
        try
        {
            this->shim().ScrollToSection(*reinterpret_cast<const Windows::UI::Xaml::Controls::HubSection *>(&section));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHubFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IHub> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSection> : produce_base<D, Windows::UI::Xaml::Controls::IHubSection>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ContentTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().ContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderInteractive(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHeaderInteractive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHeaderInteractive(bool value) noexcept override
    {
        try
        {
            this->shim().IsHeaderInteractive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IHubSection> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionHeaderClickEventArgs>
{
    HRESULT __stdcall get_Section(abi_arg_out<Windows::UI::Xaml::Controls::IHubSection> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Section());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubSectionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHubSectionStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderInteractiveProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHeaderInteractiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHubStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHubStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultSectionIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultSectionIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SemanticZoomOwnerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SemanticZoomOwnerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsActiveViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButton> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButton>
{
    HRESULT __stdcall get_NavigateUri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NavigateUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NavigateUri(abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            this->shim().NavigateUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IHyperlinkButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IHyperlinkButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IHyperlinkButtonStatics>
{
    HRESULT __stdcall get_NavigateUriProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NavigateUriProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElement> : produce_base<D, Windows::UI::Xaml::Controls::IIconElement>
{
    HRESULT __stdcall get_Foreground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElementFactory> : produce_base<D, Windows::UI::Xaml::Controls::IIconElementFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IIconElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IIconElementStatics>
{
    HRESULT __stdcall get_ForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage> : produce_base<D, Windows::UI::Xaml::Controls::IImage>
{
    HRESULT __stdcall get_Source(abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            this->shim().Source(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NineGrid(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NineGrid());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NineGrid(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().NineGrid(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSource(abi_arg_out<Windows::Media::PlayTo::IPlayToSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ImageFailed(abi_arg_in<Windows::UI::Xaml::ExceptionRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ImageFailed(*reinterpret_cast<const Windows::UI::Xaml::ExceptionRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ImageFailed(event_token token) noexcept override
    {
        try
        {
            this->shim().ImageFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ImageOpened(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ImageOpened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ImageOpened(event_token token) noexcept override
    {
        try
        {
            this->shim().ImageOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage2> : produce_base<D, Windows::UI::Xaml::Controls::IImage2>
{
    HRESULT __stdcall abi_GetAsCastingSource(abi_arg_out<Windows::Media::Casting::ICastingSource> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetAsCastingSource());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImage3> : produce_base<D, Windows::UI::Xaml::Controls::IImage3>
{
    HRESULT __stdcall abi_GetAlphaMask(abi_arg_out<Windows::UI::Composition::ICompositionBrush> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetAlphaMask());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IImageStatics> : produce_base<D, Windows::UI::Xaml::Controls::IImageStatics>
{
    HRESULT __stdcall get_SourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NineGridProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NineGridProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkCanvas> : produce_base<D, Windows::UI::Xaml::Controls::IInkCanvas>
{
    HRESULT __stdcall get_InkPresenter(abi_arg_out<Windows::UI::Input::Inking::IInkPresenter> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InkPresenter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkCanvasFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkCanvasFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkCanvas> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbar> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbar>
{
    HRESULT __stdcall get_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InitialControls());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls value) noexcept override
    {
        try
        {
            this->shim().InitialControls(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Children(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::DependencyObject>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Children());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActiveTool(abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToolButton> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActiveTool());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ActiveTool(abi_arg_in<Windows::UI::Xaml::Controls::IInkToolbarToolButton> value) noexcept override
    {
        try
        {
            this->shim().ActiveTool(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkToolbarToolButton *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InkDrawingAttributes(abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InkDrawingAttributes());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsRulerButtonChecked(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsRulerButtonChecked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsRulerButtonChecked(bool value) noexcept override
    {
        try
        {
            this->shim().IsRulerButtonChecked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TargetInkCanvas(abi_arg_out<Windows::UI::Xaml::Controls::IInkCanvas> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TargetInkCanvas());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TargetInkCanvas(abi_arg_in<Windows::UI::Xaml::Controls::IInkCanvas> value) noexcept override
    {
        try
        {
            this->shim().TargetInkCanvas(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkCanvas *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ActiveToolChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ActiveToolChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ActiveToolChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().ActiveToolChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_InkDrawingAttributesChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().InkDrawingAttributesChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_InkDrawingAttributesChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().InkDrawingAttributesChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_EraseAllClicked(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().EraseAllClicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_EraseAllClicked(event_token token) noexcept override
    {
        try
        {
            this->shim().EraseAllClicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_IsRulerButtonCheckedChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().IsRulerButtonCheckedChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_IsRulerButtonCheckedChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().IsRulerButtonCheckedChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool tool, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToolButton> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetToolButton(tool));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle tool, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarToggleButton> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetToggleButton(tool));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarBallpointPenButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPen> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPen>
{
    HRESULT __stdcall abi_CreateInkDrawingAttributes(abi_arg_in<Windows::UI::Xaml::Media::IBrush> brush, double strokeWidth, abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CreateInkDrawingAttributes(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&brush), strokeWidth));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton>
{
    HRESULT __stdcall get_CustomPen(abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CustomPen());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CustomPen(abi_arg_in<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> value) noexcept override
    {
        try
        {
            this->shim().CustomPen(*reinterpret_cast<const Windows::UI::Xaml::Controls::InkToolbarCustomPen *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfigurationContent(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfigurationContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfigurationContent(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().ConfigurationContent(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPenButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenButtonStatics>
{
    HRESULT __stdcall get_CustomPenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CustomPenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfigurationContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfigurationContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomPen> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomPenOverrides>
{
    HRESULT __stdcall abi_CreateInkDrawingAttributesCore(abi_arg_in<Windows::UI::Xaml::Media::IBrush> brush, double strokeWidth, abi_arg_out<Windows::UI::Input::Inking::IInkDrawingAttributes> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CreateInkDrawingAttributesCore(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&brush), strokeWidth));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomToggleButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton>
{
    HRESULT __stdcall get_ConfigurationContent(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfigurationContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfigurationContent(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().ConfigurationContent(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarCustomToolButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarCustomToolButtonStatics>
{
    HRESULT __stdcall get_ConfigurationContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfigurationContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarEraserButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarEraserButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbar> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarHighlighterButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarHighlighterButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButton>
{
    HRESULT __stdcall get_Palette(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Palette());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Palette(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush>> value) noexcept override
    {
        try
        {
            this->shim().Palette(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinStrokeWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinStrokeWidth(double value) noexcept override
    {
        try
        {
            this->shim().MinStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxStrokeWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxStrokeWidth(double value) noexcept override
    {
        try
        {
            this->shim().MaxStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBrushIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedBrushIndex(int32_t value) noexcept override
    {
        try
        {
            this->shim().SelectedBrushIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedStrokeWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedStrokeWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedStrokeWidth(double value) noexcept override
    {
        try
        {
            this->shim().SelectedStrokeWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenButtonStatics>
{
    HRESULT __stdcall get_PaletteProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaletteProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinStrokeWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxStrokeWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedBrushIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedBrushIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedStrokeWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedStrokeWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl>
{
    HRESULT __stdcall get_PenButton(abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPenButton> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PenButton());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControl> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPenConfigurationControlStatics>
{
    HRESULT __stdcall get_PenButtonProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PenButtonProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButton>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarPencilButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarPencilButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButton>
{
    HRESULT __stdcall get_Ruler(abi_arg_out<Windows::UI::Input::Inking::IInkPresenterRuler> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Ruler());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IInkToolbarRulerButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarRulerButtonStatics>
{
    HRESULT __stdcall get_RulerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RulerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarStatics>
{
    HRESULT __stdcall get_InitialControlsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InitialControlsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChildrenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActiveToolProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActiveToolProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InkDrawingAttributesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InkDrawingAttributesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsRulerButtonCheckedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsRulerButtonCheckedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TargetInkCanvasProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TargetInkCanvasProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButton>
{
    HRESULT __stdcall get_ToggleKind(Windows::UI::Xaml::Controls::InkToolbarToggle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ToggleKind());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToggleButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButton> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButton>
{
    HRESULT __stdcall get_ToolKind(Windows::UI::Xaml::Controls::InkToolbarTool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ToolKind());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsExtensionGlyphShown(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsExtensionGlyphShown());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsExtensionGlyphShown(bool value) noexcept override
    {
        try
        {
            this->shim().IsExtensionGlyphShown(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IInkToolbarToolButtonStatics>
{
    HRESULT __stdcall get_IsExtensionGlyphShownProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsExtensionGlyphShownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IInsertionPanel> : produce_base<D, Windows::UI::Xaml::Controls::IInsertionPanel>
{
    HRESULT __stdcall abi_GetInsertionIndexes(abi_arg_in<Windows::Foundation::Point> position, int32_t * first, int32_t * second) noexcept override
    {
        try
        {
            this->shim().GetInsertionIndexes(*reinterpret_cast<const Windows::Foundation::Point *>(&position), *first, *second);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemClickEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IItemClickEventArgs>
{
    HRESULT __stdcall get_ClickedItem(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClickedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemContainerGenerator> : produce_base<D, Windows::UI::Xaml::Controls::IItemContainerGenerator>
{
    HRESULT __stdcall add_ItemsChanged(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ItemsChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemsChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().ItemsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ItemFromContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::IInspectable> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ItemFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromItem(abi_arg_in<Windows::IInspectable> item, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ContainerFromItem(*reinterpret_cast<const Windows::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, int32_t * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().IndexFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromIndex(int32_t index, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ContainerFromIndex(index));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetItemContainerGeneratorForPanel(abi_arg_in<Windows::UI::Xaml::Controls::IPanel> panel, abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetItemContainerGeneratorForPanel(*reinterpret_cast<const Windows::UI::Xaml::Controls::Panel *>(&panel)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartAt(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) noexcept override
    {
        try
        {
            this->shim().StartAt(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), direction, allowStartAtRealizedItem);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GenerateNext(bool * isNewlyRealized, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GenerateNext(*isNewlyRealized));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PrepareItemContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container) noexcept override
    {
        try
        {
            this->shim().PrepareItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveAll() noexcept override
    {
        try
        {
            this->shim().RemoveAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Remove(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t count) noexcept override
    {
        try
        {
            this->shim().Remove(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), count);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GeneratorPositionFromIndex(int32_t itemIndex, abi_arg_out<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GeneratorPositionFromIndex(itemIndex));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromGeneratorPosition(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().IndexFromGeneratorPosition(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Recycle(abi_arg_in<Windows::UI::Xaml::Controls::Primitives::GeneratorPosition> position, int32_t count) noexcept override
    {
        try
        {
            this->shim().Recycle(*reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition *>(&position), count);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemContainerMapping> : produce_base<D, Windows::UI::Xaml::Controls::IItemContainerMapping>
{
    HRESULT __stdcall abi_ItemFromContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::IInspectable> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ItemFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromItem(abi_arg_in<Windows::IInspectable> item, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ContainerFromItem(*reinterpret_cast<const Windows::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IndexFromContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, int32_t * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().IndexFromContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ContainerFromIndex(int32_t index, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ContainerFromIndex(index));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl>
{
    HRESULT __stdcall get_ItemsSource(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsSource(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().ItemsSource(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Items(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().ItemTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateSelector(abi_arg_out<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplateSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplateSelector(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> value) noexcept override
    {
        try
        {
            this->shim().ItemTemplateSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsPanel(abi_arg_out<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsPanel());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsPanel(abi_arg_in<Windows::UI::Xaml::Controls::IItemsPanelTemplate> value) noexcept override
    {
        try
        {
            this->shim().ItemsPanel(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemsPanelTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPath(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMemberPath(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DisplayMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().ItemContainerStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleSelector(abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerStyleSelector(abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> value) noexcept override
    {
        try
        {
            this->shim().ItemContainerStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerGenerator(abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerGenerator());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemContainerTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().ItemContainerTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyle(abi_arg_out<Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyleSelector(abi_arg_out<Windows::UI::Xaml::Controls::IGroupStyleSelector> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupStyleSelector());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupStyleSelector(abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> value) noexcept override
    {
        try
        {
            this->shim().GroupStyleSelector(*reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGrouping(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGrouping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl2>
{
    HRESULT __stdcall get_ItemsPanelRoot(abi_arg_out<Windows::UI::Xaml::Controls::IPanel> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsPanelRoot());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControl3> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControl3>
{
    HRESULT __stdcall abi_GroupHeaderContainerFromItemContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> itemContainer, abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GroupHeaderContainerFromItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&itemContainer)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlOverrides>
{
    HRESULT __stdcall abi_IsItemItsOwnContainerOverride(abi_arg_in<Windows::IInspectable> item, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().IsItemItsOwnContainerOverride(*reinterpret_cast<const Windows::IInspectable *>(&item)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetContainerForItemOverride(abi_arg_out<Windows::UI::Xaml::IDependencyObject> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetContainerForItemOverride());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ClearContainerForItemOverride(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_in<Windows::IInspectable> item) noexcept override
    {
        try
        {
            this->shim().ClearContainerForItemOverride(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PrepareContainerForItemOverride(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_in<Windows::IInspectable> item) noexcept override
    {
        try
        {
            this->shim().PrepareContainerForItemOverride(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemsChanged(abi_arg_in<Windows::IInspectable> e) noexcept override
    {
        try
        {
            this->shim().OnItemsChanged(*reinterpret_cast<const Windows::IInspectable *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemContainerStyleChanged(abi_arg_in<Windows::UI::Xaml::IStyle> oldItemContainerStyle, abi_arg_in<Windows::UI::Xaml::IStyle> newItemContainerStyle) noexcept override
    {
        try
        {
            this->shim().OnItemContainerStyleChanged(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&oldItemContainerStyle), *reinterpret_cast<const Windows::UI::Xaml::Style *>(&newItemContainerStyle));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemContainerStyleSelectorChanged(abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> oldItemContainerStyleSelector, abi_arg_in<Windows::UI::Xaml::Controls::IStyleSelector> newItemContainerStyleSelector) noexcept override
    {
        try
        {
            this->shim().OnItemContainerStyleSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&oldItemContainerStyleSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::StyleSelector *>(&newItemContainerStyleSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemTemplateChanged(abi_arg_in<Windows::UI::Xaml::IDataTemplate> oldItemTemplate, abi_arg_in<Windows::UI::Xaml::IDataTemplate> newItemTemplate) noexcept override
    {
        try
        {
            this->shim().OnItemTemplateChanged(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&oldItemTemplate), *reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&newItemTemplate));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnItemTemplateSelectorChanged(abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> oldItemTemplateSelector, abi_arg_in<Windows::UI::Xaml::Controls::IDataTemplateSelector> newItemTemplateSelector) noexcept override
    {
        try
        {
            this->shim().OnItemTemplateSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&oldItemTemplateSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::DataTemplateSelector *>(&newItemTemplateSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnGroupStyleSelectorChanged(abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> oldGroupStyleSelector, abi_arg_in<Windows::UI::Xaml::Controls::IGroupStyleSelector> newGroupStyleSelector) noexcept override
    {
        try
        {
            this->shim().OnGroupStyleSelectorChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&oldGroupStyleSelector), *reinterpret_cast<const Windows::UI::Xaml::Controls::GroupStyleSelector *>(&newGroupStyleSelector));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsControlStatics>
{
    HRESULT __stdcall get_ItemsSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateSelectorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplateSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPathProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerStyleSelectorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerStyleSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemContainerTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupStyleSelectorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupStyleSelectorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsGroupingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsGroupingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetItemsOwner(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetItemsOwner(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ItemsControlFromItemContainer(abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::UI::Xaml::Controls::IItemsControl> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ItemsControlFromItemContainer(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPanelTemplate> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPanelTemplate>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPickedEventArgs>
{
    HRESULT __stdcall get_AddedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AddedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RemovedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenter>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().HeaderTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenter2>
{
    HRESULT __stdcall get_Footer(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Footer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Footer(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Footer(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().FooterTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().FooterTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsPresenterStatics2>
{
    HRESULT __stdcall get_FooterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanel>
{
    HRESULT __stdcall get_GroupPadding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupPadding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupPadding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().GroupPadding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LastVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LastCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollingDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupHeaderPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept override
    {
        try
        {
            this->shim().GroupHeaderPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsUpdatingScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) noexcept override
    {
        try
        {
            this->shim().ItemsUpdatingScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLength(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheLength(double value) noexcept override
    {
        try
        {
            this->shim().CacheLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanel2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanel2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreStickyGroupHeadersEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().AreStickyGroupHeadersEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics>
{
    HRESULT __stdcall get_GroupPaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupPaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupHeaderPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsStackPanelStatics2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreStickyGroupHeadersEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGrid>
{
    HRESULT __stdcall get_GroupPadding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupPadding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupPadding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().GroupPadding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FirstVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FirstVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastVisibleIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LastVisibleIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LastCacheIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LastCacheIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollingDirection(Windows::UI::Xaml::Controls::PanelScrollingDirection * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollingDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupHeaderPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) noexcept override
    {
        try
        {
            this->shim().GroupHeaderPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLength(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CacheLength(double value) noexcept override
    {
        try
        {
            this->shim().CacheLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGrid2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGrid2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreStickyGroupHeadersEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreStickyGroupHeadersEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().AreStickyGroupHeadersEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics>
{
    HRESULT __stdcall get_GroupPaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupPaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_GroupHeaderPlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupHeaderPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CacheLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CacheLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IItemsWrapGridStatics2>
{
    HRESULT __stdcall get_AreStickyGroupHeadersEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreStickyGroupHeadersEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBox> : produce_base<D, Windows::UI::Xaml::Controls::IListBox>
{
    HRESULT __stdcall get_SelectedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) noexcept override
    {
        try
        {
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoView(abi_arg_in<Windows::IInspectable> item) noexcept override
    {
        try
        {
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBox2> : produce_base<D, Windows::UI::Xaml::Controls::IListBox2>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocus(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SingleSelectionFollowsFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept override
    {
        try
        {
            this->shim().SingleSelectionFollowsFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxItem> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListBoxItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxStatics>
{
    HRESULT __stdcall get_SelectionModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IListBoxStatics2>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SingleSelectionFollowsFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyout>
{
    HRESULT __stdcall get_ItemsSource(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemsSource(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().ItemsSource(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().ItemTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPath(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMemberPath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMemberPath(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().DisplayMemberPath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) noexcept override
    {
        try
        {
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept override
    {
        try
        {
            this->shim().SelectedIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItem(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedItem(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SelectedItem(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValue(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedValue());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedValue(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SelectedValue(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValuePath(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedValuePath());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedValuePath(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SelectedValuePath(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ItemsPicked(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ItemsPicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemsPicked(event_token token) noexcept override
    {
        try
        {
            this->shim().ItemsPicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::IInspectable>>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListPickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListPickerFlyoutStatics>
{
    HRESULT __stdcall get_ItemsSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemsSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMemberPathProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMemberPathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItemProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItemProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValueProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedValueProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedValuePathProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedValuePathProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListView> : produce_base<D, Windows::UI::Xaml::Controls::IListView>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase>
{
    HRESULT __stdcall get_SelectedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) noexcept override
    {
        try
        {
            this->shim().SelectionMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSwipeEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSwipeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSwipeEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSwipeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanDragItems(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanDragItems());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanDragItems(bool value) noexcept override
    {
        try
        {
            this->shim().CanDragItems(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanReorderItems(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanReorderItems());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanReorderItems(bool value) noexcept override
    {
        try
        {
            this->shim().CanReorderItems(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemClickEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsItemClickEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsItemClickEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsItemClickEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataFetchSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DataFetchSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DataFetchSize(double value) noexcept override
    {
        try
        {
            this->shim().DataFetchSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingThreshold(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IncrementalLoadingThreshold());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IncrementalLoadingThreshold(double value) noexcept override
    {
        try
        {
            this->shim().IncrementalLoadingThreshold(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IncrementalLoadingTrigger());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) noexcept override
    {
        try
        {
            this->shim().IncrementalLoadingTrigger(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ItemClick(abi_arg_in<Windows::UI::Xaml::Controls::ItemClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ItemClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::ItemClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ItemClick(event_token token) noexcept override
    {
        try
        {
            this->shim().ItemClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DragItemsStarting(abi_arg_in<Windows::UI::Xaml::Controls::DragItemsStartingEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DragItemsStarting(*reinterpret_cast<const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DragItemsStarting(event_token token) noexcept override
    {
        try
        {
            this->shim().DragItemsStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoView(abi_arg_in<Windows::IInspectable> item) noexcept override
    {
        try
        {
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::IInspectable *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LoadMoreItemsAsync(abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().LoadMoreItemsAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollIntoViewWithAlignment(abi_arg_in<Windows::IInspectable> item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) noexcept override
    {
        try
        {
            this->shim().ScrollIntoView(*reinterpret_cast<const Windows::IInspectable *>(&item), alignment);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().HeaderTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase2> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase2>
{
    HRESULT __stdcall get_ShowsScrollingPlaceholders(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowsScrollingPlaceholders());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowsScrollingPlaceholders(bool value) noexcept override
    {
        try
        {
            this->shim().ShowsScrollingPlaceholders(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContainerContentChanging(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContainerContentChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContainerContentChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().ContainerContentChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDesiredContainerUpdateDuration(abi_arg_in<Windows::Foundation::TimeSpan> duration) noexcept override
    {
        try
        {
            this->shim().SetDesiredContainerUpdateDuration(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&duration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Footer(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Footer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Footer(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Footer(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().FooterTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FooterTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().FooterTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase3> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase3>
{
    HRESULT __stdcall get_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ReorderMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode value) noexcept override
    {
        try
        {
            this->shim().ReorderMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase4> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase4>
{
    HRESULT __stdcall get_SelectedRanges(abi_arg_out<Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedRanges());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMultiSelectCheckBoxEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsMultiSelectCheckBoxEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsMultiSelectCheckBoxEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsMultiSelectCheckBoxEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DragItemsCompleted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DragItemsCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DragItemsCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().DragItemsCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ChoosingItemContainer(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ChoosingItemContainer(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ChoosingItemContainer(event_token token) noexcept override
    {
        try
        {
            this->shim().ChoosingItemContainer(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ChoosingGroupHeaderContainer(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ChoosingGroupHeaderContainer(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ChoosingGroupHeaderContainer(event_token token) noexcept override
    {
        try
        {
            this->shim().ChoosingGroupHeaderContainer(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectRange(abi_arg_in<Windows::UI::Xaml::Data::IItemIndexRange> itemIndexRange) noexcept override
    {
        try
        {
            this->shim().SelectRange(*reinterpret_cast<const Windows::UI::Xaml::Data::ItemIndexRange *>(&itemIndexRange));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_DeselectRange(abi_arg_in<Windows::UI::Xaml::Data::IItemIndexRange> itemIndexRange) noexcept override
    {
        try
        {
            this->shim().DeselectRange(*reinterpret_cast<const Windows::UI::Xaml::Data::ItemIndexRange *>(&itemIndexRange));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBase5> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBase5>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocus(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SingleSelectionFollowsFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SingleSelectionFollowsFocus(bool value) noexcept override
    {
        try
        {
            this->shim().SingleSelectionFollowsFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_IsDragSource(bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().IsDragSource());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListViewBase> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseHeaderItemFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics>
{
    HRESULT __stdcall get_SelectionModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSwipeEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSwipeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanDragItemsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanDragItemsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanReorderItemsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanReorderItemsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemClickEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsItemClickEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataFetchSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DataFetchSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingThresholdProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IncrementalLoadingThresholdProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IncrementalLoadingTriggerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IncrementalLoadingTriggerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SemanticZoomOwnerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SemanticZoomOwnerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsActiveViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics2>
{
    HRESULT __stdcall get_ShowsScrollingPlaceholdersProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowsScrollingPlaceholdersProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FooterTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FooterTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics3>
{
    HRESULT __stdcall get_ReorderModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ReorderModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics4>
{
    HRESULT __stdcall get_IsMultiSelectCheckBoxEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsMultiSelectCheckBoxEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewBaseStatics5> : produce_base<D, Windows::UI::Xaml::Controls::IListViewBaseStatics5>
{
    HRESULT __stdcall get_SingleSelectionFollowsFocusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SingleSelectionFollowsFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewHeaderItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewHeaderItem>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewHeaderItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewHeaderItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListViewHeaderItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewItem> : produce_base<D, Windows::UI::Xaml::Controls::IListViewItem>
{
    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IListViewItemTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IListViewItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IListViewItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelper> : produce_base<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelper>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics> : produce_base<D, Windows::UI::Xaml::Controls::IListViewPersistenceHelperStatics>
{
    HRESULT __stdcall abi_GetRelativeScrollPosition(abi_arg_in<Windows::UI::Xaml::Controls::IListViewBase> listViewBase, abi_arg_in<Windows::UI::Xaml::Controls::ListViewItemToKeyHandler> itemToKeyHandler, abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetRelativeScrollPosition(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBase *>(&listViewBase), *reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler *>(&itemToKeyHandler)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRelativeScrollPositionAsync(abi_arg_in<Windows::UI::Xaml::Controls::IListViewBase> listViewBase, abi_arg_in<hstring> relativeScrollPosition, abi_arg_in<Windows::UI::Xaml::Controls::ListViewKeyToItemHandler> keyToItemHandler, abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SetRelativeScrollPositionAsync(*reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewBase *>(&listViewBase), *reinterpret_cast<const hstring *>(&relativeScrollPosition), *reinterpret_cast<const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler *>(&keyToItemHandler)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement>
{
    HRESULT __stdcall get_PosterSource(abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PosterSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PosterSource(abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            this->shim().PosterSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Source(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            this->shim().Source(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMuted(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsMuted());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsMuted(bool value) noexcept override
    {
        try
        {
            this->shim().IsMuted(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsAudioOnly(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsAudioOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlay(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoPlay());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoPlay(bool value) noexcept override
    {
        try
        {
            this->shim().AutoPlay(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Volume(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Volume());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Volume(double value) noexcept override
    {
        try
        {
            this->shim().Volume(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Balance(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Balance());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Balance(double value) noexcept override
    {
        try
        {
            this->shim().Balance(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoHeight(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalVideoHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoWidth(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalVideoWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalDuration(abi_arg_out<Windows::UI::Xaml::Duration> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalDuration());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Position(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Position());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Position(abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            this->shim().Position(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgress(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DownloadProgress());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BufferingProgress(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BufferingProgress());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DownloadProgressOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentState(Windows::UI::Xaml::Media::MediaElementState * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CurrentState());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Markers(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::TimelineMarker>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Markers());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanSeek(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanSeek());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanPause(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanPause());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamCount(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioStreamCount());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamIndex(abi_arg_out<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioStreamIndex());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioStreamIndex(abi_arg_in<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            this->shim().AudioStreamIndex(*reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaybackRate(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaybackRate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaybackRate(double value) noexcept override
    {
        try
        {
            this->shim().PlaybackRate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLooping(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsLooping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsLooping(bool value) noexcept override
    {
        try
        {
            this->shim().IsLooping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSource(abi_arg_out<Windows::Media::PlayTo::IPlayToSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultPlaybackRate(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultPlaybackRate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultPlaybackRate(double value) noexcept override
    {
        try
        {
            this->shim().DefaultPlaybackRate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioWidth(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AspectRatioWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioHeight(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AspectRatioHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RealTimePlayback(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RealTimePlayback());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RealTimePlayback(bool value) noexcept override
    {
        try
        {
            this->shim().RealTimePlayback(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioCategory(Windows::UI::Xaml::Media::AudioCategory * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioCategory());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) noexcept override
    {
        try
        {
            this->shim().AudioCategory(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioDeviceType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) noexcept override
    {
        try
        {
            this->shim().AudioDeviceType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ProtectionManager(abi_arg_out<Windows::Media::Protection::IMediaProtectionManager> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ProtectionManager());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ProtectionManager(abi_arg_in<Windows::Media::Protection::IMediaProtectionManager> value) noexcept override
    {
        try
        {
            this->shim().ProtectionManager(*reinterpret_cast<const Windows::Media::Protection::MediaProtectionManager *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stereo3DVideoPackingMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) noexcept override
    {
        try
        {
            this->shim().Stereo3DVideoPackingMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stereo3DVideoRenderMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) noexcept override
    {
        try
        {
            this->shim().Stereo3DVideoRenderMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStereo3DVideo(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStereo3DVideo());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaOpened(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().MediaOpened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaOpened(event_token token) noexcept override
    {
        try
        {
            this->shim().MediaOpened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaEnded(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().MediaEnded(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaEnded(event_token token) noexcept override
    {
        try
        {
            this->shim().MediaEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MediaFailed(abi_arg_in<Windows::UI::Xaml::ExceptionRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().MediaFailed(*reinterpret_cast<const Windows::UI::Xaml::ExceptionRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MediaFailed(event_token token) noexcept override
    {
        try
        {
            this->shim().MediaFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DownloadProgressChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DownloadProgressChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DownloadProgressChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().DownloadProgressChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_BufferingProgressChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().BufferingProgressChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_BufferingProgressChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().BufferingProgressChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CurrentStateChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CurrentStateChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CurrentStateChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().CurrentStateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_MarkerReached(abi_arg_in<Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().MarkerReached(*reinterpret_cast<const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_MarkerReached(event_token token) noexcept override
    {
        try
        {
            this->shim().MarkerReached(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_RateChanged(abi_arg_in<Windows::UI::Xaml::Media::RateChangedRoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().RateChanged(*reinterpret_cast<const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_RateChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().RateChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_VolumeChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().VolumeChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_VolumeChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().VolumeChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SeekCompleted(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SeekCompleted(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SeekCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().SeekCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Play() noexcept override
    {
        try
        {
            this->shim().Play();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Pause() noexcept override
    {
        try
        {
            this->shim().Pause();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CanPlayType(abi_arg_in<hstring> type, Windows::UI::Xaml::Media::MediaCanPlayResponse * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CanPlayType(*reinterpret_cast<const hstring *>(&type)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSource(abi_arg_in<Windows::Storage::Streams::IRandomAccessStream> stream, abi_arg_in<hstring> mimeType) noexcept override
    {
        try
        {
            this->shim().SetSource(*reinterpret_cast<const Windows::Storage::Streams::IRandomAccessStream *>(&stream), *reinterpret_cast<const hstring *>(&mimeType));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAudioStreamLanguage(abi_arg_in<Windows::Foundation::IReference<int32_t>> index, abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetAudioStreamLanguage(*reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&index)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddAudioEffect(abi_arg_in<hstring> effectID, bool effectOptional, abi_arg_in<Windows::Foundation::Collections::IPropertySet> effectConfiguration) noexcept override
    {
        try
        {
            this->shim().AddAudioEffect(*reinterpret_cast<const hstring *>(&effectID), effectOptional, *reinterpret_cast<const Windows::Foundation::Collections::IPropertySet *>(&effectConfiguration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddVideoEffect(abi_arg_in<hstring> effectID, bool effectOptional, abi_arg_in<Windows::Foundation::Collections::IPropertySet> effectConfiguration) noexcept override
    {
        try
        {
            this->shim().AddVideoEffect(*reinterpret_cast<const hstring *>(&effectID), effectOptional, *reinterpret_cast<const Windows::Foundation::Collections::IPropertySet *>(&effectConfiguration));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveAllEffects() noexcept override
    {
        try
        {
            this->shim().RemoveAllEffects();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualStereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActualStereo3DVideoPackingMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement2>
{
    HRESULT __stdcall get_AreTransportControlsEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreTransportControlsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().AreTransportControlsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetMediaStreamSource(abi_arg_in<Windows::Media::Core::IMediaSource> source) noexcept override
    {
        try
        {
            this->shim().SetMediaStreamSource(*reinterpret_cast<const Windows::Media::Core::IMediaSource *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToPreferredSourceUri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToPreferredSourceUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlayToPreferredSourceUri(abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            this->shim().PlayToPreferredSourceUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElement3> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElement3>
{
    HRESULT __stdcall get_TransportControls(abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TransportControls());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TransportControls(abi_arg_in<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            this->shim().TransportControls(*reinterpret_cast<const Windows::UI::Xaml::Controls::MediaTransportControls *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PartialMediaFailureDetected(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PartialMediaFailureDetected(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PartialMediaFailureDetected(event_token token) noexcept override
    {
        try
        {
            this->shim().PartialMediaFailureDetected(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlaybackSource(abi_arg_in<Windows::Media::Playback::IMediaPlaybackSource> source) noexcept override
    {
        try
        {
            this->shim().SetPlaybackSource(*reinterpret_cast<const Windows::Media::Playback::IMediaPlaybackSource *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAsCastingSource(abi_arg_out<Windows::Media::Casting::ICastingSource> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetAsCastingSource());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElementStatics>
{
    HRESULT __stdcall get_PosterSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PosterSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsMutedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsMutedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsAudioOnlyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsAudioOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlayProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoPlayProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VolumeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VolumeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BalanceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BalanceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalVideoHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalVideoWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalVideoWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NaturalDurationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NaturalDurationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PositionProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PositionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DownloadProgressProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BufferingProgressProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BufferingProgressProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DownloadProgressOffsetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DownloadProgressOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CurrentStateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CurrentStateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanSeekProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanSeekProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanPauseProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanPauseProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamCountProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioStreamCountProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioStreamIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioStreamIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaybackRateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaybackRateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLoopingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsLoopingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultPlaybackRateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultPlaybackRateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AspectRatioWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AspectRatioHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AspectRatioHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RealTimePlaybackProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RealTimePlaybackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioCategoryProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioCategoryProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AudioDeviceTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AudioDeviceTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ProtectionManagerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ProtectionManagerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoPackingModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stereo3DVideoPackingModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stereo3DVideoRenderModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stereo3DVideoRenderModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStereo3DVideoProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStereo3DVideoProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualStereo3DVideoPackingModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActualStereo3DVideoPackingModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaElementStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaElementStatics2>
{
    HRESULT __stdcall get_AreTransportControlsEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreTransportControlsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlayToPreferredSourceUriProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlayToPreferredSourceUriProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElement> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElement>
{
    HRESULT __stdcall get_Source(abi_arg_out<Windows::Media::Playback::IMediaPlaybackSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(abi_arg_in<Windows::Media::Playback::IMediaPlaybackSource> value) noexcept override
    {
        try
        {
            this->shim().Source(*reinterpret_cast<const Windows::Media::Playback::IMediaPlaybackSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TransportControls(abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TransportControls());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TransportControls(abi_arg_in<Windows::UI::Xaml::Controls::IMediaTransportControls> value) noexcept override
    {
        try
        {
            this->shim().TransportControls(*reinterpret_cast<const Windows::UI::Xaml::Controls::MediaTransportControls *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AreTransportControlsEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreTransportControlsEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreTransportControlsEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().AreTransportControlsEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PosterSource(abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PosterSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PosterSource(abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            this->shim().PosterSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlay(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoPlay());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AutoPlay(bool value) noexcept override
    {
        try
        {
            this->shim().AutoPlay(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MediaPlayer(abi_arg_out<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MediaPlayer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetMediaPlayer(abi_arg_in<Windows::Media::Playback::IMediaPlayer> mediaPlayer) noexcept override
    {
        try
        {
            this->shim().SetMediaPlayer(*reinterpret_cast<const Windows::Media::Playback::MediaPlayer *>(&mediaPlayer));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElementFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElementFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMediaPlayerElement> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerElementStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerElementStatics>
{
    HRESULT __stdcall get_SourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AreTransportControlsEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreTransportControlsEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PosterSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PosterSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AutoPlayProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AutoPlayProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MediaPlayerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MediaPlayerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenter>
{
    HRESULT __stdcall get_MediaPlayer(abi_arg_out<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MediaPlayer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MediaPlayer(abi_arg_in<Windows::Media::Playback::IMediaPlayer> value) noexcept override
    {
        try
        {
            this->shim().MediaPlayer(*reinterpret_cast<const Windows::Media::Playback::MediaPlayer *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindow(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindow());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindow(bool value) noexcept override
    {
        try
        {
            this->shim().IsFullWindow(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMediaPlayerPresenter> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaPlayerPresenterStatics>
{
    HRESULT __stdcall get_MediaPlayerProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MediaPlayerProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControls> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControls>
{
    HRESULT __stdcall get_IsFullWindowButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindowButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsFullWindowButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFullWindowEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsFullWindowEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastForwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastForwardButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsFastForwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastForwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastForwardEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsFastForwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastRewindButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastRewindButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsFastRewindButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastRewindEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsFastRewindEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsFastRewindEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStopButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsStopButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsStopButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStopEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsStopEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsStopEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVolumeButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVolumeButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsVolumeButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVolumeEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVolumeEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsVolumeEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPlaybackRateButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPlaybackRateButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsPlaybackRateButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPlaybackRateEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPlaybackRateEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsPlaybackRateEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekBarVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSeekBarVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSeekBarVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsSeekBarVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSeekEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSeekEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSeekEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompact(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompact());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsCompact(bool value) noexcept override
    {
        try
        {
            this->shim().IsCompact(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControls2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControls2>
{
    HRESULT __stdcall get_IsSkipForwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipForwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipForwardButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsSkipForwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipForwardEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipForwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipForwardEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSkipForwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipBackwardButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipBackwardButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsSkipBackwardButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipBackwardEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSkipBackwardEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSkipBackwardEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsNextTrackButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsNextTrackButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsNextTrackButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsNextTrackButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPreviousTrackButtonVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPreviousTrackButtonVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPreviousTrackButtonVisible(bool value) noexcept override
    {
        try
        {
            this->shim().IsPreviousTrackButtonVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FastPlayFallbackBehaviour());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value) noexcept override
    {
        try
        {
            this->shim().FastPlayFallbackBehaviour(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ThumbnailRequested(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ThumbnailRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ThumbnailRequested(event_token token) noexcept override
    {
        try
        {
            this->shim().ThumbnailRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMediaTransportControls> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelper> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelper>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsHelperStatics>
{
    HRESULT __stdcall get_DropoutOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DropoutOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetDropoutOrder(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetDropoutOrder(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetDropoutOrder(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::Foundation::IReference<int32_t>> value) noexcept override
    {
        try
        {
            this->shim().SetDropoutOrder(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::Foundation::IReference<int32_t> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics>
{
    HRESULT __stdcall get_IsFullWindowButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFullWindowEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFullWindowEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastForwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastForwardEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastForwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastRewindButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsFastRewindEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsFastRewindEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStopButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsStopEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsStopEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVolumeButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVolumeEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVolumeEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPlaybackRateButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPlaybackRateEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPlaybackRateEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekBarVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSeekBarVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSeekEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSeekEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsCompactProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCompactProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IMediaTransportControlsStatics2>
{
    HRESULT __stdcall get_IsSkipForwardButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipForwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipForwardEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipForwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipBackwardButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSkipBackwardEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSkipBackwardEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsNextTrackButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsNextTrackButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPreviousTrackButtonVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPreviousTrackButtonVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FastPlayFallbackBehaviourProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FastPlayFallbackBehaviourProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyout>
{
    HRESULT __stdcall get_Items(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MenuFlyoutPresenterStyle(abi_arg_out<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MenuFlyoutPresenterStyle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MenuFlyoutPresenterStyle(abi_arg_in<Windows::UI::Xaml::IStyle> value) noexcept override
    {
        try
        {
            this->shim().MenuFlyoutPresenterStyle(*reinterpret_cast<const Windows::UI::Xaml::Style *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyout2> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyout2>
{
    HRESULT __stdcall abi_ShowAt(abi_arg_in<Windows::UI::Xaml::IUIElement> targetElement, abi_arg_in<Windows::Foundation::Point> point) noexcept override
    {
        try
        {
            this->shim().ShowAt(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&targetElement), *reinterpret_cast<const Windows::Foundation::Point *>(&point));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyout> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItem>
{
    HRESULT __stdcall get_Text(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Command(abi_arg_out<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Command());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Command(abi_arg_in<Windows::UI::Xaml::Input::ICommand> value) noexcept override
    {
        try
        {
            this->shim().Command(*reinterpret_cast<const Windows::UI::Xaml::Input::ICommand *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandParameter(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandParameter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CommandParameter(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().CommandParameter(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Click(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Click(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Click(event_token token) noexcept override
    {
        try
        {
            this->shim().Click(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBase>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemBaseFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutItemStatics>
{
    HRESULT __stdcall get_TextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CommandParameterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CommandParameterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenter2>
{
    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IMenuFlyoutPresenterTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutPresenterFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutPresenter> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparator>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSeparatorFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IMenuFlyoutSeparator> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutStatics>
{
    HRESULT __stdcall get_MenuFlyoutPresenterStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MenuFlyoutPresenterStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItem> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItem>
{
    HRESULT __stdcall get_Items(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Items());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IMenuFlyoutSubItemStatics>
{
    HRESULT __stdcall get_TextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INavigate> : produce_base<D, Windows::UI::Xaml::Controls::INavigate>
{
    HRESULT __stdcall abi_Navigate(abi_arg_in<Windows::UI::Xaml::Interop::TypeName> sourcePageType, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Navigate(*reinterpret_cast<const Windows::UI::Xaml::Interop::TypeName *>(&sourcePageType)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INotifyEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::INotifyEventArgs>
{
    HRESULT __stdcall get_Value(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Value());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::INotifyEventArgs2> : produce_base<D, Windows::UI::Xaml::Controls::INotifyEventArgs2>
{
    HRESULT __stdcall get_CallingUri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CallingUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPage> : produce_base<D, Windows::UI::Xaml::Controls::IPage>
{
    HRESULT __stdcall get_Frame(abi_arg_out<Windows::UI::Xaml::Controls::IFrame> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Frame());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NavigationCacheMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) noexcept override
    {
        try
        {
            this->shim().NavigationCacheMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopAppBar(abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopAppBar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopAppBar(abi_arg_in<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            this->shim().TopAppBar(*reinterpret_cast<const Windows::UI::Xaml::Controls::AppBar *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BottomAppBar(abi_arg_out<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BottomAppBar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BottomAppBar(abi_arg_in<Windows::UI::Xaml::Controls::IAppBar> value) noexcept override
    {
        try
        {
            this->shim().BottomAppBar(*reinterpret_cast<const Windows::UI::Xaml::Controls::AppBar *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPageFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IPage> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IPageOverrides>
{
    HRESULT __stdcall abi_OnNavigatedFrom(abi_arg_in<Windows::UI::Xaml::Navigation::INavigationEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnNavigatedFrom(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnNavigatedTo(abi_arg_in<Windows::UI::Xaml::Navigation::INavigationEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnNavigatedTo(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigationEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnNavigatingFrom(abi_arg_in<Windows::UI::Xaml::Navigation::INavigatingCancelEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnNavigatingFrom(*reinterpret_cast<const Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPageStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPageStatics>
{
    HRESULT __stdcall get_FrameProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FrameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopAppBarProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopAppBarProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BottomAppBarProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BottomAppBarProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanel> : produce_base<D, Windows::UI::Xaml::Controls::IPanel>
{
    HRESULT __stdcall get_Children(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::UIElement>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Children());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Background(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Background());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Background(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Background(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemsHost(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsItemsHost());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenTransitions(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChildrenTransitions());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChildrenTransitions(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Animation::Transition>> value) noexcept override
    {
        try
        {
            this->shim().ChildrenTransitions(*reinterpret_cast<const Windows::UI::Xaml::Media::Animation::TransitionCollection *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IPanel> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPanelStatics>
{
    HRESULT __stdcall get_BackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsItemsHostProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsItemsHostProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChildrenTransitionsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChildrenTransitionsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox>
{
    HRESULT __stdcall get_Password(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Password());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Password(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Password(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PasswordChar(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PasswordChar());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PasswordChar(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PasswordChar(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPasswordRevealButtonEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPasswordRevealButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPasswordRevealButtonEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsPasswordRevealButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLength(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLength(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PasswordChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PasswordChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PasswordChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().PasswordChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox2> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox2>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBox3> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBox3>
{
    HRESULT __stdcall get_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PasswordRevealMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode value) noexcept override
    {
        try
        {
            this->shim().PasswordRevealMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics>
{
    HRESULT __stdcall get_PasswordProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PasswordProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PasswordCharProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PasswordCharProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPasswordRevealButtonEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPasswordRevealButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IPasswordBoxStatics3>
{
    HRESULT __stdcall get_PasswordRevealModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PasswordRevealModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIcon> : produce_base<D, Windows::UI::Xaml::Controls::IPathIcon>
{
    HRESULT __stdcall get_Data(abi_arg_out<Windows::UI::Xaml::Media::IGeometry> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Data());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Data(abi_arg_in<Windows::UI::Xaml::Media::IGeometry> value) noexcept override
    {
        try
        {
            this->shim().Data(*reinterpret_cast<const Windows::UI::Xaml::Media::Geometry *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPathIconFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IPathIcon> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPathIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPathIconStatics>
{
    HRESULT __stdcall get_DataProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DataProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IPickerConfirmedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyout>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfirmationButtonsVisible(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfirmationButtonsVisible());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ConfirmationButtonsVisible(bool value) noexcept override
    {
        try
        {
            this->shim().ConfirmationButtonsVisible(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Confirmed(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Confirmed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Confirmed(event_token token) noexcept override
    {
        try
        {
            this->shim().Confirmed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, abi_arg_out<Windows::Foundation::IAsyncOperation<bool>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPickerFlyoutStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ConfirmationButtonsVisibleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ConfirmationButtonsVisibleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot> : produce_base<D, Windows::UI::Xaml::Controls::IPivot>
{
    HRESULT __stdcall get_Title(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Title(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TitleTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().TitleTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedIndex(int32_t value) noexcept override
    {
        try
        {
            this->shim().SelectedIndex(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItem(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedItem(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SelectedItem(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLocked(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsLocked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsLocked(bool value) noexcept override
    {
        try
        {
            this->shim().IsLocked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(abi_arg_in<Windows::UI::Xaml::Controls::SelectionChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::SelectionChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemLoading(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PivotItemLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemLoading(event_token token) noexcept override
    {
        try
        {
            this->shim().PivotItemLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemLoaded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PivotItemLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemLoaded(event_token token) noexcept override
    {
        try
        {
            this->shim().PivotItemLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemUnloading(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PivotItemUnloading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemUnloading(event_token token) noexcept override
    {
        try
        {
            this->shim().PivotItemUnloading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PivotItemUnloaded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PivotItemUnloaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PivotItemUnloaded(event_token token) noexcept override
    {
        try
        {
            this->shim().PivotItemUnloaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot2> : produce_base<D, Windows::UI::Xaml::Controls::IPivot2>
{
    HRESULT __stdcall get_LeftHeader(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeader(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().LeftHeader(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().LeftHeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeader(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RightHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RightHeader(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().RightHeader(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RightHeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_RightHeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().RightHeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivot3> : produce_base<D, Windows::UI::Xaml::Controls::IPivot3>
{
    HRESULT __stdcall get_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderFocusVisualPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) noexcept override
    {
        try
        {
            this->shim().HeaderFocusVisualPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderItemsCarouselEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHeaderItemsCarouselEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHeaderItemsCarouselEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsHeaderItemsCarouselEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPivotFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IPivot> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItem> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItem>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemEventArgs>
{
    HRESULT __stdcall get_Item(abi_arg_out<Windows::UI::Xaml::Controls::IPivotItem> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Item(abi_arg_in<Windows::UI::Xaml::Controls::IPivotItem> value) noexcept override
    {
        try
        {
            this->shim().Item(*reinterpret_cast<const Windows::UI::Xaml::Controls::PivotItem *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IPivotItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPivotItemStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics>
{
    HRESULT __stdcall get_TitleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TitleTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedIndexProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedIndexProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedItemProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedItemProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsLockedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsLockedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SlideInAnimationGroupProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SlideInAnimationGroupProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetSlideInAnimationGroup(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetSlideInAnimationGroup(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSlideInAnimationGroup(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value) noexcept override
    {
        try
        {
            this->shim().SetSlideInAnimationGroup(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics2>
{
    HRESULT __stdcall get_LeftHeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RightHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightHeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RightHeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IPivotStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IPivotStatics3>
{
    HRESULT __stdcall get_HeaderFocusVisualPlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderFocusVisualPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHeaderItemsCarouselEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHeaderItemsCarouselEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBar> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBar>
{
    HRESULT __stdcall get_IsIndeterminate(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsIndeterminate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsIndeterminate(bool value) noexcept override
    {
        try
        {
            this->shim().IsIndeterminate(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowError(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowError());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowError(bool value) noexcept override
    {
        try
        {
            this->shim().ShowError(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowPaused(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowPaused());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ShowPaused(bool value) noexcept override
    {
        try
        {
            this->shim().ShowPaused(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IProgressBarTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBarFactory> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBarFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IProgressBar> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressBarStatics> : produce_base<D, Windows::UI::Xaml::Controls::IProgressBarStatics>
{
    HRESULT __stdcall get_IsIndeterminateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsIndeterminateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowErrorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowErrorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ShowPausedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ShowPausedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressRing> : produce_base<D, Windows::UI::Xaml::Controls::IProgressRing>
{
    HRESULT __stdcall get_IsActive(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsActive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsActive(bool value) noexcept override
    {
        try
        {
            this->shim().IsActive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IProgressRingTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IProgressRingStatics> : produce_base<D, Windows::UI::Xaml::Controls::IProgressRingStatics>
{
    HRESULT __stdcall get_IsActiveProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsActiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButton> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButton>
{
    HRESULT __stdcall get_GroupName(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupName());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_GroupName(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().GroupName(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButtonFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButtonFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IRadioButton> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRadioButtonStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRadioButtonStatics>
{
    HRESULT __stdcall get_GroupNameProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GroupNameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanel> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanel>
{
    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IRelativePanel> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRelativePanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRelativePanelStatics>
{
    HRESULT __stdcall get_LeftOfProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftOfProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetLeftOf(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetLeftOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLeftOf(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetLeftOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AboveProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AboveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAbove(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAbove(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAbove(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAbove(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RightOfProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RightOfProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRightOf(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetRightOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRightOf(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetRightOf(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BelowProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BelowProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetBelow(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetBelow(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetBelow(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetBelow(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignHorizontalCenterWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignHorizontalCenterWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignHorizontalCenterWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignHorizontalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignHorizontalCenterWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignHorizontalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignVerticalCenterWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignVerticalCenterWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignVerticalCenterWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignVerticalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignVerticalCenterWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignVerticalCenterWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignLeftWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignLeftWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignLeftWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignLeftWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignLeftWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignLeftWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignTopWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignTopWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignTopWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignTopWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignTopWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignTopWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignRightWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignRightWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignRightWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignRightWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignRightWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignRightWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignBottomWithProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignBottomWithProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignBottomWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignBottomWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignBottomWith(abi_arg_in<Windows::UI::Xaml::IUIElement> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetAlignBottomWith(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignLeftWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignLeftWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignLeftWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignLeftWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignLeftWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignLeftWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignTopWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignTopWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignTopWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignTopWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignTopWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignTopWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignRightWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignRightWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignRightWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignRightWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignRightWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignRightWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignBottomWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignBottomWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignBottomWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignBottomWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignBottomWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignBottomWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignHorizontalCenterWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignHorizontalCenterWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignHorizontalCenterWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignHorizontalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignHorizontalCenterWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignHorizontalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AlignVerticalCenterWithPanelProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AlignVerticalCenterWithPanelProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetAlignVerticalCenterWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetAlignVerticalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetAlignVerticalCenterWithPanel(abi_arg_in<Windows::UI::Xaml::IUIElement> element, bool value) noexcept override
    {
        try
        {
            this->shim().SetAlignVerticalCenterWithPanel(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox>
{
    HRESULT __stdcall get_IsReadOnly(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsReadOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsReadOnly(bool value) noexcept override
    {
        try
        {
            this->shim().IsReadOnly(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturn(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AcceptsReturn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AcceptsReturn(bool value) noexcept override
    {
        try
        {
            this->shim().AcceptsReturn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSpellCheckEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSpellCheckEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextPredictionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextPredictionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Document(abi_arg_out<Windows::UI::Text::ITextDocument> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Document());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox2> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox2>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox3> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox3>
{
    HRESULT __stdcall add_TextCompositionStarted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionStarted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionEnded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionEnded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DesiredCandidateWindowAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept override
    {
        try
        {
            this->shim().DesiredCandidateWindowAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CandidateWindowBoundsChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CandidateWindowBoundsChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().CandidateWindowBoundsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanging(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().TextChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBox4> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBox4>
{
    HRESULT __stdcall abi_GetLinguisticAlternativesAsync(abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetLinguisticAlternativesAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClipboardCopyFormat());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat value) noexcept override
    {
        try
        {
            this->shim().ClipboardCopyFormat(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IRichEditBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics>
{
    HRESULT __stdcall get_IsReadOnlyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsReadOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturnProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AcceptsReturnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSpellCheckEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextPredictionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics3>
{
    HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DesiredCandidateWindowAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxStatics4>
{
    HRESULT __stdcall get_ClipboardCopyFormatProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClipboardCopyFormatProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IRichEditBoxTextChangingEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextTrimming());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept override
    {
        try
        {
            this->shim().TextTrimming(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Blocks(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Block>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Blocks());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowContentTarget(abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowContentTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowContentTarget(abi_arg_in<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            this->shim().OverflowContentTarget(*reinterpret_cast<const Windows::UI::Xaml::Controls::RichTextBlockOverflow *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSelectionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextSelectionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContent(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HasOverflowContent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionEnd(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> start, abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> end) noexcept override
    {
        try
        {
            this->shim().Select(*reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&start), *reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&end));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPositionFromPoint(abi_arg_in<Windows::Foundation::Point> point, abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetPositionFromPoint(*reinterpret_cast<const Windows::Foundation::Point *>(&point)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextIndent(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextIndent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextIndent(double value) noexcept override
    {
        try
        {
            this->shim().TextIndent(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock2>
{
    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlock3> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlock3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow>
{
    HRESULT __stdcall get_OverflowContentTarget(abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowContentTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OverflowContentTarget(abi_arg_in<Windows::UI::Xaml::Controls::IRichTextBlockOverflow> value) noexcept override
    {
        try
        {
            this->shim().OverflowContentTarget(*reinterpret_cast<const Windows::UI::Xaml::Controls::RichTextBlockOverflow *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentSource(abi_arg_out<Windows::UI::Xaml::Controls::IRichTextBlock> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContent(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HasOverflowContent());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPositionFromPoint(abi_arg_in<Windows::Foundation::Point> point, abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetPositionFromPoint(*reinterpret_cast<const Windows::Foundation::Point *>(&point)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflow2>
{
    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics>
{
    HRESULT __stdcall get_OverflowContentTargetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowContentTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HasOverflowContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockOverflowStatics2>
{
    HRESULT __stdcall get_MaxLinesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics>
{
    HRESULT __stdcall get_FontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimmingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextTrimmingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OverflowContentTargetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OverflowContentTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSelectionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HasOverflowContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HasOverflowContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextIndentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextIndentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics2>
{
    HRESULT __stdcall get_MaxLinesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IRichTextBlockStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRowDefinition> : produce_base<D, Windows::UI::Xaml::Controls::IRowDefinition>
{
    HRESULT __stdcall get_Height(abi_arg_out<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Height());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Height(abi_arg_in<Windows::UI::Xaml::GridLength> value) noexcept override
    {
        try
        {
            this->shim().Height(*reinterpret_cast<const Windows::UI::Xaml::GridLength *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxHeight(double value) noexcept override
    {
        try
        {
            this->shim().MaxHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinHeight(double value) noexcept override
    {
        try
        {
            this->shim().MinHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ActualHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ActualHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IRowDefinitionStatics> : produce_base<D, Windows::UI::Xaml::Controls::IRowDefinitionStatics>
{
    HRESULT __stdcall get_HeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollContentPresenter> : produce_base<D, Windows::UI::Xaml::Controls::IScrollContentPresenter>
{
    HRESULT __stdcall get_CanVerticallyScroll(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanVerticallyScroll());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanVerticallyScroll(bool value) noexcept override
    {
        try
        {
            this->shim().CanVerticallyScroll(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanHorizontallyScroll(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanHorizontallyScroll());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanHorizontallyScroll(bool value) noexcept override
    {
        try
        {
            this->shim().CanHorizontallyScroll(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollOwner(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollOwner());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ScrollOwner(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().ScrollOwner(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineUp() noexcept override
    {
        try
        {
            this->shim().LineUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineDown() noexcept override
    {
        try
        {
            this->shim().LineDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineLeft() noexcept override
    {
        try
        {
            this->shim().LineLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_LineRight() noexcept override
    {
        try
        {
            this->shim().LineRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageUp() noexcept override
    {
        try
        {
            this->shim().PageUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageDown() noexcept override
    {
        try
        {
            this->shim().PageDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageLeft() noexcept override
    {
        try
        {
            this->shim().PageLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_PageRight() noexcept override
    {
        try
        {
            this->shim().PageRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelUp() noexcept override
    {
        try
        {
            this->shim().MouseWheelUp();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelDown() noexcept override
    {
        try
        {
            this->shim().MouseWheelDown();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelLeft() noexcept override
    {
        try
        {
            this->shim().MouseWheelLeft();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MouseWheelRight() noexcept override
    {
        try
        {
            this->shim().MouseWheelRight();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalOffset(double offset) noexcept override
    {
        try
        {
            this->shim().SetHorizontalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalOffset(double offset) noexcept override
    {
        try
        {
            this->shim().SetVerticalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MakeVisible(abi_arg_in<Windows::UI::Xaml::IUIElement> visual, abi_arg_in<Windows::Foundation::Rect> rectangle, abi_arg_out<Windows::Foundation::Rect> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().MakeVisible(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&visual), *reinterpret_cast<const Windows::Foundation::Rect *>(&rectangle)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer>
{
    HRESULT __stdcall get_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept override
    {
        try
        {
            this->shim().HorizontalScrollBarVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) noexcept override
    {
        try
        {
            this->shim().VerticalScrollBarVisibility(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalRailEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHorizontalRailEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHorizontalRailEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsHorizontalRailEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalRailEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVerticalRailEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVerticalRailEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsVerticalRailEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalScrollChainingEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHorizontalScrollChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsHorizontalScrollChainingEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsHorizontalScrollChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalScrollChainingEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVerticalScrollChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsVerticalScrollChainingEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsVerticalScrollChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomChainingEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomChainingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomChainingEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomChainingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsScrollInertiaEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsScrollInertiaEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsScrollInertiaEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsScrollInertiaEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomInertiaEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomInertiaEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomInertiaEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomInertiaEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept override
    {
        try
        {
            this->shim().HorizontalScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalScrollMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) noexcept override
    {
        try
        {
            this->shim().VerticalScrollMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) noexcept override
    {
        try
        {
            this->shim().ZoomMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalSnapPointsAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalSnapPointsAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalSnapPointsAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalSnapPointsAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            this->shim().HorizontalSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            this->shim().VerticalSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomSnapPointsType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) noexcept override
    {
        try
        {
            this->shim().ZoomSnapPointsType(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollableWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedHorizontalScrollBarVisibility(Windows::UI::Xaml::Visibility * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ComputedHorizontalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollableHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedVerticalScrollBarVisibility(Windows::UI::Xaml::Visibility * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ComputedVerticalScrollBarVisibility());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinZoomFactor(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinZoomFactor(float value) noexcept override
    {
        try
        {
            this->shim().MinZoomFactor(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxZoomFactor(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxZoomFactor(float value) noexcept override
    {
        try
        {
            this->shim().MaxZoomFactor(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactor(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPoints(abi_arg_out<Windows::Foundation::Collections::IVector<float>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomSnapPoints());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChanged(abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ViewChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().ViewChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToHorizontalOffset(double offset) noexcept override
    {
        try
        {
            this->shim().ScrollToHorizontalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ScrollToVerticalOffset(double offset) noexcept override
    {
        try
        {
            this->shim().ScrollToVerticalOffset(offset);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ZoomToFactor(float factor) noexcept override
    {
        try
        {
            this->shim().ZoomToFactor(factor);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvalidateScrollInfo() noexcept override
    {
        try
        {
            this->shim().InvalidateScrollInfo();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDeferredScrollingEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDeferredScrollingEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDeferredScrollingEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsDeferredScrollingEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BringIntoViewOnFocusChange(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BringIntoViewOnFocusChange());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BringIntoViewOnFocusChange(bool value) noexcept override
    {
        try
        {
            this->shim().BringIntoViewOnFocusChange(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer2> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer2>
{
    HRESULT __stdcall get_TopLeftHeader(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopLeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopLeftHeader(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().TopLeftHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeader(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LeftHeader(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().LeftHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopHeader(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopHeader());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TopHeader(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().TopHeader(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChanging(abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ViewChanging(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().ViewChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ChangeView(abi_arg_in<Windows::Foundation::IReference<double>> horizontalOffset, abi_arg_in<Windows::Foundation::IReference<double>> verticalOffset, abi_arg_in<Windows::Foundation::IReference<float>> zoomFactor, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ChangeView(*reinterpret_cast<const Windows::Foundation::IReference<double> *>(&horizontalOffset), *reinterpret_cast<const Windows::Foundation::IReference<double> *>(&verticalOffset), *reinterpret_cast<const Windows::Foundation::IReference<float> *>(&zoomFactor)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ChangeViewWithOptionalAnimation(abi_arg_in<Windows::Foundation::IReference<double>> horizontalOffset, abi_arg_in<Windows::Foundation::IReference<double>> verticalOffset, abi_arg_in<Windows::Foundation::IReference<float>> zoomFactor, bool disableAnimation, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ChangeView(*reinterpret_cast<const Windows::Foundation::IReference<double> *>(&horizontalOffset), *reinterpret_cast<const Windows::Foundation::IReference<double> *>(&verticalOffset), *reinterpret_cast<const Windows::Foundation::IReference<float> *>(&zoomFactor), disableAnimation));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewer3> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewer3>
{
    HRESULT __stdcall add_DirectManipulationStarted(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DirectManipulationStarted(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DirectManipulationStarted(event_token token) noexcept override
    {
        try
        {
            this->shim().DirectManipulationStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DirectManipulationCompleted(abi_arg_in<Windows::Foundation::EventHandler<Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DirectManipulationCompleted(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DirectManipulationCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().DirectManipulationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerStatics> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerStatics>
{
    HRESULT __stdcall get_HorizontalSnapPointsAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalSnapPointsAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalSnapPointsAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalSnapPointsTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalSnapPointsTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsTypeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomSnapPointsTypeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalOffsetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollableWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedHorizontalScrollBarVisibilityProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ComputedHorizontalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffsetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ViewportHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ViewportHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ScrollableHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ScrollableHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ComputedVerticalScrollBarVisibilityProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ComputedVerticalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ExtentHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExtentHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinZoomFactorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxZoomFactorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomFactorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomSnapPointsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomSnapPointsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollBarVisibilityProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetHorizontalScrollBarVisibility(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility * horizontalScrollBarVisibility) noexcept override
    {
        try
        {
            *horizontalScrollBarVisibility = detach(this->shim().GetHorizontalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalScrollBarVisibility(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) noexcept override
    {
        try
        {
            this->shim().SetHorizontalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), horizontalScrollBarVisibility);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollBarVisibilityProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalScrollBarVisibilityProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVerticalScrollBarVisibility(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility * verticalScrollBarVisibility) noexcept override
    {
        try
        {
            *verticalScrollBarVisibility = detach(this->shim().GetVerticalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalScrollBarVisibility(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) noexcept override
    {
        try
        {
            this->shim().SetVerticalScrollBarVisibility(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), verticalScrollBarVisibility);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalRailEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHorizontalRailEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsHorizontalRailEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isHorizontalRailEnabled) noexcept override
    {
        try
        {
            *isHorizontalRailEnabled = detach(this->shim().GetIsHorizontalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsHorizontalRailEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isHorizontalRailEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsHorizontalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isHorizontalRailEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalRailEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVerticalRailEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVerticalRailEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isVerticalRailEnabled) noexcept override
    {
        try
        {
            *isVerticalRailEnabled = detach(this->shim().GetIsVerticalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsVerticalRailEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isVerticalRailEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsVerticalRailEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isVerticalRailEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsHorizontalScrollChainingEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsHorizontalScrollChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsHorizontalScrollChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isHorizontalScrollChainingEnabled) noexcept override
    {
        try
        {
            *isHorizontalScrollChainingEnabled = detach(this->shim().GetIsHorizontalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsHorizontalScrollChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isHorizontalScrollChainingEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsHorizontalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isHorizontalScrollChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVerticalScrollChainingEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVerticalScrollChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVerticalScrollChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isVerticalScrollChainingEnabled) noexcept override
    {
        try
        {
            *isVerticalScrollChainingEnabled = detach(this->shim().GetIsVerticalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsVerticalScrollChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isVerticalScrollChainingEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsVerticalScrollChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isVerticalScrollChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomChainingEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomChainingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsZoomChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isZoomChainingEnabled) noexcept override
    {
        try
        {
            *isZoomChainingEnabled = detach(this->shim().GetIsZoomChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsZoomChainingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isZoomChainingEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsZoomChainingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isZoomChainingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsScrollInertiaEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsScrollInertiaEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsScrollInertiaEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isScrollInertiaEnabled) noexcept override
    {
        try
        {
            *isScrollInertiaEnabled = detach(this->shim().GetIsScrollInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsScrollInertiaEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isScrollInertiaEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsScrollInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isScrollInertiaEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomInertiaEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomInertiaEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsZoomInertiaEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isZoomInertiaEnabled) noexcept override
    {
        try
        {
            *isZoomInertiaEnabled = detach(this->shim().GetIsZoomInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsZoomInertiaEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isZoomInertiaEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsZoomInertiaEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isZoomInertiaEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalScrollModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalScrollModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetHorizontalScrollMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode * horizontalScrollMode) noexcept override
    {
        try
        {
            *horizontalScrollMode = detach(this->shim().GetHorizontalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetHorizontalScrollMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) noexcept override
    {
        try
        {
            this->shim().SetHorizontalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), horizontalScrollMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalScrollModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalScrollModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVerticalScrollMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode * verticalScrollMode) noexcept override
    {
        try
        {
            *verticalScrollMode = detach(this->shim().GetVerticalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVerticalScrollMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) noexcept override
    {
        try
        {
            this->shim().SetVerticalScrollMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), verticalScrollMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetZoomMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ZoomMode * zoomMode) noexcept override
    {
        try
        {
            *zoomMode = detach(this->shim().GetZoomMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetZoomMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) noexcept override
    {
        try
        {
            this->shim().SetZoomMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), zoomMode);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDeferredScrollingEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDeferredScrollingEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsDeferredScrollingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * isDeferredScrollingEnabled) noexcept override
    {
        try
        {
            *isDeferredScrollingEnabled = detach(this->shim().GetIsDeferredScrollingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetIsDeferredScrollingEnabled(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool isDeferredScrollingEnabled) noexcept override
    {
        try
        {
            this->shim().SetIsDeferredScrollingEnabled(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), isDeferredScrollingEnabled);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BringIntoViewOnFocusChangeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BringIntoViewOnFocusChangeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetBringIntoViewOnFocusChange(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool * bringIntoViewOnFocusChange) noexcept override
    {
        try
        {
            *bringIntoViewOnFocusChange = detach(this->shim().GetBringIntoViewOnFocusChange(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetBringIntoViewOnFocusChange(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, bool bringIntoViewOnFocusChange) noexcept override
    {
        try
        {
            this->shim().SetBringIntoViewOnFocusChange(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), bringIntoViewOnFocusChange);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerStatics2>
{
    HRESULT __stdcall get_TopLeftHeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopLeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LeftHeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LeftHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TopHeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TopHeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerView> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerView>
{
    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomFactor(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomFactor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangedEventArgs>
{
    HRESULT __stdcall get_IsIntermediate(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsIntermediate());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IScrollViewerViewChangingEventArgs>
{
    HRESULT __stdcall get_NextView(abi_arg_out<Windows::UI::Xaml::Controls::IScrollViewerView> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NextView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FinalView(abi_arg_out<Windows::UI::Xaml::Controls::IScrollViewerView> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FinalView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsInertial(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsInertial());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBox> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBox>
{
    HRESULT __stdcall get_SearchHistoryEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SearchHistoryEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SearchHistoryEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().SearchHistoryEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SearchHistoryContext(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SearchHistoryContext());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SearchHistoryContext(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SearchHistoryContext(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_QueryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_QueryText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().QueryText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusOnKeyboardInput(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusOnKeyboardInput());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FocusOnKeyboardInput(bool value) noexcept override
    {
        try
        {
            this->shim().FocusOnKeyboardInput(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChooseSuggestionOnEnter(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChooseSuggestionOnEnter());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ChooseSuggestionOnEnter(bool value) noexcept override
    {
        try
        {
            this->shim().ChooseSuggestionOnEnter(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QueryChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().QueryChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QueryChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().QueryChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SuggestionsRequested(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SuggestionsRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SuggestionsRequested(event_token token) noexcept override
    {
        try
        {
            this->shim().SuggestionsRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_QuerySubmitted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().QuerySubmitted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_QuerySubmitted(event_token token) noexcept override
    {
        try
        {
            this->shim().QuerySubmitted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ResultSuggestionChosen(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ResultSuggestionChosen(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ResultSuggestionChosen(event_token token) noexcept override
    {
        try
        {
            this->shim().ResultSuggestionChosen(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PrepareForFocusOnKeyboardInput(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PrepareForFocusOnKeyboardInput(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PrepareForFocusOnKeyboardInput(event_token token) noexcept override
    {
        try
        {
            this->shim().PrepareForFocusOnKeyboardInput(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetLocalContentSuggestionSettings(abi_arg_in<Windows::ApplicationModel::Search::ILocalContentSuggestionSettings> settings) noexcept override
    {
        try
        {
            this->shim().SetLocalContentSuggestionSettings(*reinterpret_cast<const Windows::ApplicationModel::Search::LocalContentSuggestionSettings *>(&settings));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISearchBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxQueryChangedEventArgs>
{
    HRESULT __stdcall get_QueryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxQuerySubmittedEventArgs>
{
    HRESULT __stdcall get_QueryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().KeyModifiers());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxResultSuggestionChosenEventArgs>
{
    HRESULT __stdcall get_Tag(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Tag());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_KeyModifiers(Windows::System::VirtualKeyModifiers * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().KeyModifiers());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxStatics>
{
    HRESULT __stdcall get_SearchHistoryEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SearchHistoryEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SearchHistoryContextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SearchHistoryContextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_QueryTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FocusOnKeyboardInputProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FocusOnKeyboardInputProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ChooseSuggestionOnEnterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ChooseSuggestionOnEnterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISearchBoxSuggestionsRequestedEventArgs>
{
    HRESULT __stdcall get_QueryText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().QueryText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Language(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Language());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LinguisticDetails(abi_arg_out<Windows::ApplicationModel::Search::ISearchQueryLinguisticDetails> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LinguisticDetails());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Request(abi_arg_out<Windows::ApplicationModel::Search::ISearchSuggestionsRequest> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Request());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgs>
{
    HRESULT __stdcall get_AddedSections(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AddedSections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedSections(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RemovedSections());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISectionsInViewChangedEventArgsFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgs>
{
    HRESULT __stdcall get_AddedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AddedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RemovedItems(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::IInspectable>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RemovedItems());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISelectionChangedEventArgsFactory>
{
    HRESULT __stdcall abi_CreateInstanceWithRemovedItemsAndAddedItems(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::IInspectable>> removedItems, abi_arg_in<Windows::Foundation::Collections::IVector<Windows::IInspectable>> addedItems, abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISelectionChangedEventArgs> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstanceWithRemovedItemsAndAddedItems(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::IInspectable> *>(&removedItems), *reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::IInspectable> *>(&addedItems), *reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoom> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoom>
{
    HRESULT __stdcall get_ZoomedInView(abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomedInView(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            this->shim().ZoomedInView(*reinterpret_cast<const Windows::UI::Xaml::Controls::ISemanticZoomInformation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomedOutView(abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomedOutView());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ZoomedOutView(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomInformation> value) noexcept override
    {
        try
        {
            this->shim().ZoomedOutView(*reinterpret_cast<const Windows::UI::Xaml::Controls::ISemanticZoomInformation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewActive(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomedInViewActive());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomedInViewActive(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomedInViewActive(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanChangeViews(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanChangeViews());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CanChangeViews(bool value) noexcept override
    {
        try
        {
            this->shim().CanChangeViews(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChangeStarted(abi_arg_in<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ViewChangeStarted(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChangeStarted(event_token token) noexcept override
    {
        try
        {
            this->shim().ViewChangeStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ViewChangeCompleted(abi_arg_in<Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ViewChangeCompleted(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ViewChangeCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().ViewChangeCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ToggleActiveView() noexcept override
    {
        try
        {
            this->shim().ToggleActiveView();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomOutButtonEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomOutButtonEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomOutButtonEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomOutButtonEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomInformation> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomInformation>
{
    HRESULT __stdcall get_SemanticZoomOwner(abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoom> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SemanticZoomOwner());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SemanticZoomOwner(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoom> value) noexcept override
    {
        try
        {
            this->shim().SemanticZoomOwner(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoom *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsActiveView(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsActiveView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsActiveView(bool value) noexcept override
    {
        try
        {
            this->shim().IsActiveView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInView(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsZoomedInView(bool value) noexcept override
    {
        try
        {
            this->shim().IsZoomedInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InitializeViewChange() noexcept override
    {
        try
        {
            this->shim().InitializeViewChange();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChange() noexcept override
    {
        try
        {
            this->shim().CompleteViewChange();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_MakeVisible(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> item) noexcept override
    {
        try
        {
            this->shim().MakeVisible(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&item));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartViewChangeFrom(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            this->shim().StartViewChangeFrom(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_StartViewChangeTo(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            this->shim().StartViewChangeTo(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChangeFrom(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            this->shim().CompleteViewChangeFrom(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CompleteViewChangeTo(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> source, abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> destination) noexcept override
    {
        try
        {
            this->shim().CompleteViewChangeTo(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&source), *reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&destination));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomLocation> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomLocation>
{
    HRESULT __stdcall get_Item(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Item());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Item(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Item(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Bounds(abi_arg_out<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Bounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Bounds(abi_arg_in<Windows::Foundation::Rect> value) noexcept override
    {
        try
        {
            this->shim().Bounds(*reinterpret_cast<const Windows::Foundation::Rect *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomStatics>
{
    HRESULT __stdcall get_ZoomedInViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomedInViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ZoomedOutViewProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ZoomedOutViewProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomedInViewActiveProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomedInViewActiveProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanChangeViewsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanChangeViewsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsZoomOutButtonEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsZoomOutButtonEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISemanticZoomViewChangedEventArgs>
{
    HRESULT __stdcall get_IsSourceZoomedInView(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSourceZoomedInView());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSourceZoomedInView(bool value) noexcept override
    {
        try
        {
            this->shim().IsSourceZoomedInView(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceItem(abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourceItem(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            this->shim().SourceItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DestinationItem(abi_arg_out<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DestinationItem());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DestinationItem(abi_arg_in<Windows::UI::Xaml::Controls::ISemanticZoomLocation> value) noexcept override
    {
        try
        {
            this->shim().DestinationItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::SemanticZoomLocation *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyout> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyout>
{
    HRESULT __stdcall get_Title(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Title());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Title(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Title(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderBackground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderBackground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().HeaderBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderForeground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderForeground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderForeground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().HeaderForeground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconSource(abi_arg_out<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IconSource());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IconSource(abi_arg_in<Windows::UI::Xaml::Media::IImageSource> value) noexcept override
    {
        try
        {
            this->shim().IconSource(*reinterpret_cast<const Windows::UI::Xaml::Media::ImageSource *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISettingsFlyoutTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_BackClick(abi_arg_in<Windows::UI::Xaml::Controls::BackClickEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().BackClick(*reinterpret_cast<const Windows::UI::Xaml::Controls::BackClickEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_BackClick(event_token token) noexcept override
    {
        try
        {
            this->shim().BackClick(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Show() noexcept override
    {
        try
        {
            this->shim().Show();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowIndependent() noexcept override
    {
        try
        {
            this->shim().ShowIndependent();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Hide() noexcept override
    {
        try
        {
            this->shim().Hide();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyoutFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyoutFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISettingsFlyout> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISettingsFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISettingsFlyoutStatics>
{
    HRESULT __stdcall get_TitleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderBackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IconSourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IconSourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISlider> : produce_base<D, Windows::UI::Xaml::Controls::ISlider>
{
    HRESULT __stdcall get_IntermediateValue(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IntermediateValue());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IntermediateValue(double value) noexcept override
    {
        try
        {
            this->shim().IntermediateValue(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StepFrequency(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StepFrequency());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StepFrequency(double value) noexcept override
    {
        try
        {
            this->shim().StepFrequency(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SnapsTo());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) noexcept override
    {
        try
        {
            this->shim().SnapsTo(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickFrequency(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TickFrequency());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TickFrequency(double value) noexcept override
    {
        try
        {
            this->shim().TickFrequency(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TickPlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) noexcept override
    {
        try
        {
            this->shim().TickPlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDirectionReversed(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDirectionReversed());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsDirectionReversed(bool value) noexcept override
    {
        try
        {
            this->shim().IsDirectionReversed(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsThumbToolTipEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsThumbToolTipEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsThumbToolTipEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsThumbToolTipEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ThumbToolTipValueConverter(abi_arg_out<Windows::UI::Xaml::Data::IValueConverter> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ThumbToolTipValueConverter());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ThumbToolTipValueConverter(abi_arg_in<Windows::UI::Xaml::Data::IValueConverter> value) noexcept override
    {
        try
        {
            this->shim().ThumbToolTipValueConverter(*reinterpret_cast<const Windows::UI::Xaml::Data::IValueConverter *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISlider2> : produce_base<D, Windows::UI::Xaml::Controls::ISlider2>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISliderFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISlider> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISliderStatics>
{
    HRESULT __stdcall get_IntermediateValueProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IntermediateValueProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StepFrequencyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StepFrequencyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SnapsToProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SnapsToProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickFrequencyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TickFrequencyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TickPlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TickPlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsDirectionReversedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsDirectionReversedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsThumbToolTipEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsThumbToolTipEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ThumbToolTipValueConverterProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ThumbToolTipValueConverterProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISliderStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ISliderStatics2>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitView> : produce_base<D, Windows::UI::Xaml::Controls::ISplitView>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Pane(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Pane());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Pane(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Pane(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPaneOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPaneOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsPaneOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsPaneOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpenPaneLength(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpenPaneLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpenPaneLength(double value) noexcept override
    {
        try
        {
            this->shim().OpenPaneLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompactPaneLength(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompactPaneLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CompactPaneLength(double value) noexcept override
    {
        try
        {
            this->shim().CompactPaneLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PanePlacement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement value) noexcept override
    {
        try
        {
            this->shim().PanePlacement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode value) noexcept override
    {
        try
        {
            this->shim().DisplayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::ISplitViewTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneBackground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaneBackground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PaneBackground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().PaneBackground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PaneClosing(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PaneClosing(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PaneClosing(event_token token) noexcept override
    {
        try
        {
            this->shim().PaneClosing(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PaneClosed(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PaneClosed(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PaneClosed(event_token token) noexcept override
    {
        try
        {
            this->shim().PaneClosed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitView2> : produce_base<D, Windows::UI::Xaml::Controls::ISplitView2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISplitView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewPaneClosingEventArgs>
{
    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaneProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsPaneOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsPaneOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpenPaneLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpenPaneLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompactPaneLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompactPaneLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PanePlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PanePlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DisplayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DisplayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettingsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettingsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaneBackgroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaneBackgroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISplitViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ISplitViewStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanel>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegular(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreScrollSnapPointsRegular());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept override
    {
        try
        {
            this->shim().AreScrollSnapPointsRegular(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanel2> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanel2>
{
    HRESULT __stdcall get_BorderBrush(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrush());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderBrush(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().BorderBrush(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThickness(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThickness());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_BorderThickness(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().BorderThickness(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadius(abi_arg_out<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadius());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CornerRadius(abi_arg_in<Windows::UI::Xaml::CornerRadius> value) noexcept override
    {
        try
        {
            this->shim().CornerRadius(*reinterpret_cast<const Windows::UI::Xaml::CornerRadius *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IStackPanel> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelStatics>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreScrollSnapPointsRegularProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStackPanelStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IStackPanelStatics2>
{
    HRESULT __stdcall get_BorderBrushProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderBrushProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BorderThicknessProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BorderThicknessProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CornerRadiusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CornerRadiusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelector> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelector>
{
    HRESULT __stdcall abi_SelectStyle(abi_arg_in<Windows::IInspectable> item, abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::UI::Xaml::IStyle> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectStyle(*reinterpret_cast<const Windows::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelectorFactory> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelectorFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IStyleSelector> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IStyleSelectorOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IStyleSelectorOverrides>
{
    HRESULT __stdcall abi_SelectStyleCore(abi_arg_in<Windows::IInspectable> item, abi_arg_in<Windows::UI::Xaml::IDependencyObject> container, abi_arg_out<Windows::UI::Xaml::IStyle> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().SelectStyleCore(*reinterpret_cast<const Windows::IInspectable *>(&item), *reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&container)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel2>
{
    HRESULT __stdcall abi_CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, abi_arg_out<Windows::UI::Core::ICoreInputSourceBase> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CreateCoreIndependentInputSource(deviceTypes));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainBackgroundPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISwapChainBackgroundPanel> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanel> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanel>
{
    HRESULT __stdcall get_CompositionScaleX(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompositionScaleX());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompositionScaleY(float * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompositionScaleY());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CompositionScaleChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CompositionScaleChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CompositionScaleChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().CompositionScaleChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes, abi_arg_out<Windows::UI::Core::ICoreInputSourceBase> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CreateCoreIndependentInputSource(deviceTypes));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanelFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ISwapChainPanel> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISwapChainPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISwapChainPanelStatics>
{
    HRESULT __stdcall get_CompositionScaleXProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompositionScaleXProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CompositionScaleYProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CompositionScaleYProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIcon> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIcon>
{
    HRESULT __stdcall get_Symbol(Windows::UI::Xaml::Controls::Symbol * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Symbol());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Symbol(Windows::UI::Xaml::Controls::Symbol value) noexcept override
    {
        try
        {
            this->shim().Symbol(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIconFactory> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIconFactory>
{
    HRESULT __stdcall abi_CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol, abi_arg_out<Windows::UI::Xaml::Controls::ISymbolIcon> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstanceWithSymbol(symbol));
            return S_OK;
        }
        catch (...)
        {
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ISymbolIconStatics> : produce_base<D, Windows::UI::Xaml::Controls::ISymbolIconStatics>
{
    HRESULT __stdcall get_SymbolProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SymbolProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock>
{
    HRESULT __stdcall get_FontSize(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSize());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontSize(double value) noexcept override
    {
        try
        {
            this->shim().FontSize(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamily(abi_arg_out<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamily());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontFamily(abi_arg_in<Windows::UI::Xaml::Media::IFontFamily> value) noexcept override
    {
        try
        {
            this->shim().FontFamily(*reinterpret_cast<const Windows::UI::Xaml::Media::FontFamily *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeight(abi_arg_out<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontWeight(abi_arg_in<Windows::UI::Text::FontWeight> value) noexcept override
    {
        try
        {
            this->shim().FontWeight(*reinterpret_cast<const Windows::UI::Text::FontWeight *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyle(Windows::UI::Text::FontStyle * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyle());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStyle(Windows::UI::Text::FontStyle value) noexcept override
    {
        try
        {
            this->shim().FontStyle(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretch(Windows::UI::Text::FontStretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_FontStretch(Windows::UI::Text::FontStretch value) noexcept override
    {
        try
        {
            this->shim().FontStretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacing(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacing());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_CharacterSpacing(int32_t value) noexcept override
    {
        try
        {
            this->shim().CharacterSpacing(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Foreground(abi_arg_out<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Foreground());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Foreground(abi_arg_in<Windows::UI::Xaml::Media::IBrush> value) noexcept override
    {
        try
        {
            this->shim().Foreground(*reinterpret_cast<const Windows::UI::Xaml::Media::Brush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimming(Windows::UI::Xaml::TextTrimming * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextTrimming());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextTrimming(Windows::UI::Xaml::TextTrimming value) noexcept override
    {
        try
        {
            this->shim().TextTrimming(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Text(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Inlines(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Documents::Inline>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Inlines());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Padding(abi_arg_out<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Padding());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Padding(abi_arg_in<Windows::UI::Xaml::Thickness> value) noexcept override
    {
        try
        {
            this->shim().Padding(*reinterpret_cast<const Windows::UI::Xaml::Thickness *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineHeight(double value) noexcept override
    {
        try
        {
            this->shim().LineHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategy());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) noexcept override
    {
        try
        {
            this->shim().LineStackingStrategy(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSelectionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextSelectionEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextSelectionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentStart(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ContentEnd(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionEnd(abi_arg_out<Windows::UI::Xaml::Documents::ITextPointer> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionEnd());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_BaselineOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().BaselineOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> start, abi_arg_in<Windows::UI::Xaml::Documents::ITextPointer> end) noexcept override
    {
        try
        {
            this->shim().Select(*reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&start), *reinterpret_cast<const Windows::UI::Xaml::Documents::TextPointer *>(&end));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock2>
{
    HRESULT __stdcall get_SelectionHighlightColor(abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLines(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLines());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLines(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLines(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBounds(Windows::UI::Xaml::TextLineBounds * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBounds());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextLineBounds(Windows::UI::Xaml::TextLineBounds value) noexcept override
    {
        try
        {
            this->shim().TextLineBounds(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) noexcept override
    {
        try
        {
            this->shim().OpticalMarginAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextScaleFactorEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextScaleFactorEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlock4> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlock4>
{
    HRESULT __stdcall abi_GetAlphaMask(abi_arg_out<Windows::UI::Composition::ICompositionBrush> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetAlphaMask());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics>
{
    HRESULT __stdcall get_FontSizeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontSizeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontFamilyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontFamilyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontWeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontWeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStyleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStyleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_FontStretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().FontStretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CharacterSpacingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CharacterSpacingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ForegroundProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ForegroundProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextTrimmingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextTrimmingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PaddingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PaddingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_LineStackingStrategyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LineStackingStrategyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextSelectionEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextSelectionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics2>
{
    HRESULT __stdcall get_SelectionHighlightColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLinesProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLinesProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextLineBoundsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextLineBoundsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OpticalMarginAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OpticalMarginAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBlockStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBlockStatics3>
{
    HRESULT __stdcall get_IsTextScaleFactorEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextScaleFactorEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox>
{
    HRESULT __stdcall get_Text(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Text());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Text(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().Text(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectedText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectedText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectedText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SelectedText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionLength(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionLength(int32_t value) noexcept override
    {
        try
        {
            this->shim().SelectionLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionStart(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionStart());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionStart(int32_t value) noexcept override
    {
        try
        {
            this->shim().SelectionStart(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLength(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLength());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaxLength(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaxLength(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsReadOnly(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsReadOnly());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsReadOnly(bool value) noexcept override
    {
        try
        {
            this->shim().IsReadOnly(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturn(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AcceptsReturn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AcceptsReturn(bool value) noexcept override
    {
        try
        {
            this->shim().AcceptsReturn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignment(Windows::UI::Xaml::TextAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextAlignment(Windows::UI::Xaml::TextAlignment value) noexcept override
    {
        try
        {
            this->shim().TextAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrapping(Windows::UI::Xaml::TextWrapping * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrapping());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextWrapping(Windows::UI::Xaml::TextWrapping value) noexcept override
    {
        try
        {
            this->shim().TextWrapping(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSpellCheckEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsSpellCheckEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsSpellCheckEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextPredictionEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsTextPredictionEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsTextPredictionEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScope(abi_arg_out<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScope());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_InputScope(abi_arg_in<Windows::UI::Xaml::Input::IInputScope> value) noexcept override
    {
        try
        {
            this->shim().InputScope(*reinterpret_cast<const Windows::UI::Xaml::Input::InputScope *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanged(abi_arg_in<Windows::UI::Xaml::Controls::TextChangedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextChanged(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextChangedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TextChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_SelectionChanged(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().SelectionChanged(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_SelectionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().SelectionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContextMenuOpening(abi_arg_in<Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContextMenuOpening(*reinterpret_cast<const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContextMenuOpening(event_token token) noexcept override
    {
        try
        {
            this->shim().ContextMenuOpening(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Select(int32_t start, int32_t length) noexcept override
    {
        try
        {
            this->shim().Select(start, length);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SelectAll() noexcept override
    {
        try
        {
            this->shim().SelectAll();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge, abi_arg_out<Windows::Foundation::Rect> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetRectFromCharacterIndex(charIndex, trailingEdge));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox2>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderText(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderText());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlaceholderText(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().PlaceholderText(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColor(abi_arg_out<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColor());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SelectionHighlightColor(abi_arg_in<Windows::UI::Xaml::Media::ISolidColorBrush> value) noexcept override
    {
        try
        {
            this->shim().SelectionHighlightColor(*reinterpret_cast<const Windows::UI::Xaml::Media::SolidColorBrush *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocus(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PreventKeyboardDisplayOnProgrammaticFocus(bool value) noexcept override
    {
        try
        {
            this->shim().PreventKeyboardDisplayOnProgrammaticFocus(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsColorFontEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsColorFontEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Paste(abi_arg_in<Windows::UI::Xaml::Controls::TextControlPasteEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Paste(*reinterpret_cast<const Windows::UI::Xaml::Controls::TextControlPasteEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Paste(event_token token) noexcept override
    {
        try
        {
            this->shim().Paste(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox3>
{
    HRESULT __stdcall add_TextCompositionStarted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionStarted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionStarted(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionStarted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextCompositionEnded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextCompositionEnded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextCompositionEnded(event_token token) noexcept override
    {
        try
        {
            this->shim().TextCompositionEnded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrder());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) noexcept override
    {
        try
        {
            this->shim().TextReadingOrder(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DesiredCandidateWindowAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) noexcept override
    {
        try
        {
            this->shim().DesiredCandidateWindowAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CandidateWindowBoundsChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CandidateWindowBoundsChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CandidateWindowBoundsChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().CandidateWindowBoundsChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TextChanging(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TextChanging(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TextChanging(event_token token) noexcept override
    {
        try
        {
            this->shim().TextChanging(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBox4> : produce_base<D, Windows::UI::Xaml::Controls::ITextBox4>
{
    HRESULT __stdcall abi_GetLinguisticAlternativesAsync(abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().GetLinguisticAlternativesAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxFactory> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ITextBox> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics>
{
    HRESULT __stdcall get_TextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaxLengthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaxLengthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsReadOnlyProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsReadOnlyProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AcceptsReturnProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AcceptsReturnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextWrappingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextWrappingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSpellCheckEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSpellCheckEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsTextPredictionEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsTextPredictionEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_InputScopeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().InputScopeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics2>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlaceholderTextProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlaceholderTextProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SelectionHighlightColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SelectionHighlightColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PreventKeyboardDisplayOnProgrammaticFocusProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PreventKeyboardDisplayOnProgrammaticFocusProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsColorFontEnabledProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsColorFontEnabledProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxStatics3> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxStatics3>
{
    HRESULT __stdcall get_DesiredCandidateWindowAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DesiredCandidateWindowAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TextReadingOrderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TextReadingOrderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextBoxTextChangingEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextChangedEventArgs>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionChangedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionEndedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextCompositionStartedEventArgs>
{
    HRESULT __stdcall get_StartIndex(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StartIndex());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Length(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITextControlPasteEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITextControlPasteEventArgs>
{
    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickedEventArgs>
{
    HRESULT __stdcall get_OldTime(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OldTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewTime(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NewTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePicker> : produce_base<D, Windows::UI::Xaml::Controls::ITimePicker>
{
    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClockIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClockIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClockIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().ClockIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrement(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinuteIncrement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept override
    {
        try
        {
            this->shim().MinuteIncrement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Time(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Time());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Time(abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            this->shim().Time(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TimeChanged(abi_arg_in<Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TimeChanged(*reinterpret_cast<const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TimeChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().TimeChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePicker2> : produce_base<D, Windows::UI::Xaml::Controls::ITimePicker2>
{
    HRESULT __stdcall get_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) noexcept override
    {
        try
        {
            this->shim().LightDismissOverlayMode(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFactory> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::ITimePicker> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyout> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyout>
{
    HRESULT __stdcall get_ClockIdentifier(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClockIdentifier());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ClockIdentifier(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().ClockIdentifier(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Time(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Time());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Time(abi_arg_in<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            this->shim().Time(*reinterpret_cast<const Windows::Foundation::TimeSpan *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrement(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinuteIncrement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MinuteIncrement(int32_t value) noexcept override
    {
        try
        {
            this->shim().MinuteIncrement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_TimePicked(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().TimePicked(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_TimePicked(event_token token) noexcept override
    {
        try
        {
            this->shim().TimePicked(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ShowAtAsync(abi_arg_in<Windows::UI::Xaml::IFrameworkElement> target, abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ShowAtAsync(*reinterpret_cast<const Windows::UI::Xaml::FrameworkElement *>(&target)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutPresenter>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerFlyoutStatics>
{
    HRESULT __stdcall get_ClockIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClockIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TimeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TimeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinuteIncrementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerStatics> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerStatics>
{
    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ClockIdentifierProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ClockIdentifierProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MinuteIncrementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MinuteIncrementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TimeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TimeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerStatics2> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerStatics2>
{
    HRESULT __stdcall get_LightDismissOverlayModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().LightDismissOverlayModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::ITimePickerValueChangedEventArgs>
{
    HRESULT __stdcall get_OldTime(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OldTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_NewTime(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().NewTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem>
{
    HRESULT __stdcall get_IsChecked(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsChecked());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsChecked(bool value) noexcept override
    {
        try
        {
            this->shim().IsChecked(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IToggleMenuFlyoutItem> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToggleMenuFlyoutItemStatics>
{
    HRESULT __stdcall get_IsCheckedProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsCheckedProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitch> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitch>
{
    HRESULT __stdcall get_IsOn(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOn());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOn(bool value) noexcept override
    {
        try
        {
            this->shim().IsOn(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Header(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Header());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Header(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().Header(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HeaderTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().HeaderTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContent(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OnContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OnContent(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().OnContent(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OnContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OnContentTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().OnContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContent(abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OffContent());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OffContent(abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().OffContent(*reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentTemplate(abi_arg_out<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OffContentTemplate());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_OffContentTemplate(abi_arg_in<Windows::UI::Xaml::IDataTemplate> value) noexcept override
    {
        try
        {
            this->shim().OffContentTemplate(*reinterpret_cast<const Windows::UI::Xaml::DataTemplate *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IToggleSwitchTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Toggled(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Toggled(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Toggled(event_token token) noexcept override
    {
        try
        {
            this->shim().Toggled(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitchOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitchOverrides>
{
    HRESULT __stdcall abi_OnToggled() noexcept override
    {
        try
        {
            this->shim().OnToggled();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOnContentChanged(abi_arg_in<Windows::IInspectable> oldContent, abi_arg_in<Windows::IInspectable> newContent) noexcept override
    {
        try
        {
            this->shim().OnOnContentChanged(*reinterpret_cast<const Windows::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnOffContentChanged(abi_arg_in<Windows::IInspectable> oldContent, abi_arg_in<Windows::IInspectable> newContent) noexcept override
    {
        try
        {
            this->shim().OnOffContentChanged(*reinterpret_cast<const Windows::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnHeaderChanged(abi_arg_in<Windows::IInspectable> oldContent, abi_arg_in<Windows::IInspectable> newContent) noexcept override
    {
        try
        {
            this->shim().OnHeaderChanged(*reinterpret_cast<const Windows::IInspectable *>(&oldContent), *reinterpret_cast<const Windows::IInspectable *>(&newContent));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToggleSwitchStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToggleSwitchStatics>
{
    HRESULT __stdcall get_IsOnProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOnProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HeaderTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HeaderTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OnContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OnContentTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OnContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OffContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OffContentTemplateProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OffContentTemplateProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTip> : produce_base<D, Windows::UI::Xaml::Controls::IToolTip>
{
    HRESULT __stdcall get_HorizontalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalOffset(double value) noexcept override
    {
        try
        {
            this->shim().HorizontalOffset(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOpen(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOpen());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsOpen(bool value) noexcept override
    {
        try
        {
            this->shim().IsOpen(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Placement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept override
    {
        try
        {
            this->shim().Placement(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTarget(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlacementTarget());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_PlacementTarget(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().PlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffset(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffset());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalOffset(double value) noexcept override
    {
        try
        {
            this->shim().VerticalOffset(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_TemplateSettings(abi_arg_out<Windows::UI::Xaml::Controls::Primitives::IToolTipTemplateSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().TemplateSettings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Closed(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Closed(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept override
    {
        try
        {
            this->shim().Closed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_Opened(abi_arg_in<Windows::UI::Xaml::RoutedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().Opened(*reinterpret_cast<const Windows::UI::Xaml::RoutedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_Opened(event_token token) noexcept override
    {
        try
        {
            this->shim().Opened(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipFactory> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IToolTip> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipService> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipService>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipServiceStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipServiceStatics>
{
    HRESULT __stdcall get_PlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPlacement(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::Primitives::PlacementMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetPlacement(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlacement(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) noexcept override
    {
        try
        {
            this->shim().SetPlacement(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTargetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlacementTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetPlacementTarget(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetPlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetPlacementTarget(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().SetPlacementTarget(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ToolTipProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ToolTipProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetToolTip(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_out<Windows::IInspectable> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetToolTip(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetToolTip(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, abi_arg_in<Windows::IInspectable> value) noexcept override
    {
        try
        {
            this->shim().SetToolTip(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), *reinterpret_cast<const Windows::IInspectable *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IToolTipStatics> : produce_base<D, Windows::UI::Xaml::Controls::IToolTipStatics>
{
    HRESULT __stdcall get_HorizontalOffsetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsOpenProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsOpenProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlacementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PlacementTargetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PlacementTargetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalOffsetProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalOffsetProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUIElementCollection> : produce_base<D, Windows::UI::Xaml::Controls::IUIElementCollection>
{
    HRESULT __stdcall abi_Move(uint32_t oldIndex, uint32_t newIndex) noexcept override
    {
        try
        {
            this->shim().Move(oldIndex, newIndex);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControl> : produce_base<D, Windows::UI::Xaml::Controls::IUserControl>
{
    HRESULT __stdcall get_Content(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Content());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Content(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Content(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControlFactory> : produce_base<D, Windows::UI::Xaml::Controls::IUserControlFactory>
{
    HRESULT __stdcall abi_CreateInstance(abi_arg_in<Windows::IInspectable> outer, abi_arg_out<Windows::IInspectable> inner, abi_arg_out<Windows::UI::Xaml::Controls::IUserControl> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstance(*reinterpret_cast<const Windows::IInspectable *>(&outer), *inner));
            return S_OK;
        }
        catch (...)
        {
            *inner = nullptr;
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IUserControlStatics> : produce_base<D, Windows::UI::Xaml::Controls::IUserControlStatics>
{
    HRESULT __stdcall get_ContentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGrid>
{
    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IVariableSizedWrapGridStatics>
{
    HRESULT __stdcall get_ItemHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_RowSpanProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().RowSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetRowSpan(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetRowSpan(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetRowSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ColumnSpanProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ColumnSpanProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetColumnSpan(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetColumnSpan(abi_arg_in<Windows::UI::Xaml::IUIElement> element, int32_t value) noexcept override
    {
        try
        {
            this->shim().SetColumnSpan(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IViewbox> : produce_base<D, Windows::UI::Xaml::Controls::IViewbox>
{
    HRESULT __stdcall get_Child(abi_arg_out<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Child());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Child(abi_arg_in<Windows::UI::Xaml::IUIElement> value) noexcept override
    {
        try
        {
            this->shim().Child(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Stretch(Windows::UI::Xaml::Media::Stretch * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Stretch());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Stretch(Windows::UI::Xaml::Media::Stretch value) noexcept override
    {
        try
        {
            this->shim().Stretch(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchDirection());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) noexcept override
    {
        try
        {
            this->shim().StretchDirection(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IViewboxStatics> : produce_base<D, Windows::UI::Xaml::Controls::IViewboxStatics>
{
    HRESULT __stdcall get_StretchProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StretchDirectionProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StretchDirectionProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanel> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanel>
{
    HRESULT __stdcall get_ItemContainerGenerator(abi_arg_out<Windows::UI::Xaml::Controls::IItemContainerGenerator> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemContainerGenerator());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelFactory> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelFactory>
{};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelOverrides>
{
    HRESULT __stdcall abi_OnItemsChanged(abi_arg_in<Windows::IInspectable> sender, abi_arg_in<Windows::UI::Xaml::Controls::Primitives::IItemsChangedEventArgs> args) noexcept override
    {
        try
        {
            this->shim().OnItemsChanged(*reinterpret_cast<const Windows::IInspectable *>(&sender), *reinterpret_cast<const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs *>(&args));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_OnClearChildren() noexcept override
    {
        try
        {
            this->shim().OnClearChildren();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_BringIndexIntoView(int32_t index) noexcept override
    {
        try
        {
            this->shim().BringIndexIntoView(index);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingPanelProtected> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingPanelProtected>
{
    HRESULT __stdcall abi_AddInternalChild(abi_arg_in<Windows::UI::Xaml::IUIElement> child) noexcept override
    {
        try
        {
            this->shim().AddInternalChild(*reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&child));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InsertInternalChild(int32_t index, abi_arg_in<Windows::UI::Xaml::IUIElement> child) noexcept override
    {
        try
        {
            this->shim().InsertInternalChild(index, *reinterpret_cast<const Windows::UI::Xaml::UIElement *>(&child));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_RemoveInternalChildRange(int32_t index, int32_t range) noexcept override
    {
        try
        {
            this->shim().RemoveInternalChildRange(index, range);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanel> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanel>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegular(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreScrollSnapPointsRegular());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AreScrollSnapPointsRegular(bool value) noexcept override
    {
        try
        {
            this->shim().AreScrollSnapPointsRegular(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_CleanUpVirtualizedItemEvent(abi_arg_in<Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().CleanUpVirtualizedItemEvent(*reinterpret_cast<const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_CleanUpVirtualizedItemEvent(event_token token) noexcept override
    {
        try
        {
            this->shim().CleanUpVirtualizedItemEvent(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelOverrides>
{
    HRESULT __stdcall abi_OnCleanUpVirtualizedItem(abi_arg_in<Windows::UI::Xaml::Controls::ICleanUpVirtualizedItemEventArgs> e) noexcept override
    {
        try
        {
            this->shim().OnCleanUpVirtualizedItem(*reinterpret_cast<const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs *>(&e));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics> : produce_base<D, Windows::UI::Xaml::Controls::IVirtualizingStackPanelStatics>
{
    HRESULT __stdcall get_AreScrollSnapPointsRegularProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AreScrollSnapPointsRegularProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VirtualizationModeProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VirtualizationModeProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetVirtualizationMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::VirtualizationMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetVirtualizationMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetVirtualizationMode(abi_arg_in<Windows::UI::Xaml::IDependencyObject> element, Windows::UI::Xaml::Controls::VirtualizationMode value) noexcept override
    {
        try
        {
            this->shim().SetVirtualizationMode(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&element), value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsVirtualizingProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsVirtualizingProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GetIsVirtualizing(abi_arg_in<Windows::UI::Xaml::IDependencyObject> o, bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().GetIsVirtualizing(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&o)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView> : produce_base<D, Windows::UI::Xaml::Controls::IWebView>
{
    HRESULT __stdcall get_Source(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Source());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Source(abi_arg_in<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            this->shim().Source(*reinterpret_cast<const Windows::Foundation::Uri *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AllowedScriptNotifyUris(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AllowedScriptNotifyUris());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_AllowedScriptNotifyUris(abi_arg_in<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            this->shim().AllowedScriptNotifyUris(*reinterpret_cast<const Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataTransferPackage(abi_arg_out<Windows::ApplicationModel::DataTransfer::IDataPackage> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DataTransferPackage());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_LoadCompleted(abi_arg_in<Windows::UI::Xaml::Navigation::LoadCompletedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().LoadCompleted(*reinterpret_cast<const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_LoadCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().LoadCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ScriptNotify(abi_arg_in<Windows::UI::Xaml::Controls::NotifyEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ScriptNotify(*reinterpret_cast<const Windows::UI::Xaml::Controls::NotifyEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ScriptNotify(event_token token) noexcept override
    {
        try
        {
            this->shim().ScriptNotify(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationFailed(abi_arg_in<Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NavigationFailed(*reinterpret_cast<const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationFailed(event_token token) noexcept override
    {
        try
        {
            this->shim().NavigationFailed(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvokeScript(abi_arg_in<hstring> scriptName, uint32_t __argumentsSize, abi_arg_in<hstring> * arguments, abi_arg_out<hstring> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().InvokeScript(*reinterpret_cast<const hstring *>(&scriptName), *reinterpret_cast<const hstring *>(&arguments)));
            return S_OK;
        }
        catch (...)
        {
            *arguments = nullptr;
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Navigate(abi_arg_in<Windows::Foundation::IUriRuntimeClass> source) noexcept override
    {
        try
        {
            this->shim().Navigate(*reinterpret_cast<const Windows::Foundation::Uri *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateToString(abi_arg_in<hstring> text) noexcept override
    {
        try
        {
            this->shim().NavigateToString(*reinterpret_cast<const hstring *>(&text));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView2> : produce_base<D, Windows::UI::Xaml::Controls::IWebView2>
{
    HRESULT __stdcall get_CanGoBack(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoBack());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForward(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoForward());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DocumentTitle(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DocumentTitle());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationStarting(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NavigationStarting(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationStarting(event_token token) noexcept override
    {
        try
        {
            this->shim().NavigationStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContentLoading(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContentLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContentLoading(event_token token) noexcept override
    {
        try
        {
            this->shim().ContentLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_DOMContentLoaded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().DOMContentLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_DOMContentLoaded(event_token token) noexcept override
    {
        try
        {
            this->shim().DOMContentLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoForward() noexcept override
    {
        try
        {
            this->shim().GoForward();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_GoBack() noexcept override
    {
        try
        {
            this->shim().GoBack();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Refresh() noexcept override
    {
        try
        {
            this->shim().Refresh();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Stop() noexcept override
    {
        try
        {
            this->shim().Stop();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CapturePreviewToStreamAsync(abi_arg_in<Windows::Storage::Streams::IRandomAccessStream> stream, abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CapturePreviewToStreamAsync(*reinterpret_cast<const Windows::Storage::Streams::IRandomAccessStream *>(&stream)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_InvokeScriptAsync(abi_arg_in<hstring> scriptName, abi_arg_in<Windows::Foundation::Collections::IIterable<hstring>> arguments, abi_arg_out<Windows::Foundation::IAsyncOperation<hstring>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().InvokeScriptAsync(*reinterpret_cast<const hstring *>(&scriptName), *reinterpret_cast<const Windows::Foundation::Collections::IIterable<hstring> *>(&arguments)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_CaptureSelectedContentToDataPackageAsync(abi_arg_out<Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage>> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().CaptureSelectedContentToDataPackageAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateToLocalStreamUri(abi_arg_in<Windows::Foundation::IUriRuntimeClass> source, abi_arg_in<Windows::Web::IUriToStreamResolver> streamResolver) noexcept override
    {
        try
        {
            this->shim().NavigateToLocalStreamUri(*reinterpret_cast<const Windows::Foundation::Uri *>(&source), *reinterpret_cast<const Windows::Web::IUriToStreamResolver *>(&streamResolver));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_BuildLocalStreamUri(abi_arg_in<hstring> contentIdentifier, abi_arg_in<hstring> relativePath, abi_arg_out<Windows::Foundation::IUriRuntimeClass> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().BuildLocalStreamUri(*reinterpret_cast<const hstring *>(&contentIdentifier), *reinterpret_cast<const hstring *>(&relativePath)));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultBackgroundColor(abi_arg_out<Windows::UI::Color> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultBackgroundColor());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_DefaultBackgroundColor(abi_arg_in<Windows::UI::Color> value) noexcept override
    {
        try
        {
            this->shim().DefaultBackgroundColor(*reinterpret_cast<const Windows::UI::Color *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NavigationCompleted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NavigationCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NavigationCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().NavigationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameNavigationStarting(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FrameNavigationStarting(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameNavigationStarting(event_token token) noexcept override
    {
        try
        {
            this->shim().FrameNavigationStarting(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameContentLoading(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FrameContentLoading(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameContentLoading(event_token token) noexcept override
    {
        try
        {
            this->shim().FrameContentLoading(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameDOMContentLoaded(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FrameDOMContentLoaded(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameDOMContentLoaded(event_token token) noexcept override
    {
        try
        {
            this->shim().FrameDOMContentLoaded(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_FrameNavigationCompleted(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().FrameNavigationCompleted(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_FrameNavigationCompleted(event_token token) noexcept override
    {
        try
        {
            this->shim().FrameNavigationCompleted(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_LongRunningScriptDetected(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().LongRunningScriptDetected(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_LongRunningScriptDetected(event_token token) noexcept override
    {
        try
        {
            this->shim().LongRunningScriptDetected(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnsafeContentWarningDisplaying(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().UnsafeContentWarningDisplaying(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnsafeContentWarningDisplaying(event_token token) noexcept override
    {
        try
        {
            this->shim().UnsafeContentWarningDisplaying(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnviewableContentIdentified(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().UnviewableContentIdentified(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnviewableContentIdentified(event_token token) noexcept override
    {
        try
        {
            this->shim().UnviewableContentIdentified(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_NavigateWithHttpRequestMessage(abi_arg_in<Windows::Web::Http::IHttpRequestMessage> requestMessage) noexcept override
    {
        try
        {
            this->shim().NavigateWithHttpRequestMessage(*reinterpret_cast<const Windows::Web::Http::HttpRequestMessage *>(&requestMessage));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Focus(Windows::UI::Xaml::FocusState value, bool * returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().Focus(value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView3> : produce_base<D, Windows::UI::Xaml::Controls::IWebView3>
{
    HRESULT __stdcall get_ContainsFullScreenElement(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContainsFullScreenElement());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_ContainsFullScreenElementChanged(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().ContainsFullScreenElementChanged(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_ContainsFullScreenElementChanged(event_token token) noexcept override
    {
        try
        {
            this->shim().ContainsFullScreenElementChanged(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView4> : produce_base<D, Windows::UI::Xaml::Controls::IWebView4>
{
    HRESULT __stdcall get_ExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExecutionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DeferredPermissionRequests(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DeferredPermissionRequests());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Settings(abi_arg_out<Windows::UI::Xaml::Controls::IWebViewSettings> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Settings());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_UnsupportedUriSchemeIdentified(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().UnsupportedUriSchemeIdentified(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_UnsupportedUriSchemeIdentified(event_token token) noexcept override
    {
        try
        {
            this->shim().UnsupportedUriSchemeIdentified(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_NewWindowRequested(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().NewWindowRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_NewWindowRequested(event_token token) noexcept override
    {
        try
        {
            this->shim().NewWindowRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall add_PermissionRequested(abi_arg_in<Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs>> value, event_token * token) noexcept override
    {
        try
        {
            *token = detach(this->shim().PermissionRequested(*reinterpret_cast<const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> *>(&value)));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall remove_PermissionRequested(event_token token) noexcept override
    {
        try
        {
            this->shim().PermissionRequested(token);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_AddWebAllowedObject(abi_arg_in<hstring> name, abi_arg_in<Windows::IInspectable> pObject) noexcept override
    {
        try
        {
            this->shim().AddWebAllowedObject(*reinterpret_cast<const hstring *>(&name), *reinterpret_cast<const Windows::IInspectable *>(&pObject));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_DeferredPermissionRequestById(uint32_t id, abi_arg_out<Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().DeferredPermissionRequestById(id));
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebView5> : produce_base<D, Windows::UI::Xaml::Controls::IWebView5>
{
    HRESULT __stdcall get_XYFocusLeft(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusLeft());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusLeft(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusLeft(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRight(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusRight());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusRight(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusRight(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUp(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusUp());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusUp(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusUp(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDown(abi_arg_out<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusDown());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_XYFocusDown(abi_arg_in<Windows::UI::Xaml::IDependencyObject> value) noexcept override
    {
        try
        {
            this->shim().XYFocusDown(*reinterpret_cast<const Windows::UI::Xaml::DependencyObject *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewBrush> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewBrush>
{
    HRESULT __stdcall get_SourceName(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceName());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_SourceName(abi_arg_in<hstring> value) noexcept override
    {
        try
        {
            this->shim().SourceName(*reinterpret_cast<const hstring *>(&value));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Redraw() noexcept override
    {
        try
        {
            this->shim().Redraw();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_SetSource(abi_arg_in<Windows::UI::Xaml::Controls::IWebView> source) noexcept override
    {
        try
        {
            this->shim().SetSource(*reinterpret_cast<const Windows::UI::Xaml::Controls::WebView *>(&source));
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewBrushStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewBrushStatics>
{
    HRESULT __stdcall get_SourceNameProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceNameProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewContentLoadingEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewDOMContentLoadedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewDeferredPermissionRequest>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PermissionType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Id(uint32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Id());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Allow() noexcept override
    {
        try
        {
            this->shim().Allow();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Deny() noexcept override
    {
        try
        {
            this->shim().Deny();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewFactory4> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewFactory4>
{
    HRESULT __stdcall abi_CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode, abi_arg_out<Windows::UI::Xaml::Controls::IWebView> instance) noexcept override
    {
        try
        {
            *instance = detach(this->shim().CreateInstanceWithExecutionMode(executionMode));
            return S_OK;
        }
        catch (...)
        {
            *instance = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewLongRunningScriptDetectedEventArgs>
{
    HRESULT __stdcall get_ExecutionTime(abi_arg_out<Windows::Foundation::TimeSpan> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ExecutionTime());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_StopPageScriptExecution(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().StopPageScriptExecution());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_StopPageScriptExecution(bool value) noexcept override
    {
        try
        {
            this->shim().StopPageScriptExecution(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationCompletedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsSuccess(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsSuccess());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().WebErrorStatus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationFailedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_WebErrorStatus(Windows::Web::WebErrorStatus * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().WebErrorStatus());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNavigationStartingEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Cancel(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Cancel());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Cancel(bool value) noexcept override
    {
        try
        {
            this->shim().Cancel(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewNewWindowRequestedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Referrer(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Referrer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequest> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequest>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_PermissionType(Windows::UI::Xaml::Controls::WebViewPermissionType * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PermissionType());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Id(uint32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Id());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_State(Windows::UI::Xaml::Controls::WebViewPermissionState * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().State());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Defer() noexcept override
    {
        try
        {
            this->shim().Defer();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Allow() noexcept override
    {
        try
        {
            this->shim().Allow();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_Deny() noexcept override
    {
        try
        {
            this->shim().Deny();
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewPermissionRequestedEventArgs>
{
    HRESULT __stdcall get_PermissionRequest(abi_arg_out<Windows::UI::Xaml::Controls::IWebViewPermissionRequest> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().PermissionRequest());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewSettings> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewSettings>
{
    HRESULT __stdcall get_IsJavaScriptEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsJavaScriptEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsJavaScriptEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsJavaScriptEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_IsIndexedDBEnabled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().IsIndexedDBEnabled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_IsIndexedDBEnabled(bool value) noexcept override
    {
        try
        {
            this->shim().IsIndexedDBEnabled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics>
{
    HRESULT __stdcall get_AnyScriptNotifyUri(abi_arg_out<Windows::Foundation::Collections::IVector<Windows::Foundation::Uri>> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AnyScriptNotifyUri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_SourceProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().SourceProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_AllowedScriptNotifyUrisProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().AllowedScriptNotifyUrisProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DataTransferPackageProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DataTransferPackageProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics2> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics2>
{
    HRESULT __stdcall get_CanGoBackProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoBackProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_CanGoForwardProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().CanGoForwardProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DocumentTitleProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DocumentTitleProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_DefaultBackgroundColorProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultBackgroundColorProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics3> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics3>
{
    HRESULT __stdcall get_ContainsFullScreenElementProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ContainsFullScreenElementProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics4> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics4>
{
    HRESULT __stdcall get_DefaultExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().DefaultExecutionMode());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall abi_ClearTemporaryWebDataAsync(abi_arg_out<Windows::Foundation::IAsyncAction> returnValue) noexcept override
    {
        try
        {
            *returnValue = detach(this->shim().ClearTemporaryWebDataAsync());
            return S_OK;
        }
        catch (...)
        {
            *returnValue = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewStatics5> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewStatics5>
{
    HRESULT __stdcall get_XYFocusLeftProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusLeftProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusRightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusRightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusUpProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusUpProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_XYFocusDownProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().XYFocusDownProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnsupportedUriSchemeIdentifiedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Handled(bool * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Handled());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Handled(bool value) noexcept override
    {
        try
        {
            this->shim().Handled(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs>
{
    HRESULT __stdcall get_Uri(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Uri());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Referrer(abi_arg_out<Windows::Foundation::IUriRuntimeClass> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Referrer());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2> : produce_base<D, Windows::UI::Xaml::Controls::IWebViewUnviewableContentIdentifiedEventArgs2>
{
    HRESULT __stdcall get_MediaType(abi_arg_out<hstring> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MediaType());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWrapGrid> : produce_base<D, Windows::UI::Xaml::Controls::IWrapGrid>
{
    HRESULT __stdcall get_ItemWidth(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidth());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemWidth(double value) noexcept override
    {
        try
        {
            this->shim().ItemWidth(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeight(double * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeight());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_ItemHeight(double value) noexcept override
    {
        try
        {
            this->shim().ItemHeight(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_Orientation(Windows::UI::Xaml::Controls::Orientation * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().Orientation());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_Orientation(Windows::UI::Xaml::Controls::Orientation value) noexcept override
    {
        try
        {
            this->shim().Orientation(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) noexcept override
    {
        try
        {
            this->shim().HorizontalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalChildrenAlignment());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) noexcept override
    {
        try
        {
            this->shim().VerticalChildrenAlignment(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumns(int32_t * value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumns());
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall put_MaximumRowsOrColumns(int32_t value) noexcept override
    {
        try
        {
            this->shim().MaximumRowsOrColumns(value);
            return S_OK;
        }
        catch (...)
        {
            return impl::to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Windows::UI::Xaml::Controls::IWrapGridStatics> : produce_base<D, Windows::UI::Xaml::Controls::IWrapGridStatics>
{
    HRESULT __stdcall get_ItemWidthProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemWidthProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_ItemHeightProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().ItemHeightProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_OrientationProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().OrientationProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_HorizontalChildrenAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().HorizontalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_VerticalChildrenAlignmentProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().VerticalChildrenAlignmentProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }

    HRESULT __stdcall get_MaximumRowsOrColumnsProperty(abi_arg_out<Windows::UI::Xaml::IDependencyProperty> value) noexcept override
    {
        try
        {
            *value = detach(this->shim().MaximumRowsOrColumnsProperty());
            return S_OK;
        }
        catch (...)
        {
            *value = nullptr;
            return impl::to_hresult();
        }
    }
};

}

namespace Windows::UI::Xaml::Controls {

template <typename D> void impl_IInsertionPanel<D>::GetInsertionIndexes(const Windows::Foundation::Point & position, int32_t & first, int32_t & second) const
{
    check_hresult(static_cast<const IInsertionPanel &>(static_cast<const D &>(*this))->abi_GetInsertionIndexes(get(position), &first, &second));
}

template <typename D> Windows::IInspectable impl_IItemContainerMapping<D>::ItemFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::IInspectable returnValue;
    check_hresult(static_cast<const IItemContainerMapping &>(static_cast<const D &>(*this))->abi_ItemFromContainer(get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerMapping<D>::ContainerFromItem(const Windows::IInspectable & item) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerMapping &>(static_cast<const D &>(*this))->abi_ContainerFromItem(get(item), put(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerMapping<D>::IndexFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    int32_t returnValue {};
    check_hresult(static_cast<const IItemContainerMapping &>(static_cast<const D &>(*this))->abi_IndexFromContainer(get(container), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerMapping<D>::ContainerFromIndex(int32_t index) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerMapping &>(static_cast<const D &>(*this))->abi_ContainerFromIndex(index, put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_INavigate<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType) const
{
    bool returnValue {};
    check_hresult(static_cast<const INavigate &>(static_cast<const D &>(*this))->abi_Navigate(get(sourcePageType), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoom impl_ISemanticZoomInformation<D>::SemanticZoomOwner() const
{
    Windows::UI::Xaml::Controls::SemanticZoom value { nullptr };
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->get_SemanticZoomOwner(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::SemanticZoomOwner(const Windows::UI::Xaml::Controls::SemanticZoom & value) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->put_SemanticZoomOwner(get(value)));
}

template <typename D> bool impl_ISemanticZoomInformation<D>::IsActiveView() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->get_IsActiveView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::IsActiveView(bool value) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->put_IsActiveView(value));
}

template <typename D> bool impl_ISemanticZoomInformation<D>::IsZoomedInView() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->get_IsZoomedInView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomInformation<D>::IsZoomedInView(bool value) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->put_IsZoomedInView(value));
}

template <typename D> void impl_ISemanticZoomInformation<D>::InitializeViewChange() const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_InitializeViewChange());
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChange() const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_CompleteViewChange());
}

template <typename D> void impl_ISemanticZoomInformation<D>::MakeVisible(const Windows::UI::Xaml::Controls::SemanticZoomLocation & item) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_MakeVisible(get(item)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::StartViewChangeFrom(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_StartViewChangeFrom(get(source), get(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::StartViewChangeTo(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_StartViewChangeTo(get(source), get(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChangeFrom(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_CompleteViewChangeFrom(get(source), get(destination)));
}

template <typename D> void impl_ISemanticZoomInformation<D>::CompleteViewChangeTo(const Windows::UI::Xaml::Controls::SemanticZoomLocation & source, const Windows::UI::Xaml::Controls::SemanticZoomLocation & destination) const
{
    check_hresult(static_cast<const ISemanticZoomInformation &>(static_cast<const D &>(*this))->abi_CompleteViewChangeTo(get(source), get(destination)));
}

template <typename D> bool impl_IBackClickEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const IBackClickEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_IBackClickEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const IBackClickEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> Windows::Foundation::Rect impl_ICandidateWindowBoundsChangedEventArgs<D>::Bounds() const
{
    Windows::Foundation::Rect value {};
    check_hresult(static_cast<const ICandidateWindowBoundsChangedEventArgs &>(static_cast<const D &>(*this))->get_Bounds(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewBaseHeaderItem impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupHeaderContainer() const
{
    Windows::UI::Xaml::Controls::ListViewBaseHeaderItem value { nullptr };
    check_hresult(static_cast<const IChoosingGroupHeaderContainerEventArgs &>(static_cast<const D &>(*this))->get_GroupHeaderContainer(put(value)));
    return value;
}

template <typename D> void impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupHeaderContainer(const Windows::UI::Xaml::Controls::ListViewBaseHeaderItem & value) const
{
    check_hresult(static_cast<const IChoosingGroupHeaderContainerEventArgs &>(static_cast<const D &>(*this))->put_GroupHeaderContainer(get(value)));
}

template <typename D> int32_t impl_IChoosingGroupHeaderContainerEventArgs<D>::GroupIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IChoosingGroupHeaderContainerEventArgs &>(static_cast<const D &>(*this))->get_GroupIndex(&value));
    return value;
}

template <typename D> Windows::IInspectable impl_IChoosingGroupHeaderContainerEventArgs<D>::Group() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IChoosingGroupHeaderContainerEventArgs &>(static_cast<const D &>(*this))->get_Group(put(value)));
    return value;
}

template <typename D> int32_t impl_IChoosingItemContainerEventArgs<D>::ItemIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->get_ItemIndex(&value));
    return value;
}

template <typename D> Windows::IInspectable impl_IChoosingItemContainerEventArgs<D>::Item() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->get_Item(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SelectorItem impl_IChoosingItemContainerEventArgs<D>::ItemContainer() const
{
    Windows::UI::Xaml::Controls::Primitives::SelectorItem value { nullptr };
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->get_ItemContainer(put(value)));
    return value;
}

template <typename D> void impl_IChoosingItemContainerEventArgs<D>::ItemContainer(const Windows::UI::Xaml::Controls::Primitives::SelectorItem & value) const
{
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->put_ItemContainer(get(value)));
}

template <typename D> bool impl_IChoosingItemContainerEventArgs<D>::IsContainerPrepared() const
{
    bool value {};
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->get_IsContainerPrepared(&value));
    return value;
}

template <typename D> void impl_IChoosingItemContainerEventArgs<D>::IsContainerPrepared(bool value) const
{
    check_hresult(static_cast<const IChoosingItemContainerEventArgs &>(static_cast<const D &>(*this))->put_IsContainerPrepared(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SelectorItem impl_IContainerContentChangingEventArgs<D>::ItemContainer() const
{
    Windows::UI::Xaml::Controls::Primitives::SelectorItem value { nullptr };
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_ItemContainer(put(value)));
    return value;
}

template <typename D> bool impl_IContainerContentChangingEventArgs<D>::InRecycleQueue() const
{
    bool value {};
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_InRecycleQueue(&value));
    return value;
}

template <typename D> int32_t impl_IContainerContentChangingEventArgs<D>::ItemIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_ItemIndex(&value));
    return value;
}

template <typename D> Windows::IInspectable impl_IContainerContentChangingEventArgs<D>::Item() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_Item(put(value)));
    return value;
}

template <typename D> uint32_t impl_IContainerContentChangingEventArgs<D>::Phase() const
{
    uint32_t value {};
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_Phase(&value));
    return value;
}

template <typename D> bool impl_IContainerContentChangingEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::RegisterUpdateCallback(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & callback) const
{
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->abi_RegisterUpdateCallback(get(callback)));
}

template <typename D> void impl_IContainerContentChangingEventArgs<D>::RegisterUpdateCallback(uint32_t callbackPhase, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & callback) const
{
    check_hresult(static_cast<const IContainerContentChangingEventArgs &>(static_cast<const D &>(*this))->abi_RegisterUpdateCallbackWithPhase(callbackPhase, get(callback)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelector<D>::SelectTemplate(const Windows::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(static_cast<const IDataTemplateSelector &>(static_cast<const D &>(*this))->abi_SelectTemplate(get(item), get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelectorOverrides<D>::SelectTemplateCore(const Windows::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(static_cast<const IDataTemplateSelectorOverrides &>(static_cast<const D &>(*this))->abi_SelectTemplateCore(get(item), get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IDataTemplateSelectorFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector instance { nullptr };
    check_hresult(static_cast<const IDataTemplateSelectorFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelector2<D>::SelectTemplate(const Windows::IInspectable & item) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(static_cast<const IDataTemplateSelector2 &>(static_cast<const D &>(*this))->abi_SelectTemplateForItem(get(item), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDataTemplateSelectorOverrides2<D>::SelectTemplateCore(const Windows::IInspectable & item) const
{
    Windows::UI::Xaml::DataTemplate returnValue { nullptr };
    check_hresult(static_cast<const IDataTemplateSelectorOverrides2 &>(static_cast<const D &>(*this))->abi_SelectTemplateForItemCore(get(item), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::IInspectable> impl_IDragItemsCompletedEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVectorView<Windows::IInspectable> value;
    check_hresult(static_cast<const IDragItemsCompletedEventArgs &>(static_cast<const D &>(*this))->get_Items(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackageOperation impl_IDragItemsCompletedEventArgs<D>::DropResult() const
{
    Windows::ApplicationModel::DataTransfer::DataPackageOperation value {};
    check_hresult(static_cast<const IDragItemsCompletedEventArgs &>(static_cast<const D &>(*this))->get_DropResult(&value));
    return value;
}

template <typename D> bool impl_IDragItemsStartingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const IDragItemsStartingEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IDragItemsStartingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const IDragItemsStartingEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IDragItemsStartingEventArgs<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IDragItemsStartingEventArgs &>(static_cast<const D &>(*this))->get_Items(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackage impl_IDragItemsStartingEventArgs<D>::Data() const
{
    Windows::ApplicationModel::DataTransfer::DataPackage value { nullptr };
    check_hresult(static_cast<const IDragItemsStartingEventArgs &>(static_cast<const D &>(*this))->get_Data(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsPanelTemplate impl_IGroupStyle<D>::Panel() const
{
    Windows::UI::Xaml::Controls::ItemsPanelTemplate value { nullptr };
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_Panel(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::Panel(const Windows::UI::Xaml::Controls::ItemsPanelTemplate & value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_Panel(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IGroupStyle<D>::ContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_ContainerStyle(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::ContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_ContainerStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IGroupStyle<D>::ContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value { nullptr };
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_ContainerStyleSelector(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::ContainerStyleSelector(const Windows::UI::Xaml::Controls::StyleSelector & value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_ContainerStyleSelector(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IGroupStyle<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IGroupStyle<D>::HeaderTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_HeaderTemplateSelector(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HeaderTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_HeaderTemplateSelector(get(value)));
}

template <typename D> bool impl_IGroupStyle<D>::HidesIfEmpty() const
{
    bool value {};
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->get_HidesIfEmpty(&value));
    return value;
}

template <typename D> void impl_IGroupStyle<D>::HidesIfEmpty(bool value) const
{
    check_hresult(static_cast<const IGroupStyle &>(static_cast<const D &>(*this))->put_HidesIfEmpty(value));
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupStyle instance { nullptr };
    check_hresult(static_cast<const IGroupStyleFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Style impl_IGroupStyle2<D>::HeaderContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IGroupStyle2 &>(static_cast<const D &>(*this))->get_HeaderContainerStyle(put(value)));
    return value;
}

template <typename D> void impl_IGroupStyle2<D>::HeaderContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IGroupStyle2 &>(static_cast<const D &>(*this))->put_HeaderContainerStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleSelector<D>::SelectGroupStyle(const Windows::IInspectable & group, uint32_t level) const
{
    Windows::UI::Xaml::Controls::GroupStyle returnValue { nullptr };
    check_hresult(static_cast<const IGroupStyleSelector &>(static_cast<const D &>(*this))->abi_SelectGroupStyle(get(group), level, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyle impl_IGroupStyleSelectorOverrides<D>::SelectGroupStyleCore(const Windows::IInspectable & group, uint32_t level) const
{
    Windows::UI::Xaml::Controls::GroupStyle returnValue { nullptr };
    check_hresult(static_cast<const IGroupStyleSelectorOverrides &>(static_cast<const D &>(*this))->abi_SelectGroupStyleCore(get(group), level, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyleSelector impl_IGroupStyleSelectorFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupStyleSelector instance { nullptr };
    check_hresult(static_cast<const IGroupStyleSelectorFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> event_token impl_IItemContainerGenerator<D>::ItemsChanged(const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->add_ItemsChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IItemContainerGenerator> impl_IItemContainerGenerator<D>::ItemsChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IItemContainerGenerator>(this, &ABI::Windows::UI::Xaml::Controls::IItemContainerGenerator::remove_ItemsChanged, ItemsChanged(value));
}

template <typename D> void impl_IItemContainerGenerator<D>::ItemsChanged(event_token token) const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->remove_ItemsChanged(token));
}

template <typename D> Windows::IInspectable impl_IItemContainerGenerator<D>::ItemFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::IInspectable returnValue;
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_ItemFromContainer(get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::ContainerFromItem(const Windows::IInspectable & item) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_ContainerFromItem(get(item), put(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerGenerator<D>::IndexFromContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    int32_t returnValue {};
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_IndexFromContainer(get(container), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::ContainerFromIndex(int32_t index) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_ContainerFromIndex(index, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IItemContainerGenerator<D>::GetItemContainerGeneratorForPanel(const Windows::UI::Xaml::Controls::Panel & panel) const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_GetItemContainerGeneratorForPanel(get(panel), put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::StartAt(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, Windows::UI::Xaml::Controls::Primitives::GeneratorDirection direction, bool allowStartAtRealizedItem) const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_StartAt(get(position), direction, allowStartAtRealizedItem));
}

template <typename D> void impl_IItemContainerGenerator<D>::Stop() const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_Stop());
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemContainerGenerator<D>::GenerateNext(bool & isNewlyRealized) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_GenerateNext(&isNewlyRealized, put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::PrepareItemContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_PrepareItemContainer(get(container)));
}

template <typename D> void impl_IItemContainerGenerator<D>::RemoveAll() const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_RemoveAll());
}

template <typename D> void impl_IItemContainerGenerator<D>::Remove(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, int32_t count) const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_Remove(get(position), count));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GeneratorPosition impl_IItemContainerGenerator<D>::GeneratorPositionFromIndex(int32_t itemIndex) const
{
    Windows::UI::Xaml::Controls::Primitives::GeneratorPosition returnValue {};
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_GeneratorPositionFromIndex(itemIndex, put(returnValue)));
    return returnValue;
}

template <typename D> int32_t impl_IItemContainerGenerator<D>::IndexFromGeneratorPosition(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position) const
{
    int32_t returnValue {};
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_IndexFromGeneratorPosition(get(position), &returnValue));
    return returnValue;
}

template <typename D> void impl_IItemContainerGenerator<D>::Recycle(const Windows::UI::Xaml::Controls::Primitives::GeneratorPosition & position, int32_t count) const
{
    check_hresult(static_cast<const IItemContainerGenerator &>(static_cast<const D &>(*this))->abi_Recycle(get(position), count));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsHelperStatics<D>::DropoutOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsHelperStatics &>(static_cast<const D &>(*this))->get_DropoutOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::IReference<int32_t> impl_IMediaTransportControlsHelperStatics<D>::GetDropoutOrder(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::Foundation::IReference<int32_t> value;
    check_hresult(static_cast<const IMediaTransportControlsHelperStatics &>(static_cast<const D &>(*this))->abi_GetDropoutOrder(get(element), put(value)));
    return value;
}

template <typename D> void impl_IMediaTransportControlsHelperStatics<D>::SetDropoutOrder(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IReference<int32_t> & value) const
{
    check_hresult(static_cast<const IMediaTransportControlsHelperStatics &>(static_cast<const D &>(*this))->abi_SetDropoutOrder(get(element), get(value)));
}

template <typename D> hstring impl_INotifyEventArgs<D>::Value() const
{
    hstring value;
    check_hresult(static_cast<const INotifyEventArgs &>(static_cast<const D &>(*this))->get_Value(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_INotifyEventArgs2<D>::CallingUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const INotifyEventArgs2 &>(static_cast<const D &>(*this))->get_CallingUri(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_ISemanticZoomLocation<D>::Item() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ISemanticZoomLocation &>(static_cast<const D &>(*this))->get_Item(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomLocation<D>::Item(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const ISemanticZoomLocation &>(static_cast<const D &>(*this))->put_Item(get(value)));
}

template <typename D> Windows::Foundation::Rect impl_ISemanticZoomLocation<D>::Bounds() const
{
    Windows::Foundation::Rect value {};
    check_hresult(static_cast<const ISemanticZoomLocation &>(static_cast<const D &>(*this))->get_Bounds(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomLocation<D>::Bounds(const Windows::Foundation::Rect & value) const
{
    check_hresult(static_cast<const ISemanticZoomLocation &>(static_cast<const D &>(*this))->put_Bounds(get(value)));
}

template <typename D> bool impl_ISemanticZoomViewChangedEventArgs<D>::IsSourceZoomedInView() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->get_IsSourceZoomedInView(&value));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::IsSourceZoomedInView(bool value) const
{
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->put_IsSourceZoomedInView(value));
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoomLocation impl_ISemanticZoomViewChangedEventArgs<D>::SourceItem() const
{
    Windows::UI::Xaml::Controls::SemanticZoomLocation value { nullptr };
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->get_SourceItem(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::SourceItem(const Windows::UI::Xaml::Controls::SemanticZoomLocation & value) const
{
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->put_SourceItem(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::SemanticZoomLocation impl_ISemanticZoomViewChangedEventArgs<D>::DestinationItem() const
{
    Windows::UI::Xaml::Controls::SemanticZoomLocation value { nullptr };
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->get_DestinationItem(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoomViewChangedEventArgs<D>::DestinationItem(const Windows::UI::Xaml::Controls::SemanticZoomLocation & value) const
{
    check_hresult(static_cast<const ISemanticZoomViewChangedEventArgs &>(static_cast<const D &>(*this))->put_DestinationItem(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IStyleSelector<D>::SelectStyle(const Windows::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Style returnValue { nullptr };
    check_hresult(static_cast<const IStyleSelector &>(static_cast<const D &>(*this))->abi_SelectStyle(get(item), get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Style impl_IStyleSelectorOverrides<D>::SelectStyleCore(const Windows::IInspectable & item, const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Style returnValue { nullptr };
    check_hresult(static_cast<const IStyleSelectorOverrides &>(static_cast<const D &>(*this))->abi_SelectStyleCore(get(item), get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IStyleSelectorFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::StyleSelector instance { nullptr };
    check_hresult(static_cast<const IStyleSelectorFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> int32_t impl_ITextCompositionChangedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionChangedEventArgs &>(static_cast<const D &>(*this))->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionChangedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionChangedEventArgs &>(static_cast<const D &>(*this))->get_Length(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionEndedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionEndedEventArgs &>(static_cast<const D &>(*this))->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionEndedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionEndedEventArgs &>(static_cast<const D &>(*this))->get_Length(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionStartedEventArgs<D>::StartIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionStartedEventArgs &>(static_cast<const D &>(*this))->get_StartIndex(&value));
    return value;
}

template <typename D> int32_t impl_ITextCompositionStartedEventArgs<D>::Length() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextCompositionStartedEventArgs &>(static_cast<const D &>(*this))->get_Length(&value));
    return value;
}

template <typename D> bool impl_ITextControlPasteEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const ITextControlPasteEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_ITextControlPasteEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const ITextControlPasteEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::PlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->get_PlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::PlacementMode impl_IToolTipServiceStatics<D>::GetPlacement(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::Primitives::PlacementMode value {};
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_GetPlacement(get(element), &value));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetPlacement(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const
{
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_SetPlacement(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::PlacementTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->get_PlacementTargetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IToolTipServiceStatics<D>::GetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_GetPlacementTarget(get(element), put(value)));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element, const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_SetPlacementTarget(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipServiceStatics<D>::ToolTipProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->get_ToolTipProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IToolTipServiceStatics<D>::GetToolTip(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_GetToolTip(get(element), put(value)));
    return value;
}

template <typename D> void impl_IToolTipServiceStatics<D>::SetToolTip(const Windows::UI::Xaml::DependencyObject & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IToolTipServiceStatics &>(static_cast<const D &>(*this))->abi_SetToolTip(get(element), get(value)));
}

template <typename D> void impl_IUIElementCollection<D>::Move(uint32_t oldIndex, uint32_t newIndex) const
{
    check_hresult(static_cast<const IUIElementCollection &>(static_cast<const D &>(*this))->abi_Move(oldIndex, newIndex));
}

template <typename D> Windows::IInspectable impl_ICleanUpVirtualizedItemEventArgs<D>::Value() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ICleanUpVirtualizedItemEventArgs &>(static_cast<const D &>(*this))->get_Value(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_ICleanUpVirtualizedItemEventArgs<D>::UIElement() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const ICleanUpVirtualizedItemEventArgs &>(static_cast<const D &>(*this))->get_UIElement(put(value)));
    return value;
}

template <typename D> bool impl_ICleanUpVirtualizedItemEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const ICleanUpVirtualizedItemEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_ICleanUpVirtualizedItemEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const ICleanUpVirtualizedItemEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::GridLength impl_IColumnDefinition<D>::Width() const
{
    Windows::UI::Xaml::GridLength value {};
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->get_Width(put(value)));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::Width(const Windows::UI::Xaml::GridLength & value) const
{
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->put_Width(get(value)));
}

template <typename D> double impl_IColumnDefinition<D>::MaxWidth() const
{
    double value {};
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->get_MaxWidth(&value));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::MaxWidth(double value) const
{
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->put_MaxWidth(value));
}

template <typename D> double impl_IColumnDefinition<D>::MinWidth() const
{
    double value {};
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->get_MinWidth(&value));
    return value;
}

template <typename D> void impl_IColumnDefinition<D>::MinWidth(double value) const
{
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->put_MinWidth(value));
}

template <typename D> double impl_IColumnDefinition<D>::ActualWidth() const
{
    double value {};
    check_hresult(static_cast<const IColumnDefinition &>(static_cast<const D &>(*this))->get_ActualWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::WidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IColumnDefinitionStatics &>(static_cast<const D &>(*this))->get_WidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::MaxWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IColumnDefinitionStatics &>(static_cast<const D &>(*this))->get_MaxWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IColumnDefinitionStatics<D>::MinWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IColumnDefinitionStatics &>(static_cast<const D &>(*this))->get_MinWidthProperty(put(value)));
    return value;
}

template <typename D> bool impl_IContextMenuEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const IContextMenuEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_IContextMenuEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const IContextMenuEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> double impl_IContextMenuEventArgs<D>::CursorLeft() const
{
    double value {};
    check_hresult(static_cast<const IContextMenuEventArgs &>(static_cast<const D &>(*this))->get_CursorLeft(&value));
    return value;
}

template <typename D> double impl_IContextMenuEventArgs<D>::CursorTop() const
{
    double value {};
    check_hresult(static_cast<const IContextMenuEventArgs &>(static_cast<const D &>(*this))->get_CursorTop(&value));
    return value;
}

template <typename D> Windows::IInspectable impl_IItemClickEventArgs<D>::ClickedItem() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IItemClickEventArgs &>(static_cast<const D &>(*this))->get_ClickedItem(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::GridLength impl_IRowDefinition<D>::Height() const
{
    Windows::UI::Xaml::GridLength value {};
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->get_Height(put(value)));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::Height(const Windows::UI::Xaml::GridLength & value) const
{
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->put_Height(get(value)));
}

template <typename D> double impl_IRowDefinition<D>::MaxHeight() const
{
    double value {};
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->get_MaxHeight(&value));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::MaxHeight(double value) const
{
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->put_MaxHeight(value));
}

template <typename D> double impl_IRowDefinition<D>::MinHeight() const
{
    double value {};
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->get_MinHeight(&value));
    return value;
}

template <typename D> void impl_IRowDefinition<D>::MinHeight(double value) const
{
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->put_MinHeight(value));
}

template <typename D> double impl_IRowDefinition<D>::ActualHeight() const
{
    double value {};
    check_hresult(static_cast<const IRowDefinition &>(static_cast<const D &>(*this))->get_ActualHeight(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::HeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRowDefinitionStatics &>(static_cast<const D &>(*this))->get_HeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::MaxHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRowDefinitionStatics &>(static_cast<const D &>(*this))->get_MaxHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRowDefinitionStatics<D>::MinHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRowDefinitionStatics &>(static_cast<const D &>(*this))->get_MinHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_ISelectionChangedEventArgs<D>::AddedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const ISelectionChangedEventArgs &>(static_cast<const D &>(*this))->get_AddedItems(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_ISelectionChangedEventArgs<D>::RemovedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const ISelectionChangedEventArgs &>(static_cast<const D &>(*this))->get_RemovedItems(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SelectionChangedEventArgs impl_ISelectionChangedEventArgsFactory<D>::CreateInstanceWithRemovedItemsAndAddedItems(const Windows::Foundation::Collections::IVector<Windows::IInspectable> & removedItems, const Windows::Foundation::Collections::IVector<Windows::IInspectable> & addedItems, const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SelectionChangedEventArgs instance { nullptr };
    check_hresult(static_cast<const ISelectionChangedEventArgsFactory &>(static_cast<const D &>(*this))->abi_CreateInstanceWithRemovedItemsAndAddedItems(get(removedItems), get(addedItems), get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IBorder<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IBorder<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IBorder<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_Background(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_Background(get(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IBorder<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_CornerRadius(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_CornerRadius(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IBorder<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IBorder<D>::Child() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_Child(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::Child(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_Child(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IBorder<D>::ChildTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->get_ChildTransitions(put(value)));
    return value;
}

template <typename D> void impl_IBorder<D>::ChildTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IBorder &>(static_cast<const D &>(*this))->put_ChildTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_BackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_CornerRadiusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBorderStatics<D>::ChildTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBorderStatics &>(static_cast<const D &>(*this))->get_ChildTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::Media::Capture::MediaCapture impl_ICaptureElement<D>::Source() const
{
    Windows::Media::Capture::MediaCapture value { nullptr };
    check_hresult(static_cast<const ICaptureElement &>(static_cast<const D &>(*this))->get_Source(put(value)));
    return value;
}

template <typename D> void impl_ICaptureElement<D>::Source(const Windows::Media::Capture::MediaCapture & value) const
{
    check_hresult(static_cast<const ICaptureElement &>(static_cast<const D &>(*this))->put_Source(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_ICaptureElement<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const ICaptureElement &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_ICaptureElement<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const ICaptureElement &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICaptureElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICaptureElementStatics &>(static_cast<const D &>(*this))->get_SourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICaptureElementStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICaptureElementStatics &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IContentPresenter<D>::Content() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::Content(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentPresenter<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_ContentTemplate(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_ContentTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IContentPresenter<D>::ContentTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_ContentTemplateSelector(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_ContentTemplateSelector(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IContentPresenter<D>::ContentTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_ContentTransitions(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::ContentTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_ContentTransitions(get(value)));
}

template <typename D> double impl_IContentPresenter<D>::FontSize() const
{
    double value {};
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontSize(double value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IContentPresenter<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_FontFamily(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_FontFamily(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IContentPresenter<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_FontWeight(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_FontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IContentPresenter<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IContentPresenter<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_FontStretch(value));
}

template <typename D> int32_t impl_IContentPresenter<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->get_Foreground(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IContentPresenter &>(static_cast<const D &>(*this))->put_Foreground(get(value)));
}

template <typename D> void impl_IContentPresenterOverrides<D>::OnContentTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldContentTemplate, const Windows::UI::Xaml::DataTemplate & newContentTemplate) const
{
    check_hresult(static_cast<const IContentPresenterOverrides &>(static_cast<const D &>(*this))->abi_OnContentTemplateChanged(get(oldContentTemplate), get(newContentTemplate)));
}

template <typename D> void impl_IContentPresenterOverrides<D>::OnContentTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldContentTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newContentTemplateSelector) const
{
    check_hresult(static_cast<const IContentPresenterOverrides &>(static_cast<const D &>(*this))->abi_OnContentTemplateSelectorChanged(get(oldContentTemplateSelector), get(newContentTemplateSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_ContentTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_ContentTemplateSelectorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ContentTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_ContentTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_FontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_FontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_FontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_FontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_FontStretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_CharacterSpacingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics &>(static_cast<const D &>(*this))->get_ForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentPresenter impl_IContentPresenterFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentPresenter instance { nullptr };
    check_hresult(static_cast<const IContentPresenterFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_IContentPresenter2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(static_cast<const IContentPresenter2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(static_cast<const IContentPresenter2 &>(static_cast<const D &>(*this))->put_OpticalMarginAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_IContentPresenter2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(static_cast<const IContentPresenter2 &>(static_cast<const D &>(*this))->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_IContentPresenter2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(static_cast<const IContentPresenter2 &>(static_cast<const D &>(*this))->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics2 &>(static_cast<const D &>(*this))->get_TextLineBoundsProperty(put(value)));
    return value;
}

template <typename D> bool impl_IContentPresenter3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IContentPresenter3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IContentPresenter3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(static_cast<const IContentPresenter3 &>(static_cast<const D &>(*this))->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IContentPresenter4<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_TextWrapping(value));
}

template <typename D> int32_t impl_IContentPresenter4<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::MaxLines(int32_t value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_IContentPresenter4<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_LineStackingStrategy(value));
}

template <typename D> double impl_IContentPresenter4<D>::LineHeight() const
{
    double value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::LineHeight(double value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter4<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IContentPresenter4<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IContentPresenter4<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_CornerRadius(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_CornerRadius(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IContentPresenter4<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IContentPresenter4<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_Background(put(value)));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_Background(get(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IContentPresenter4<D>::HorizontalContentAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_HorizontalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_HorizontalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IContentPresenter4<D>::VerticalContentAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->get_VerticalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IContentPresenter4<D>::VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const IContentPresenter4 &>(static_cast<const D &>(*this))->put_VerticalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_TextWrappingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_MaxLinesProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_LineStackingStrategyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_LineHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_CornerRadiusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_BackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::HorizontalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_HorizontalContentAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentPresenterStatics4<D>::VerticalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentPresenterStatics4 &>(static_cast<const D &>(*this))->get_VerticalContentAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IImage<D>::Source() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->get_Source(put(value)));
    return value;
}

template <typename D> void impl_IImage<D>::Source(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->put_Source(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IImage<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IImage<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IImage<D>::NineGrid() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->get_NineGrid(put(value)));
    return value;
}

template <typename D> void impl_IImage<D>::NineGrid(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->put_NineGrid(get(value)));
}

template <typename D> Windows::Media::PlayTo::PlayToSource impl_IImage<D>::PlayToSource() const
{
    Windows::Media::PlayTo::PlayToSource value { nullptr };
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->get_PlayToSource(put(value)));
    return value;
}

template <typename D> event_token impl_IImage<D>::ImageFailed(const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->add_ImageFailed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IImage> impl_IImage<D>::ImageFailed(auto_revoke_t, const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IImage>(this, &ABI::Windows::UI::Xaml::Controls::IImage::remove_ImageFailed, ImageFailed(value));
}

template <typename D> void impl_IImage<D>::ImageFailed(event_token token) const
{
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->remove_ImageFailed(token));
}

template <typename D> event_token impl_IImage<D>::ImageOpened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->add_ImageOpened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IImage> impl_IImage<D>::ImageOpened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IImage>(this, &ABI::Windows::UI::Xaml::Controls::IImage::remove_ImageOpened, ImageOpened(value));
}

template <typename D> void impl_IImage<D>::ImageOpened(event_token token) const
{
    check_hresult(static_cast<const IImage &>(static_cast<const D &>(*this))->remove_ImageOpened(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IImageStatics &>(static_cast<const D &>(*this))->get_SourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IImageStatics &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::NineGridProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IImageStatics &>(static_cast<const D &>(*this))->get_NineGridProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IImageStatics<D>::PlayToSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IImageStatics &>(static_cast<const D &>(*this))->get_PlayToSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::Media::Casting::CastingSource impl_IImage2<D>::GetAsCastingSource() const
{
    Windows::Media::Casting::CastingSource returnValue { nullptr };
    check_hresult(static_cast<const IImage2 &>(static_cast<const D &>(*this))->abi_GetAsCastingSource(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Composition::CompositionBrush impl_IImage3<D>::GetAlphaMask() const
{
    Windows::UI::Composition::CompositionBrush returnValue { nullptr };
    check_hresult(static_cast<const IImage3 &>(static_cast<const D &>(*this))->abi_GetAlphaMask(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::IInspectable impl_IItemsPresenter<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsPresenter<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsPresenter<D>::HeaderTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->get_HeaderTransitions(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::HeaderTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->put_HeaderTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsPresenter<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IItemsPresenter &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::HeaderTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics &>(static_cast<const D &>(*this))->get_HeaderTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IItemsPresenter2<D>::Footer() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->get_Footer(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::Footer(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->put_Footer(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsPresenter2<D>::FooterTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->get_FooterTemplate(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::FooterTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->put_FooterTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsPresenter2<D>::FooterTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->get_FooterTransitions(put(value)));
    return value;
}

template <typename D> void impl_IItemsPresenter2<D>::FooterTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IItemsPresenter2 &>(static_cast<const D &>(*this))->put_FooterTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics2 &>(static_cast<const D &>(*this))->get_FooterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics2 &>(static_cast<const D &>(*this))->get_FooterTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsPresenterStatics2<D>::FooterTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsPresenterStatics2 &>(static_cast<const D &>(*this))->get_FooterTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::UIElementCollection impl_IPanel<D>::Children() const
{
    Windows::UI::Xaml::Controls::UIElementCollection value { nullptr };
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->get_Children(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IPanel<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->get_Background(put(value)));
    return value;
}

template <typename D> void impl_IPanel<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->put_Background(get(value)));
}

template <typename D> bool impl_IPanel<D>::IsItemsHost() const
{
    bool value {};
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->get_IsItemsHost(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IPanel<D>::ChildrenTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->get_ChildrenTransitions(put(value)));
    return value;
}

template <typename D> void impl_IPanel<D>::ChildrenTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IPanel &>(static_cast<const D &>(*this))->put_ChildrenTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPanelStatics &>(static_cast<const D &>(*this))->get_BackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::IsItemsHostProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPanelStatics &>(static_cast<const D &>(*this))->get_IsItemsHostProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPanelStatics<D>::ChildrenTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPanelStatics &>(static_cast<const D &>(*this))->get_ChildrenTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Panel impl_IPanelFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Panel instance { nullptr };
    check_hresult(static_cast<const IPanelFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> double impl_IRichTextBlock<D>::FontSize() const
{
    double value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontSize(double value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IRichTextBlock<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_FontFamily(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_FontFamily(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IRichTextBlock<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_FontWeight(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_FontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IRichTextBlock<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IRichTextBlock<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_FontStretch(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IRichTextBlock<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_Foreground(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_Foreground(get(value)));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IRichTextBlock<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_TextWrapping(value));
}

template <typename D> Windows::UI::Xaml::TextTrimming impl_IRichTextBlock<D>::TextTrimming() const
{
    Windows::UI::Xaml::TextTrimming value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_TextTrimming(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextTrimming(Windows::UI::Xaml::TextTrimming value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_TextTrimming(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_IRichTextBlock<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::Documents::BlockCollection impl_IRichTextBlock<D>::Blocks() const
{
    Windows::UI::Xaml::Documents::BlockCollection value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_Blocks(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRichTextBlock<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> double impl_IRichTextBlock<D>::LineHeight() const
{
    double value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::LineHeight(double value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_IRichTextBlock<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_LineStackingStrategy(value));
}

template <typename D> int32_t impl_IRichTextBlock<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlockOverflow impl_IRichTextBlock<D>::OverflowContentTarget() const
{
    Windows::UI::Xaml::Controls::RichTextBlockOverflow value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_OverflowContentTarget(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::OverflowContentTarget(const Windows::UI::Xaml::Controls::RichTextBlockOverflow & value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_OverflowContentTarget(get(value)));
}

template <typename D> bool impl_IRichTextBlock<D>::IsTextSelectionEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_IsTextSelectionEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::IsTextSelectionEnabled(bool value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_IsTextSelectionEnabled(value));
}

template <typename D> bool impl_IRichTextBlock<D>::HasOverflowContent() const
{
    bool value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_HasOverflowContent(&value));
    return value;
}

template <typename D> hstring impl_IRichTextBlock<D>::SelectedText() const
{
    hstring value;
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_SelectedText(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_ContentStart(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_ContentEnd(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::SelectionStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_SelectionStart(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::SelectionEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_SelectionEnd(put(value)));
    return value;
}

template <typename D> double impl_IRichTextBlock<D>::BaselineOffset() const
{
    double value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_BaselineOffset(&value));
    return value;
}

template <typename D> event_token impl_IRichTextBlock<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->add_SelectionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichTextBlock> impl_IRichTextBlock<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichTextBlock>(this, &ABI::Windows::UI::Xaml::Controls::IRichTextBlock::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IRichTextBlock<D>::SelectionChanged(event_token token) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IRichTextBlock<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->add_ContextMenuOpening(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichTextBlock> impl_IRichTextBlock<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichTextBlock>(this, &ABI::Windows::UI::Xaml::Controls::IRichTextBlock::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IRichTextBlock<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->remove_ContextMenuOpening(token));
}

template <typename D> void impl_IRichTextBlock<D>::SelectAll() const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> void impl_IRichTextBlock<D>::Select(const Windows::UI::Xaml::Documents::TextPointer & start, const Windows::UI::Xaml::Documents::TextPointer & end) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->abi_Select(get(start), get(end)));
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlock<D>::GetPositionFromPoint(const Windows::Foundation::Point & point) const
{
    Windows::UI::Xaml::Documents::TextPointer returnValue { nullptr };
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->abi_GetPositionFromPoint(get(point), put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IRichTextBlock<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> double impl_IRichTextBlock<D>::TextIndent() const
{
    double value {};
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->get_TextIndent(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock<D>::TextIndent(double value) const
{
    check_hresult(static_cast<const IRichTextBlock &>(static_cast<const D &>(*this))->put_TextIndent(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_FontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_FontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_FontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_FontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_FontStretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_ForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_TextWrappingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextTrimmingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_TextTrimmingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_TextAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_LineHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_LineStackingStrategyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_CharacterSpacingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::OverflowContentTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_OverflowContentTargetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::IsTextSelectionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_IsTextSelectionEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::HasOverflowContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_HasOverflowContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::SelectedTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_SelectedTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics<D>::TextIndentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics &>(static_cast<const D &>(*this))->get_TextIndentProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IRichTextBlock2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::MaxLines(int32_t value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_IRichTextBlock2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IRichTextBlock2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColor(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_SelectionHighlightColor(get(value)));
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_IRichTextBlock2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_OpticalMarginAlignment(value));
}

template <typename D> bool impl_IRichTextBlock2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_IsColorFontEnabled(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IRichTextBlock2<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock2<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(static_cast<const IRichTextBlock2 &>(static_cast<const D &>(*this))->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_MaxLinesProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_TextLineBoundsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics2<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics2 &>(static_cast<const D &>(*this))->get_TextReadingOrderProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRichTextBlock3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichTextBlock3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IRichTextBlock3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(static_cast<const IRichTextBlock3 &>(static_cast<const D &>(*this))->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockStatics3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlockOverflow impl_IRichTextBlockOverflow<D>::OverflowContentTarget() const
{
    Windows::UI::Xaml::Controls::RichTextBlockOverflow value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_OverflowContentTarget(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow<D>::OverflowContentTarget(const Windows::UI::Xaml::Controls::RichTextBlockOverflow & value) const
{
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->put_OverflowContentTarget(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRichTextBlockOverflow<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::RichTextBlock impl_IRichTextBlockOverflow<D>::ContentSource() const
{
    Windows::UI::Xaml::Controls::RichTextBlock value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_ContentSource(put(value)));
    return value;
}

template <typename D> bool impl_IRichTextBlockOverflow<D>::HasOverflowContent() const
{
    bool value {};
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_HasOverflowContent(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_ContentStart(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_ContentEnd(put(value)));
    return value;
}

template <typename D> double impl_IRichTextBlockOverflow<D>::BaselineOffset() const
{
    double value {};
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->get_BaselineOffset(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_IRichTextBlockOverflow<D>::GetPositionFromPoint(const Windows::Foundation::Point & point) const
{
    Windows::UI::Xaml::Documents::TextPointer returnValue { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->abi_GetPositionFromPoint(get(point), put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IRichTextBlockOverflow<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(static_cast<const IRichTextBlockOverflow &>(static_cast<const D &>(*this))->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::OverflowContentTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflowStatics &>(static_cast<const D &>(*this))->get_OverflowContentTargetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflowStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics<D>::HasOverflowContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflowStatics &>(static_cast<const D &>(*this))->get_HasOverflowContentProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IRichTextBlockOverflow2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(static_cast<const IRichTextBlockOverflow2 &>(static_cast<const D &>(*this))->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_IRichTextBlockOverflow2<D>::MaxLines(int32_t value) const
{
    check_hresult(static_cast<const IRichTextBlockOverflow2 &>(static_cast<const D &>(*this))->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichTextBlockOverflowStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichTextBlockOverflowStatics2 &>(static_cast<const D &>(*this))->get_MaxLinesProperty(put(value)));
    return value;
}

template <typename D> double impl_ITextBlock<D>::FontSize() const
{
    double value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_FontSize(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontSize(double value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ITextBlock<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_FontFamily(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_FontFamily(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_ITextBlock<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_FontWeight(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_FontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_ITextBlock<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_ITextBlock<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_FontStretch(value));
}

template <typename D> int32_t impl_ITextBlock<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ITextBlock<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_Foreground(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_Foreground(get(value)));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_ITextBlock<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_TextWrapping(value));
}

template <typename D> Windows::UI::Xaml::TextTrimming impl_ITextBlock<D>::TextTrimming() const
{
    Windows::UI::Xaml::TextTrimming value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_TextTrimming(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextTrimming(Windows::UI::Xaml::TextTrimming value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_TextTrimming(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_ITextBlock<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_TextAlignment(value));
}

template <typename D> hstring impl_ITextBlock<D>::Text() const
{
    hstring value;
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_Text(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Text(hstring_ref value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_Text(get(value)));
}

template <typename D> Windows::UI::Xaml::Documents::InlineCollection impl_ITextBlock<D>::Inlines() const
{
    Windows::UI::Xaml::Documents::InlineCollection value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_Inlines(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_ITextBlock<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> double impl_ITextBlock<D>::LineHeight() const
{
    double value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_LineHeight(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::LineHeight(double value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_LineHeight(value));
}

template <typename D> Windows::UI::Xaml::LineStackingStrategy impl_ITextBlock<D>::LineStackingStrategy() const
{
    Windows::UI::Xaml::LineStackingStrategy value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_LineStackingStrategy(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::LineStackingStrategy(Windows::UI::Xaml::LineStackingStrategy value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_LineStackingStrategy(value));
}

template <typename D> bool impl_ITextBlock<D>::IsTextSelectionEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_IsTextSelectionEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock<D>::IsTextSelectionEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->put_IsTextSelectionEnabled(value));
}

template <typename D> hstring impl_ITextBlock<D>::SelectedText() const
{
    hstring value;
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_SelectedText(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::ContentStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_ContentStart(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::ContentEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_ContentEnd(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::SelectionStart() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_SelectionStart(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Documents::TextPointer impl_ITextBlock<D>::SelectionEnd() const
{
    Windows::UI::Xaml::Documents::TextPointer value { nullptr };
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_SelectionEnd(put(value)));
    return value;
}

template <typename D> double impl_ITextBlock<D>::BaselineOffset() const
{
    double value {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->get_BaselineOffset(&value));
    return value;
}

template <typename D> event_token impl_ITextBlock<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->add_SelectionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBlock> impl_ITextBlock<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBlock>(this, &ABI::Windows::UI::Xaml::Controls::ITextBlock::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_ITextBlock<D>::SelectionChanged(event_token token) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->remove_SelectionChanged(token));
}

template <typename D> event_token impl_ITextBlock<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->add_ContextMenuOpening(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBlock> impl_ITextBlock<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBlock>(this, &ABI::Windows::UI::Xaml::Controls::ITextBlock::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_ITextBlock<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->remove_ContextMenuOpening(token));
}

template <typename D> void impl_ITextBlock<D>::SelectAll() const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> void impl_ITextBlock<D>::Select(const Windows::UI::Xaml::Documents::TextPointer & start, const Windows::UI::Xaml::Documents::TextPointer & end) const
{
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->abi_Select(get(start), get(end)));
}

template <typename D> bool impl_ITextBlock<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(static_cast<const ITextBlock &>(static_cast<const D &>(*this))->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_FontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_FontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_FontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_FontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_FontStretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_CharacterSpacingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_ForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_TextWrappingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextTrimmingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_TextTrimmingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_TextAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_TextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::LineHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_LineHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::LineStackingStrategyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_LineStackingStrategyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::IsTextSelectionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_IsTextSelectionEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics<D>::SelectedTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics &>(static_cast<const D &>(*this))->get_SelectedTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_ITextBlock2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColor(put(value)));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_SelectionHighlightColor(get(value)));
}

template <typename D> int32_t impl_ITextBlock2<D>::MaxLines() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_MaxLines(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::MaxLines(int32_t value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_MaxLines(value));
}

template <typename D> Windows::UI::Xaml::TextLineBounds impl_ITextBlock2<D>::TextLineBounds() const
{
    Windows::UI::Xaml::TextLineBounds value {};
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_TextLineBounds(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::TextLineBounds(Windows::UI::Xaml::TextLineBounds value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_TextLineBounds(value));
}

template <typename D> Windows::UI::Xaml::OpticalMarginAlignment impl_ITextBlock2<D>::OpticalMarginAlignment() const
{
    Windows::UI::Xaml::OpticalMarginAlignment value {};
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::OpticalMarginAlignment(Windows::UI::Xaml::OpticalMarginAlignment value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_OpticalMarginAlignment(value));
}

template <typename D> bool impl_ITextBlock2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_IsColorFontEnabled(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_ITextBlock2<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_ITextBlock2<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(static_cast<const ITextBlock2 &>(static_cast<const D &>(*this))->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::MaxLinesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_MaxLinesProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::TextLineBoundsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_TextLineBoundsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::OpticalMarginAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_OpticalMarginAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics2<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics2 &>(static_cast<const D &>(*this))->get_TextReadingOrderProperty(put(value)));
    return value;
}

template <typename D> bool impl_ITextBlock3<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBlock3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBlock3<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBlock3 &>(static_cast<const D &>(*this))->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBlockStatics3<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBlockStatics3 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Composition::CompositionBrush impl_ITextBlock4<D>::GetAlphaMask() const
{
    Windows::UI::Composition::CompositionBrush returnValue { nullptr };
    check_hresult(static_cast<const ITextBlock4 &>(static_cast<const D &>(*this))->abi_GetAlphaMask(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IViewbox<D>::Child() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->get_Child(put(value)));
    return value;
}

template <typename D> void impl_IViewbox<D>::Child(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->put_Child(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IViewbox<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IViewbox<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> Windows::UI::Xaml::Controls::StretchDirection impl_IViewbox<D>::StretchDirection() const
{
    Windows::UI::Xaml::Controls::StretchDirection value {};
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->get_StretchDirection(&value));
    return value;
}

template <typename D> void impl_IViewbox<D>::StretchDirection(Windows::UI::Xaml::Controls::StretchDirection value) const
{
    check_hresult(static_cast<const IViewbox &>(static_cast<const D &>(*this))->put_StretchDirection(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IViewboxStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IViewboxStatics &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IViewboxStatics<D>::StretchDirectionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IViewboxStatics &>(static_cast<const D &>(*this))->get_StretchDirectionProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::LeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->get_LeftProperty(put(value)));
    return value;
}

template <typename D> double impl_ICanvasStatics<D>::GetLeft(const Windows::UI::Xaml::UIElement & element) const
{
    double length {};
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_GetLeft(get(element), &length));
    return length;
}

template <typename D> void impl_ICanvasStatics<D>::SetLeft(const Windows::UI::Xaml::UIElement & element, double length) const
{
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_SetLeft(get(element), length));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::TopProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->get_TopProperty(put(value)));
    return value;
}

template <typename D> double impl_ICanvasStatics<D>::GetTop(const Windows::UI::Xaml::UIElement & element) const
{
    double length {};
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_GetTop(get(element), &length));
    return length;
}

template <typename D> void impl_ICanvasStatics<D>::SetTop(const Windows::UI::Xaml::UIElement & element, double length) const
{
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_SetTop(get(element), length));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICanvasStatics<D>::ZIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->get_ZIndexProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_ICanvasStatics<D>::GetZIndex(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_GetZIndex(get(element), &value));
    return value;
}

template <typename D> void impl_ICanvasStatics<D>::SetZIndex(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(static_cast<const ICanvasStatics &>(static_cast<const D &>(*this))->abi_SetZIndex(get(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Canvas impl_ICanvasFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Canvas instance { nullptr };
    check_hresult(static_cast<const ICanvasFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IContentControl<D>::Content() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::Content(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentControl<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->get_ContentTemplate(put(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->put_ContentTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IContentControl<D>::ContentTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->get_ContentTemplateSelector(put(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->put_ContentTemplateSelector(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IContentControl<D>::ContentTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->get_ContentTransitions(put(value)));
    return value;
}

template <typename D> void impl_IContentControl<D>::ContentTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IContentControl &>(static_cast<const D &>(*this))->put_ContentTransitions(get(value)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentChanged(const Windows::IInspectable & oldContent, const Windows::IInspectable & newContent) const
{
    check_hresult(static_cast<const IContentControlOverrides &>(static_cast<const D &>(*this))->abi_OnContentChanged(get(oldContent), get(newContent)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldContentTemplate, const Windows::UI::Xaml::DataTemplate & newContentTemplate) const
{
    check_hresult(static_cast<const IContentControlOverrides &>(static_cast<const D &>(*this))->abi_OnContentTemplateChanged(get(oldContentTemplate), get(newContentTemplate)));
}

template <typename D> void impl_IContentControlOverrides<D>::OnContentTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldContentTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newContentTemplateSelector) const
{
    check_hresult(static_cast<const IContentControlOverrides &>(static_cast<const D &>(*this))->abi_OnContentTemplateSelectorChanged(get(oldContentTemplateSelector), get(newContentTemplateSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentControlStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentControlStatics &>(static_cast<const D &>(*this))->get_ContentTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentControlStatics &>(static_cast<const D &>(*this))->get_ContentTemplateSelectorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentControlStatics<D>::ContentTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentControlStatics &>(static_cast<const D &>(*this))->get_ContentTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentControl impl_IContentControlFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentControl instance { nullptr };
    check_hresult(static_cast<const IContentControlFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IContentControl2<D>::ContentTemplateRoot() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IContentControl2 &>(static_cast<const D &>(*this))->get_ContentTemplateRoot(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RowDefinitionCollection impl_IGrid<D>::RowDefinitions() const
{
    Windows::UI::Xaml::Controls::RowDefinitionCollection value { nullptr };
    check_hresult(static_cast<const IGrid &>(static_cast<const D &>(*this))->get_RowDefinitions(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ColumnDefinitionCollection impl_IGrid<D>::ColumnDefinitions() const
{
    Windows::UI::Xaml::Controls::ColumnDefinitionCollection value { nullptr };
    check_hresult(static_cast<const IGrid &>(static_cast<const D &>(*this))->get_ColumnDefinitions(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::RowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->get_RowProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetRow(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_GetRow(get(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetRow(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_SetRow(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::ColumnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->get_ColumnProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetColumn(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_GetColumn(get(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetColumn(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_SetColumn(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::RowSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->get_RowSpanProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetRowSpan(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_GetRowSpan(get(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetRowSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_SetRowSpan(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics<D>::ColumnSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->get_ColumnSpanProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IGridStatics<D>::GetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_GetColumnSpan(get(element), &value));
    return value;
}

template <typename D> void impl_IGridStatics<D>::SetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value) const
{
    check_hresult(static_cast<const IGridStatics &>(static_cast<const D &>(*this))->abi_SetColumnSpan(get(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Grid impl_IGridFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Grid instance { nullptr };
    check_hresult(static_cast<const IGridFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IGrid2<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IGrid2<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IGrid2<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->get_CornerRadius(put(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->put_CornerRadius(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IGrid2<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IGrid2<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IGrid2 &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics2 &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics2 &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics2 &>(static_cast<const D &>(*this))->get_CornerRadiusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IGridStatics2<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IGridStatics2 &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IItemsControl<D>::ItemsSource() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemsSource(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemsSource(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemsSource(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemCollection impl_IItemsControl<D>::Items() const
{
    Windows::UI::Xaml::Controls::ItemCollection value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_Items(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IItemsControl<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemTemplate(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::DataTemplateSelector impl_IItemsControl<D>::ItemTemplateSelector() const
{
    Windows::UI::Xaml::Controls::DataTemplateSelector value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemTemplateSelector(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemTemplateSelector(const Windows::UI::Xaml::Controls::DataTemplateSelector & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemTemplateSelector(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemsPanelTemplate impl_IItemsControl<D>::ItemsPanel() const
{
    Windows::UI::Xaml::Controls::ItemsPanelTemplate value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemsPanel(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemsPanel(const Windows::UI::Xaml::Controls::ItemsPanelTemplate & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemsPanel(get(value)));
}

template <typename D> hstring impl_IItemsControl<D>::DisplayMemberPath() const
{
    hstring value;
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_DisplayMemberPath(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::DisplayMemberPath(hstring_ref value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_DisplayMemberPath(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IItemsControl<D>::ItemContainerStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemContainerStyle(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemContainerStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::StyleSelector impl_IItemsControl<D>::ItemContainerStyleSelector() const
{
    Windows::UI::Xaml::Controls::StyleSelector value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemContainerStyleSelector(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerStyleSelector(const Windows::UI::Xaml::Controls::StyleSelector & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemContainerStyleSelector(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IItemsControl<D>::ItemContainerGenerator() const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemContainerGenerator(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IItemsControl<D>::ItemContainerTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_ItemContainerTransitions(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::ItemContainerTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_ItemContainerTransitions(get(value)));
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> impl_IItemsControl<D>::GroupStyle() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::GroupStyle> value;
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_GroupStyle(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GroupStyleSelector impl_IItemsControl<D>::GroupStyleSelector() const
{
    Windows::UI::Xaml::Controls::GroupStyleSelector value { nullptr };
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_GroupStyleSelector(put(value)));
    return value;
}

template <typename D> void impl_IItemsControl<D>::GroupStyleSelector(const Windows::UI::Xaml::Controls::GroupStyleSelector & value) const
{
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->put_GroupStyleSelector(get(value)));
}

template <typename D> bool impl_IItemsControl<D>::IsGrouping() const
{
    bool value {};
    check_hresult(static_cast<const IItemsControl &>(static_cast<const D &>(*this))->get_IsGrouping(&value));
    return value;
}

template <typename D> bool impl_IItemsControlOverrides<D>::IsItemItsOwnContainerOverride(const Windows::IInspectable & item) const
{
    bool returnValue {};
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_IsItemItsOwnContainerOverride(get(item), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemsControlOverrides<D>::GetContainerForItemOverride() const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_GetContainerForItemOverride(put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IItemsControlOverrides<D>::ClearContainerForItemOverride(const Windows::UI::Xaml::DependencyObject & element, const Windows::IInspectable & item) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_ClearContainerForItemOverride(get(element), get(item)));
}

template <typename D> void impl_IItemsControlOverrides<D>::PrepareContainerForItemOverride(const Windows::UI::Xaml::DependencyObject & element, const Windows::IInspectable & item) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_PrepareContainerForItemOverride(get(element), get(item)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemsChanged(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnItemsChanged(get(e)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemContainerStyleChanged(const Windows::UI::Xaml::Style & oldItemContainerStyle, const Windows::UI::Xaml::Style & newItemContainerStyle) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnItemContainerStyleChanged(get(oldItemContainerStyle), get(newItemContainerStyle)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemContainerStyleSelectorChanged(const Windows::UI::Xaml::Controls::StyleSelector & oldItemContainerStyleSelector, const Windows::UI::Xaml::Controls::StyleSelector & newItemContainerStyleSelector) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnItemContainerStyleSelectorChanged(get(oldItemContainerStyleSelector), get(newItemContainerStyleSelector)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemTemplateChanged(const Windows::UI::Xaml::DataTemplate & oldItemTemplate, const Windows::UI::Xaml::DataTemplate & newItemTemplate) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnItemTemplateChanged(get(oldItemTemplate), get(newItemTemplate)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnItemTemplateSelectorChanged(const Windows::UI::Xaml::Controls::DataTemplateSelector & oldItemTemplateSelector, const Windows::UI::Xaml::Controls::DataTemplateSelector & newItemTemplateSelector) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnItemTemplateSelectorChanged(get(oldItemTemplateSelector), get(newItemTemplateSelector)));
}

template <typename D> void impl_IItemsControlOverrides<D>::OnGroupStyleSelectorChanged(const Windows::UI::Xaml::Controls::GroupStyleSelector & oldGroupStyleSelector, const Windows::UI::Xaml::Controls::GroupStyleSelector & newGroupStyleSelector) const
{
    check_hresult(static_cast<const IItemsControlOverrides &>(static_cast<const D &>(*this))->abi_OnGroupStyleSelectorChanged(get(oldGroupStyleSelector), get(newGroupStyleSelector)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemsSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemTemplateSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemTemplateSelectorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemsPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemsPanelProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::DisplayMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_DisplayMemberPathProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemContainerStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemContainerStyleSelectorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::ItemContainerTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_ItemContainerTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::GroupStyleSelectorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_GroupStyleSelectorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsControlStatics<D>::IsGroupingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->get_IsGroupingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlStatics<D>::GetItemsOwner(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ItemsControl returnValue { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->abi_GetItemsOwner(get(element), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlStatics<D>::ItemsControlFromItemContainer(const Windows::UI::Xaml::DependencyObject & container) const
{
    Windows::UI::Xaml::Controls::ItemsControl returnValue { nullptr };
    check_hresult(static_cast<const IItemsControlStatics &>(static_cast<const D &>(*this))->abi_ItemsControlFromItemContainer(get(container), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ItemsControl impl_IItemsControlFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ItemsControl instance { nullptr };
    check_hresult(static_cast<const IItemsControlFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Panel impl_IItemsControl2<D>::ItemsPanelRoot() const
{
    Windows::UI::Xaml::Controls::Panel value { nullptr };
    check_hresult(static_cast<const IItemsControl2 &>(static_cast<const D &>(*this))->get_ItemsPanelRoot(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IItemsControl3<D>::GroupHeaderContainerFromItemContainer(const Windows::UI::Xaml::DependencyObject & itemContainer) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IItemsControl3 &>(static_cast<const D &>(*this))->abi_GroupHeaderContainerFromItemContainer(get(itemContainer), put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFullWindowButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFullWindowButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFullWindowButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFullWindowButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFullWindowEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFullWindowEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFullWindowEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFullWindowEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsZoomButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsZoomButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsZoomButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsZoomButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsZoomEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsZoomEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsZoomEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsZoomEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastForwardButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFastForwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastForwardButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFastForwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastForwardEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFastForwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastForwardEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFastForwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastRewindButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFastRewindButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastRewindButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFastRewindButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsFastRewindEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsFastRewindEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsFastRewindEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsFastRewindEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsStopButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsStopButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsStopButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsStopButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsStopEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsStopEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsStopEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsStopEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsVolumeButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsVolumeButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsVolumeButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsVolumeButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsVolumeEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsVolumeEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsVolumeEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsVolumeEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsPlaybackRateButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsPlaybackRateButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsPlaybackRateButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsPlaybackRateButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsPlaybackRateEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsPlaybackRateEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsPlaybackRateEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsPlaybackRateEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsSeekBarVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsSeekBarVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsSeekBarVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsSeekBarVisible(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsSeekEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsSeekEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsSeekEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsSeekEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls<D>::IsCompact() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->get_IsCompact(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls<D>::IsCompact(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls &>(static_cast<const D &>(*this))->put_IsCompact(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFullWindowButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFullWindowButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFullWindowEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFullWindowEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsZoomButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsZoomButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsZoomEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsZoomEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastForwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFastForwardButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastForwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFastForwardEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastRewindButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFastRewindButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsFastRewindEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsFastRewindEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsStopButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsStopButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsStopEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsStopEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsVolumeButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsVolumeButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsVolumeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsVolumeEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsPlaybackRateButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsPlaybackRateButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsPlaybackRateEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsPlaybackRateEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsSeekBarVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsSeekBarVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsSeekEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsSeekEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics &>(static_cast<const D &>(*this))->get_IsCompactProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaTransportControlsFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaTransportControls instance { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipForwardButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsSkipForwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipForwardButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsSkipForwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipForwardEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsSkipForwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipForwardEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsSkipForwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipBackwardButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsSkipBackwardButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipBackwardButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsSkipBackwardButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsSkipBackwardEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsSkipBackwardEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsSkipBackwardEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsSkipBackwardEnabled(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsNextTrackButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsNextTrackButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsNextTrackButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsNextTrackButtonVisible(value));
}

template <typename D> bool impl_IMediaTransportControls2<D>::IsPreviousTrackButtonVisible() const
{
    bool value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_IsPreviousTrackButtonVisible(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::IsPreviousTrackButtonVisible(bool value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_IsPreviousTrackButtonVisible(value));
}

template <typename D> Windows::UI::Xaml::Media::FastPlayFallbackBehaviour impl_IMediaTransportControls2<D>::FastPlayFallbackBehaviour() const
{
    Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->get_FastPlayFallbackBehaviour(&value));
    return value;
}

template <typename D> void impl_IMediaTransportControls2<D>::FastPlayFallbackBehaviour(Windows::UI::Xaml::Media::FastPlayFallbackBehaviour value) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->put_FastPlayFallbackBehaviour(value));
}

template <typename D> event_token impl_IMediaTransportControls2<D>::ThumbnailRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->add_ThumbnailRequested(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaTransportControls2> impl_IMediaTransportControls2<D>::ThumbnailRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaTransportControls, Windows::UI::Xaml::Media::MediaTransportControlsThumbnailRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IMediaTransportControls2>(this, &ABI::Windows::UI::Xaml::Controls::IMediaTransportControls2::remove_ThumbnailRequested, ThumbnailRequested(value));
}

template <typename D> void impl_IMediaTransportControls2<D>::ThumbnailRequested(event_token token) const
{
    check_hresult(static_cast<const IMediaTransportControls2 &>(static_cast<const D &>(*this))->remove_ThumbnailRequested(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipForwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsSkipForwardButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipForwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsSkipForwardEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipBackwardButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsSkipBackwardButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsSkipBackwardEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsSkipBackwardEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsNextTrackButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsNextTrackButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::IsPreviousTrackButtonVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_IsPreviousTrackButtonVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaTransportControlsStatics2<D>::FastPlayFallbackBehaviourProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaTransportControlsStatics2 &>(static_cast<const D &>(*this))->get_FastPlayFallbackBehaviourProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IPasswordBox<D>::Password() const
{
    hstring value;
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->get_Password(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::Password(hstring_ref value) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->put_Password(get(value)));
}

template <typename D> hstring impl_IPasswordBox<D>::PasswordChar() const
{
    hstring value;
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->get_PasswordChar(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::PasswordChar(hstring_ref value) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->put_PasswordChar(get(value)));
}

template <typename D> bool impl_IPasswordBox<D>::IsPasswordRevealButtonEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->get_IsPasswordRevealButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::IsPasswordRevealButtonEnabled(bool value) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->put_IsPasswordRevealButtonEnabled(value));
}

template <typename D> int32_t impl_IPasswordBox<D>::MaxLength() const
{
    int32_t value {};
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->get_MaxLength(&value));
    return value;
}

template <typename D> void impl_IPasswordBox<D>::MaxLength(int32_t value) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->put_MaxLength(value));
}

template <typename D> event_token impl_IPasswordBox<D>::PasswordChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->add_PasswordChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox> impl_IPasswordBox<D>::PasswordChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox::remove_PasswordChanged, PasswordChanged(value));
}

template <typename D> void impl_IPasswordBox<D>::PasswordChanged(event_token token) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->remove_PasswordChanged(token));
}

template <typename D> event_token impl_IPasswordBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->add_ContextMenuOpening(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox> impl_IPasswordBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IPasswordBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->remove_ContextMenuOpening(token));
}

template <typename D> void impl_IPasswordBox<D>::SelectAll() const
{
    check_hresult(static_cast<const IPasswordBox &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::PasswordProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics &>(static_cast<const D &>(*this))->get_PasswordProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::PasswordCharProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics &>(static_cast<const D &>(*this))->get_PasswordCharProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::IsPasswordRevealButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics &>(static_cast<const D &>(*this))->get_IsPasswordRevealButtonEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics<D>::MaxLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics &>(static_cast<const D &>(*this))->get_MaxLengthProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IPasswordBox2<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPasswordBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_IPasswordBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IPasswordBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColor(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->put_SelectionHighlightColor(get(value)));
}

template <typename D> bool impl_IPasswordBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_IPasswordBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> event_token impl_IPasswordBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->add_Paste(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPasswordBox2> impl_IPasswordBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, IPasswordBox2>(this, &ABI::Windows::UI::Xaml::Controls::IPasswordBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_IPasswordBox2<D>::Paste(event_token token) const
{
    check_hresult(static_cast<const IPasswordBox2 &>(static_cast<const D &>(*this))->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics2 &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PasswordRevealMode impl_IPasswordBox3<D>::PasswordRevealMode() const
{
    Windows::UI::Xaml::Controls::PasswordRevealMode value {};
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->get_PasswordRevealMode(&value));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::PasswordRevealMode(Windows::UI::Xaml::Controls::PasswordRevealMode value) const
{
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->put_PasswordRevealMode(value));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IPasswordBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_IPasswordBox3<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->get_InputScope(put(value)));
    return value;
}

template <typename D> void impl_IPasswordBox3<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(static_cast<const IPasswordBox3 &>(static_cast<const D &>(*this))->put_InputScope(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::PasswordRevealModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics3 &>(static_cast<const D &>(*this))->get_PasswordRevealModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics3 &>(static_cast<const D &>(*this))->get_TextReadingOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPasswordBoxStatics3<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPasswordBoxStatics3 &>(static_cast<const D &>(*this))->get_InputScopeProperty(put(value)));
    return value;
}

template <typename D> bool impl_IProgressRing<D>::IsActive() const
{
    bool value {};
    check_hresult(static_cast<const IProgressRing &>(static_cast<const D &>(*this))->get_IsActive(&value));
    return value;
}

template <typename D> void impl_IProgressRing<D>::IsActive(bool value) const
{
    check_hresult(static_cast<const IProgressRing &>(static_cast<const D &>(*this))->put_IsActive(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings impl_IProgressRing<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ProgressRingTemplateSettings value { nullptr };
    check_hresult(static_cast<const IProgressRing &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressRingStatics<D>::IsActiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IProgressRingStatics &>(static_cast<const D &>(*this))->get_IsActiveProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IRelativePanel<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRelativePanel<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IRelativePanel<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->get_CornerRadius(put(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->put_CornerRadius(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IRelativePanel<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IRelativePanel<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IRelativePanel &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::LeftOfProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_LeftOfProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetLeftOf(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetLeftOf(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetLeftOf(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetLeftOf(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AboveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AboveProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAbove(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAbove(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAbove(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAbove(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::RightOfProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_RightOfProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetRightOf(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetRightOf(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetRightOf(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetRightOf(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BelowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_BelowProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetBelow(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetBelow(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetBelow(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetBelow(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignHorizontalCenterWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignHorizontalCenterWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignHorizontalCenterWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignHorizontalCenterWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignVerticalCenterWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignVerticalCenterWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignVerticalCenterWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignVerticalCenterWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignLeftWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignLeftWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignLeftWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignLeftWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignLeftWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignLeftWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignTopWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignTopWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignTopWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignTopWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignTopWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignTopWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignRightWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignRightWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignRightWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignRightWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignRightWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignRightWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignBottomWithProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignBottomWithProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IRelativePanelStatics<D>::GetAlignBottomWith(const Windows::UI::Xaml::UIElement & element) const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignBottomWith(get(element), put(value)));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignBottomWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignBottomWith(get(element), get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignLeftWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignLeftWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignLeftWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignLeftWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignTopWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignTopWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignTopWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignTopWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignRightWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignRightWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignRightWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignRightWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignBottomWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignBottomWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignBottomWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignBottomWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignHorizontalCenterWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignHorizontalCenterWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignHorizontalCenterWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignHorizontalCenterWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::AlignVerticalCenterWithPanelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_AlignVerticalCenterWithPanelProperty(put(value)));
    return value;
}

template <typename D> bool impl_IRelativePanelStatics<D>::GetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_GetAlignVerticalCenterWithPanel(get(element), &value));
    return value;
}

template <typename D> void impl_IRelativePanelStatics<D>::SetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value) const
{
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->abi_SetAlignVerticalCenterWithPanel(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_CornerRadiusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRelativePanelStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRelativePanelStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RelativePanel impl_IRelativePanelFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RelativePanel instance { nullptr };
    check_hresult(static_cast<const IRelativePanelFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IRichEditBox<D>::IsReadOnly() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_IsReadOnly(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsReadOnly(bool value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_IsReadOnly(value));
}

template <typename D> bool impl_IRichEditBox<D>::AcceptsReturn() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_AcceptsReturn(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::AcceptsReturn(bool value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_AcceptsReturn(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_IRichEditBox<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_IRichEditBox<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_TextWrapping(value));
}

template <typename D> bool impl_IRichEditBox<D>::IsSpellCheckEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_IsSpellCheckEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsSpellCheckEnabled(bool value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_IsSpellCheckEnabled(value));
}

template <typename D> bool impl_IRichEditBox<D>::IsTextPredictionEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_IsTextPredictionEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::IsTextPredictionEnabled(bool value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_IsTextPredictionEnabled(value));
}

template <typename D> Windows::UI::Text::ITextDocument impl_IRichEditBox<D>::Document() const
{
    Windows::UI::Text::ITextDocument value;
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_Document(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_IRichEditBox<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->get_InputScope(put(value)));
    return value;
}

template <typename D> void impl_IRichEditBox<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->put_InputScope(get(value)));
}

template <typename D> event_token impl_IRichEditBox<D>::TextChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->add_TextChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::TextChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_IRichEditBox<D>::TextChanged(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->remove_TextChanged(token));
}

template <typename D> event_token impl_IRichEditBox<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->add_SelectionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IRichEditBox<D>::SelectionChanged(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IRichEditBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->add_ContextMenuOpening(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox> impl_IRichEditBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_IRichEditBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox &>(static_cast<const D &>(*this))->remove_ContextMenuOpening(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsReadOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_IsReadOnlyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::AcceptsReturnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_AcceptsReturnProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_TextAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_TextWrappingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsSpellCheckEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_IsSpellCheckEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::IsTextPredictionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_IsTextPredictionEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics &>(static_cast<const D &>(*this))->get_InputScopeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RichEditBox impl_IRichEditBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RichEditBox instance { nullptr };
    check_hresult(static_cast<const IRichEditBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IRichEditBox2<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IRichEditBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_IRichEditBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_IRichEditBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColor(put(value)));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_SelectionHighlightColor(get(value)));
}

template <typename D> bool impl_IRichEditBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> bool impl_IRichEditBox2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_IRichEditBox2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->put_IsColorFontEnabled(value));
}

template <typename D> event_token impl_IRichEditBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->add_Paste(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox2> impl_IRichEditBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, IRichEditBox2>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_IRichEditBox2<D>::Paste(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox2 &>(static_cast<const D &>(*this))->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabledProperty(put(value)));
    return value;
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionStarted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->add_TextCompositionStarted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionStarted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionStarted, TextCompositionStarted(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionStarted(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionStarted(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->add_TextCompositionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionChanged, TextCompositionChanged(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionChanged(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionChanged(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextCompositionEnded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->add_TextCompositionEnded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextCompositionEnded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextCompositionEnded, TextCompositionEnded(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextCompositionEnded(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionEnded(token));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_IRichEditBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_IRichEditBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Controls::CandidateWindowAlignment impl_IRichEditBox3<D>::DesiredCandidateWindowAlignment() const
{
    Windows::UI::Xaml::Controls::CandidateWindowAlignment value {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->get_DesiredCandidateWindowAlignment(&value));
    return value;
}

template <typename D> void impl_IRichEditBox3<D>::DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->put_DesiredCandidateWindowAlignment(value));
}

template <typename D> event_token impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->add_CandidateWindowBoundsChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_CandidateWindowBoundsChanged, CandidateWindowBoundsChanged(value));
}

template <typename D> void impl_IRichEditBox3<D>::CandidateWindowBoundsChanged(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->remove_CandidateWindowBoundsChanged(token));
}

template <typename D> event_token impl_IRichEditBox3<D>::TextChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->add_TextChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<IRichEditBox3> impl_IRichEditBox3<D>::TextChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::RichEditBox, Windows::UI::Xaml::Controls::RichEditBoxTextChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IRichEditBox3>(this, &ABI::Windows::UI::Xaml::Controls::IRichEditBox3::remove_TextChanging, TextChanging(value));
}

template <typename D> void impl_IRichEditBox3<D>::TextChanging(event_token token) const
{
    check_hresult(static_cast<const IRichEditBox3 &>(static_cast<const D &>(*this))->remove_TextChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics3<D>::DesiredCandidateWindowAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics3 &>(static_cast<const D &>(*this))->get_DesiredCandidateWindowAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics3 &>(static_cast<const D &>(*this))->get_TextReadingOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> impl_IRichEditBox4<D>::GetLinguisticAlternativesAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> returnValue;
    check_hresult(static_cast<const IRichEditBox4 &>(static_cast<const D &>(*this))->abi_GetLinguisticAlternativesAsync(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::RichEditClipboardFormat impl_IRichEditBox4<D>::ClipboardCopyFormat() const
{
    Windows::UI::Xaml::Controls::RichEditClipboardFormat value {};
    check_hresult(static_cast<const IRichEditBox4 &>(static_cast<const D &>(*this))->get_ClipboardCopyFormat(&value));
    return value;
}

template <typename D> void impl_IRichEditBox4<D>::ClipboardCopyFormat(Windows::UI::Xaml::Controls::RichEditClipboardFormat value) const
{
    check_hresult(static_cast<const IRichEditBox4 &>(static_cast<const D &>(*this))->put_ClipboardCopyFormat(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRichEditBoxStatics4<D>::ClipboardCopyFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRichEditBoxStatics4 &>(static_cast<const D &>(*this))->get_ClipboardCopyFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ISemanticZoomInformation impl_ISemanticZoom<D>::ZoomedInView() const
{
    Windows::UI::Xaml::Controls::ISemanticZoomInformation value;
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->get_ZoomedInView(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::ZoomedInView(const Windows::UI::Xaml::Controls::ISemanticZoomInformation & value) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->put_ZoomedInView(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ISemanticZoomInformation impl_ISemanticZoom<D>::ZoomedOutView() const
{
    Windows::UI::Xaml::Controls::ISemanticZoomInformation value;
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->get_ZoomedOutView(put(value)));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::ZoomedOutView(const Windows::UI::Xaml::Controls::ISemanticZoomInformation & value) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->put_ZoomedOutView(get(value)));
}

template <typename D> bool impl_ISemanticZoom<D>::IsZoomedInViewActive() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->get_IsZoomedInViewActive(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::IsZoomedInViewActive(bool value) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->put_IsZoomedInViewActive(value));
}

template <typename D> bool impl_ISemanticZoom<D>::CanChangeViews() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->get_CanChangeViews(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::CanChangeViews(bool value) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->put_CanChangeViews(value));
}

template <typename D> event_token impl_ISemanticZoom<D>::ViewChangeStarted(const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->add_ViewChangeStarted(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISemanticZoom> impl_ISemanticZoom<D>::ViewChangeStarted(auto_revoke_t, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ISemanticZoom>(this, &ABI::Windows::UI::Xaml::Controls::ISemanticZoom::remove_ViewChangeStarted, ViewChangeStarted(value));
}

template <typename D> void impl_ISemanticZoom<D>::ViewChangeStarted(event_token token) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->remove_ViewChangeStarted(token));
}

template <typename D> event_token impl_ISemanticZoom<D>::ViewChangeCompleted(const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->add_ViewChangeCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISemanticZoom> impl_ISemanticZoom<D>::ViewChangeCompleted(auto_revoke_t, const Windows::UI::Xaml::Controls::SemanticZoomViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ISemanticZoom>(this, &ABI::Windows::UI::Xaml::Controls::ISemanticZoom::remove_ViewChangeCompleted, ViewChangeCompleted(value));
}

template <typename D> void impl_ISemanticZoom<D>::ViewChangeCompleted(event_token token) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->remove_ViewChangeCompleted(token));
}

template <typename D> void impl_ISemanticZoom<D>::ToggleActiveView() const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->abi_ToggleActiveView());
}

template <typename D> bool impl_ISemanticZoom<D>::IsZoomOutButtonEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->get_IsZoomOutButtonEnabled(&value));
    return value;
}

template <typename D> void impl_ISemanticZoom<D>::IsZoomOutButtonEnabled(bool value) const
{
    check_hresult(static_cast<const ISemanticZoom &>(static_cast<const D &>(*this))->put_IsZoomOutButtonEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::ZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISemanticZoomStatics &>(static_cast<const D &>(*this))->get_ZoomedInViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::ZoomedOutViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISemanticZoomStatics &>(static_cast<const D &>(*this))->get_ZoomedOutViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::IsZoomedInViewActiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISemanticZoomStatics &>(static_cast<const D &>(*this))->get_IsZoomedInViewActiveProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::CanChangeViewsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISemanticZoomStatics &>(static_cast<const D &>(*this))->get_CanChangeViewsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISemanticZoomStatics<D>::IsZoomOutButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISemanticZoomStatics &>(static_cast<const D &>(*this))->get_IsZoomOutButtonEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IStackPanel<D>::AreScrollSnapPointsRegular() const
{
    bool value {};
    check_hresult(static_cast<const IStackPanel &>(static_cast<const D &>(*this))->get_AreScrollSnapPointsRegular(&value));
    return value;
}

template <typename D> void impl_IStackPanel<D>::AreScrollSnapPointsRegular(bool value) const
{
    check_hresult(static_cast<const IStackPanel &>(static_cast<const D &>(*this))->put_AreScrollSnapPointsRegular(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IStackPanel &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IStackPanel &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics<D>::AreScrollSnapPointsRegularProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics &>(static_cast<const D &>(*this))->get_AreScrollSnapPointsRegularProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::StackPanel impl_IStackPanelFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::StackPanel instance { nullptr };
    check_hresult(static_cast<const IStackPanelFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IStackPanel2<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IStackPanel2<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::CornerRadius impl_IStackPanel2<D>::CornerRadius() const
{
    Windows::UI::Xaml::CornerRadius value {};
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->get_CornerRadius(put(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::CornerRadius(const Windows::UI::Xaml::CornerRadius & value) const
{
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->put_CornerRadius(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IStackPanel2<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IStackPanel2<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IStackPanel2 &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics2 &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics2 &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::CornerRadiusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics2 &>(static_cast<const D &>(*this))->get_CornerRadiusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IStackPanelStatics2<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IStackPanelStatics2 &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> hstring impl_ITextBox<D>::Text() const
{
    hstring value;
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_Text(put(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::Text(hstring_ref value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_Text(get(value)));
}

template <typename D> hstring impl_ITextBox<D>::SelectedText() const
{
    hstring value;
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_SelectedText(put(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectedText(hstring_ref value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_SelectedText(get(value)));
}

template <typename D> int32_t impl_ITextBox<D>::SelectionLength() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_SelectionLength(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectionLength(int32_t value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_SelectionLength(value));
}

template <typename D> int32_t impl_ITextBox<D>::SelectionStart() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_SelectionStart(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::SelectionStart(int32_t value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_SelectionStart(value));
}

template <typename D> int32_t impl_ITextBox<D>::MaxLength() const
{
    int32_t value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_MaxLength(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::MaxLength(int32_t value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_MaxLength(value));
}

template <typename D> bool impl_ITextBox<D>::IsReadOnly() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_IsReadOnly(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsReadOnly(bool value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_IsReadOnly(value));
}

template <typename D> bool impl_ITextBox<D>::AcceptsReturn() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_AcceptsReturn(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::AcceptsReturn(bool value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_AcceptsReturn(value));
}

template <typename D> Windows::UI::Xaml::TextAlignment impl_ITextBox<D>::TextAlignment() const
{
    Windows::UI::Xaml::TextAlignment value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_TextAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::TextAlignment(Windows::UI::Xaml::TextAlignment value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_TextAlignment(value));
}

template <typename D> Windows::UI::Xaml::TextWrapping impl_ITextBox<D>::TextWrapping() const
{
    Windows::UI::Xaml::TextWrapping value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_TextWrapping(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::TextWrapping(Windows::UI::Xaml::TextWrapping value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_TextWrapping(value));
}

template <typename D> bool impl_ITextBox<D>::IsSpellCheckEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_IsSpellCheckEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsSpellCheckEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_IsSpellCheckEnabled(value));
}

template <typename D> bool impl_ITextBox<D>::IsTextPredictionEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_IsTextPredictionEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox<D>::IsTextPredictionEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_IsTextPredictionEnabled(value));
}

template <typename D> Windows::UI::Xaml::Input::InputScope impl_ITextBox<D>::InputScope() const
{
    Windows::UI::Xaml::Input::InputScope value { nullptr };
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->get_InputScope(put(value)));
    return value;
}

template <typename D> void impl_ITextBox<D>::InputScope(const Windows::UI::Xaml::Input::InputScope & value) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->put_InputScope(get(value)));
}

template <typename D> event_token impl_ITextBox<D>::TextChanged(const Windows::UI::Xaml::Controls::TextChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->add_TextChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::TextChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::TextChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_ITextBox<D>::TextChanged(event_token token) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->remove_TextChanged(token));
}

template <typename D> event_token impl_ITextBox<D>::SelectionChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->add_SelectionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_ITextBox<D>::SelectionChanged(event_token token) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->remove_SelectionChanged(token));
}

template <typename D> event_token impl_ITextBox<D>::ContextMenuOpening(const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->add_ContextMenuOpening(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox> impl_ITextBox<D>::ContextMenuOpening(auto_revoke_t, const Windows::UI::Xaml::Controls::ContextMenuOpeningEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox::remove_ContextMenuOpening, ContextMenuOpening(value));
}

template <typename D> void impl_ITextBox<D>::ContextMenuOpening(event_token token) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->remove_ContextMenuOpening(token));
}

template <typename D> void impl_ITextBox<D>::Select(int32_t start, int32_t length) const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->abi_Select(start, length));
}

template <typename D> void impl_ITextBox<D>::SelectAll() const
{
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> Windows::Foundation::Rect impl_ITextBox<D>::GetRectFromCharacterIndex(int32_t charIndex, bool trailingEdge) const
{
    Windows::Foundation::Rect returnValue {};
    check_hresult(static_cast<const ITextBox &>(static_cast<const D &>(*this))->abi_GetRectFromCharacterIndex(charIndex, trailingEdge, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_TextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::MaxLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_MaxLengthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsReadOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_IsReadOnlyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::AcceptsReturnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_AcceptsReturnProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_TextAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::TextWrappingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_TextWrappingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsSpellCheckEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_IsSpellCheckEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::IsTextPredictionEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_IsTextPredictionEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics<D>::InputScopeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics &>(static_cast<const D &>(*this))->get_InputScopeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::TextBox impl_ITextBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::TextBox instance { nullptr };
    check_hresult(static_cast<const ITextBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_ITextBox2<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ITextBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_ITextBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::SolidColorBrush impl_ITextBox2<D>::SelectionHighlightColor() const
{
    Windows::UI::Xaml::Media::SolidColorBrush value { nullptr };
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColor(put(value)));
    return value;
}

template <typename D> void impl_ITextBox2<D>::SelectionHighlightColor(const Windows::UI::Xaml::Media::SolidColorBrush & value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_SelectionHighlightColor(get(value)));
}

template <typename D> bool impl_ITextBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocus(&value));
    return value;
}

template <typename D> void impl_ITextBox2<D>::PreventKeyboardDisplayOnProgrammaticFocus(bool value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_PreventKeyboardDisplayOnProgrammaticFocus(value));
}

template <typename D> bool impl_ITextBox2<D>::IsColorFontEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabled(&value));
    return value;
}

template <typename D> void impl_ITextBox2<D>::IsColorFontEnabled(bool value) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->put_IsColorFontEnabled(value));
}

template <typename D> event_token impl_ITextBox2<D>::Paste(const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->add_Paste(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox2> impl_ITextBox2<D>::Paste(auto_revoke_t, const Windows::UI::Xaml::Controls::TextControlPasteEventHandler & value) const
{
    return impl::make_event_revoker<D, ITextBox2>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox2::remove_Paste, Paste(value));
}

template <typename D> void impl_ITextBox2<D>::Paste(event_token token) const
{
    check_hresult(static_cast<const ITextBox2 &>(static_cast<const D &>(*this))->remove_Paste(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::SelectionHighlightColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_SelectionHighlightColorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::PreventKeyboardDisplayOnProgrammaticFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_PreventKeyboardDisplayOnProgrammaticFocusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics2<D>::IsColorFontEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics2 &>(static_cast<const D &>(*this))->get_IsColorFontEnabledProperty(put(value)));
    return value;
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionStarted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->add_TextCompositionStarted(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionStarted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionStartedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionStarted, TextCompositionStarted(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionStarted(event_token token) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionStarted(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->add_TextCompositionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionChanged, TextCompositionChanged(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionChanged(event_token token) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionChanged(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextCompositionEnded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->add_TextCompositionEnded(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextCompositionEnded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextCompositionEndedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextCompositionEnded, TextCompositionEnded(value));
}

template <typename D> void impl_ITextBox3<D>::TextCompositionEnded(event_token token) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->remove_TextCompositionEnded(token));
}

template <typename D> Windows::UI::Xaml::TextReadingOrder impl_ITextBox3<D>::TextReadingOrder() const
{
    Windows::UI::Xaml::TextReadingOrder value {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->get_TextReadingOrder(&value));
    return value;
}

template <typename D> void impl_ITextBox3<D>::TextReadingOrder(Windows::UI::Xaml::TextReadingOrder value) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->put_TextReadingOrder(value));
}

template <typename D> Windows::UI::Xaml::Controls::CandidateWindowAlignment impl_ITextBox3<D>::DesiredCandidateWindowAlignment() const
{
    Windows::UI::Xaml::Controls::CandidateWindowAlignment value {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->get_DesiredCandidateWindowAlignment(&value));
    return value;
}

template <typename D> void impl_ITextBox3<D>::DesiredCandidateWindowAlignment(Windows::UI::Xaml::Controls::CandidateWindowAlignment value) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->put_DesiredCandidateWindowAlignment(value));
}

template <typename D> event_token impl_ITextBox3<D>::CandidateWindowBoundsChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->add_CandidateWindowBoundsChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::CandidateWindowBoundsChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::CandidateWindowBoundsChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_CandidateWindowBoundsChanged, CandidateWindowBoundsChanged(value));
}

template <typename D> void impl_ITextBox3<D>::CandidateWindowBoundsChanged(event_token token) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->remove_CandidateWindowBoundsChanged(token));
}

template <typename D> event_token impl_ITextBox3<D>::TextChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->add_TextChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITextBox3> impl_ITextBox3<D>::TextChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TextBox, Windows::UI::Xaml::Controls::TextBoxTextChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITextBox3>(this, &ABI::Windows::UI::Xaml::Controls::ITextBox3::remove_TextChanging, TextChanging(value));
}

template <typename D> void impl_ITextBox3<D>::TextChanging(event_token token) const
{
    check_hresult(static_cast<const ITextBox3 &>(static_cast<const D &>(*this))->remove_TextChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics3<D>::DesiredCandidateWindowAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics3 &>(static_cast<const D &>(*this))->get_DesiredCandidateWindowAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITextBoxStatics3<D>::TextReadingOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITextBoxStatics3 &>(static_cast<const D &>(*this))->get_TextReadingOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> impl_ITextBox4<D>::GetLinguisticAlternativesAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<hstring>> returnValue;
    check_hresult(static_cast<const ITextBox4 &>(static_cast<const D &>(*this))->abi_GetLinguisticAlternativesAsync(put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_IToggleSwitch<D>::IsOn() const
{
    bool value {};
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_IsOn(&value));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::IsOn(bool value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_IsOn(value));
}

template <typename D> Windows::IInspectable impl_IToggleSwitch<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::IInspectable impl_IToggleSwitch<D>::OnContent() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_OnContent(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OnContent(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_OnContent(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::OnContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_OnContentTemplate(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OnContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_OnContentTemplate(get(value)));
}

template <typename D> Windows::IInspectable impl_IToggleSwitch<D>::OffContent() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_OffContent(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OffContent(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_OffContent(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IToggleSwitch<D>::OffContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_OffContentTemplate(put(value)));
    return value;
}

template <typename D> void impl_IToggleSwitch<D>::OffContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->put_OffContentTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings impl_IToggleSwitch<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ToggleSwitchTemplateSettings value { nullptr };
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> event_token impl_IToggleSwitch<D>::Toggled(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->add_Toggled(get(value), &token));
    return token;
}

template <typename D> event_revoker<IToggleSwitch> impl_IToggleSwitch<D>::Toggled(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToggleSwitch>(this, &ABI::Windows::UI::Xaml::Controls::IToggleSwitch::remove_Toggled, Toggled(value));
}

template <typename D> void impl_IToggleSwitch<D>::Toggled(event_token token) const
{
    check_hresult(static_cast<const IToggleSwitch &>(static_cast<const D &>(*this))->remove_Toggled(token));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnToggled() const
{
    check_hresult(static_cast<const IToggleSwitchOverrides &>(static_cast<const D &>(*this))->abi_OnToggled());
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnOnContentChanged(const Windows::IInspectable & oldContent, const Windows::IInspectable & newContent) const
{
    check_hresult(static_cast<const IToggleSwitchOverrides &>(static_cast<const D &>(*this))->abi_OnOnContentChanged(get(oldContent), get(newContent)));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnOffContentChanged(const Windows::IInspectable & oldContent, const Windows::IInspectable & newContent) const
{
    check_hresult(static_cast<const IToggleSwitchOverrides &>(static_cast<const D &>(*this))->abi_OnOffContentChanged(get(oldContent), get(newContent)));
}

template <typename D> void impl_IToggleSwitchOverrides<D>::OnHeaderChanged(const Windows::IInspectable & oldContent, const Windows::IInspectable & newContent) const
{
    check_hresult(static_cast<const IToggleSwitchOverrides &>(static_cast<const D &>(*this))->abi_OnHeaderChanged(get(oldContent), get(newContent)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::IsOnProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_IsOnProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OnContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_OnContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OnContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_OnContentTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OffContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_OffContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleSwitchStatics<D>::OffContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleSwitchStatics &>(static_cast<const D &>(*this))->get_OffContentTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IUserControl<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IUserControl &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_IUserControl<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IUserControl &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IUserControlStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IUserControlStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::UserControl impl_IUserControlFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::UserControl instance { nullptr };
    check_hresult(static_cast<const IUserControlFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> double impl_IVariableSizedWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_ItemHeight(value));
}

template <typename D> double impl_IVariableSizedWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_ItemWidth(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IVariableSizedWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IVariableSizedWrapGrid<D>::HorizontalChildrenAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_HorizontalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_HorizontalChildrenAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IVariableSizedWrapGrid<D>::VerticalChildrenAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_VerticalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_VerticalChildrenAlignment(value));
}

template <typename D> int32_t impl_IVariableSizedWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGrid &>(static_cast<const D &>(*this))->put_MaximumRowsOrColumns(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::HorizontalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_HorizontalChildrenAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::VerticalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_VerticalChildrenAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumnsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::RowSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_RowSpanProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IVariableSizedWrapGridStatics<D>::GetRowSpan(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->abi_GetRowSpan(get(element), &value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGridStatics<D>::SetRowSpan(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->abi_SetRowSpan(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVariableSizedWrapGridStatics<D>::ColumnSpanProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->get_ColumnSpanProperty(put(value)));
    return value;
}

template <typename D> int32_t impl_IVariableSizedWrapGridStatics<D>::GetColumnSpan(const Windows::UI::Xaml::UIElement & element) const
{
    int32_t value {};
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->abi_GetColumnSpan(get(element), &value));
    return value;
}

template <typename D> void impl_IVariableSizedWrapGridStatics<D>::SetColumnSpan(const Windows::UI::Xaml::UIElement & element, int32_t value) const
{
    check_hresult(static_cast<const IVariableSizedWrapGridStatics &>(static_cast<const D &>(*this))->abi_SetColumnSpan(get(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::ItemContainerGenerator impl_IVirtualizingPanel<D>::ItemContainerGenerator() const
{
    Windows::UI::Xaml::Controls::ItemContainerGenerator value { nullptr };
    check_hresult(static_cast<const IVirtualizingPanel &>(static_cast<const D &>(*this))->get_ItemContainerGenerator(put(value)));
    return value;
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::OnItemsChanged(const Windows::IInspectable & sender, const Windows::UI::Xaml::Controls::Primitives::ItemsChangedEventArgs & args) const
{
    check_hresult(static_cast<const IVirtualizingPanelOverrides &>(static_cast<const D &>(*this))->abi_OnItemsChanged(get(sender), get(args)));
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::OnClearChildren() const
{
    check_hresult(static_cast<const IVirtualizingPanelOverrides &>(static_cast<const D &>(*this))->abi_OnClearChildren());
}

template <typename D> void impl_IVirtualizingPanelOverrides<D>::BringIndexIntoView(int32_t index) const
{
    check_hresult(static_cast<const IVirtualizingPanelOverrides &>(static_cast<const D &>(*this))->abi_BringIndexIntoView(index));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::AddInternalChild(const Windows::UI::Xaml::UIElement & child) const
{
    check_hresult(static_cast<const IVirtualizingPanelProtected &>(static_cast<const D &>(*this))->abi_AddInternalChild(get(child)));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::InsertInternalChild(int32_t index, const Windows::UI::Xaml::UIElement & child) const
{
    check_hresult(static_cast<const IVirtualizingPanelProtected &>(static_cast<const D &>(*this))->abi_InsertInternalChild(index, get(child)));
}

template <typename D> void impl_IVirtualizingPanelProtected<D>::RemoveInternalChildRange(int32_t index, int32_t range) const
{
    check_hresult(static_cast<const IVirtualizingPanelProtected &>(static_cast<const D &>(*this))->abi_RemoveInternalChildRange(index, range));
}

template <typename D> Windows::UI::Xaml::Controls::GroupItem impl_IGroupItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GroupItem instance { nullptr };
    check_hresult(static_cast<const IGroupItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IProgressBar<D>::IsIndeterminate() const
{
    bool value {};
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->get_IsIndeterminate(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::IsIndeterminate(bool value) const
{
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->put_IsIndeterminate(value));
}

template <typename D> bool impl_IProgressBar<D>::ShowError() const
{
    bool value {};
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->get_ShowError(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::ShowError(bool value) const
{
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->put_ShowError(value));
}

template <typename D> bool impl_IProgressBar<D>::ShowPaused() const
{
    bool value {};
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->get_ShowPaused(&value));
    return value;
}

template <typename D> void impl_IProgressBar<D>::ShowPaused(bool value) const
{
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->put_ShowPaused(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings impl_IProgressBar<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ProgressBarTemplateSettings value { nullptr };
    check_hresult(static_cast<const IProgressBar &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::IsIndeterminateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IProgressBarStatics &>(static_cast<const D &>(*this))->get_IsIndeterminateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::ShowErrorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IProgressBarStatics &>(static_cast<const D &>(*this))->get_ShowErrorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IProgressBarStatics<D>::ShowPausedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IProgressBarStatics &>(static_cast<const D &>(*this))->get_ShowPausedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ProgressBar impl_IProgressBarFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ProgressBar instance { nullptr };
    check_hresult(static_cast<const IProgressBarFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> hstring impl_ISettingsFlyout<D>::Title() const
{
    hstring value;
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->get_Title(put(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::Title(hstring_ref value) const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->put_Title(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISettingsFlyout<D>::HeaderBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->get_HeaderBackground(put(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::HeaderBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->put_HeaderBackground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISettingsFlyout<D>::HeaderForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->get_HeaderForeground(put(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::HeaderForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->put_HeaderForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_ISettingsFlyout<D>::IconSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->get_IconSource(put(value)));
    return value;
}

template <typename D> void impl_ISettingsFlyout<D>::IconSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->put_IconSource(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings impl_ISettingsFlyout<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::SettingsFlyoutTemplateSettings value { nullptr };
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> event_token impl_ISettingsFlyout<D>::BackClick(const Windows::UI::Xaml::Controls::BackClickEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->add_BackClick(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISettingsFlyout> impl_ISettingsFlyout<D>::BackClick(auto_revoke_t, const Windows::UI::Xaml::Controls::BackClickEventHandler & value) const
{
    return impl::make_event_revoker<D, ISettingsFlyout>(this, &ABI::Windows::UI::Xaml::Controls::ISettingsFlyout::remove_BackClick, BackClick(value));
}

template <typename D> void impl_ISettingsFlyout<D>::BackClick(event_token token) const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->remove_BackClick(token));
}

template <typename D> void impl_ISettingsFlyout<D>::Show() const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->abi_Show());
}

template <typename D> void impl_ISettingsFlyout<D>::ShowIndependent() const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->abi_ShowIndependent());
}

template <typename D> void impl_ISettingsFlyout<D>::Hide() const
{
    check_hresult(static_cast<const ISettingsFlyout &>(static_cast<const D &>(*this))->abi_Hide());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISettingsFlyoutStatics &>(static_cast<const D &>(*this))->get_TitleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::HeaderBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISettingsFlyoutStatics &>(static_cast<const D &>(*this))->get_HeaderBackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::HeaderForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISettingsFlyoutStatics &>(static_cast<const D &>(*this))->get_HeaderForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISettingsFlyoutStatics<D>::IconSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISettingsFlyoutStatics &>(static_cast<const D &>(*this))->get_IconSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SettingsFlyout impl_ISettingsFlyoutFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SettingsFlyout instance { nullptr };
    check_hresult(static_cast<const ISettingsFlyoutFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> double impl_ISlider<D>::IntermediateValue() const
{
    double value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_IntermediateValue(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IntermediateValue(double value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_IntermediateValue(value));
}

template <typename D> double impl_ISlider<D>::StepFrequency() const
{
    double value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_StepFrequency(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::StepFrequency(double value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_StepFrequency(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo impl_ISlider<D>::SnapsTo() const
{
    Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_SnapsTo(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::SnapsTo(Windows::UI::Xaml::Controls::Primitives::SliderSnapsTo value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_SnapsTo(value));
}

template <typename D> double impl_ISlider<D>::TickFrequency() const
{
    double value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_TickFrequency(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::TickFrequency(double value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_TickFrequency(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::TickPlacement impl_ISlider<D>::TickPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::TickPlacement value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_TickPlacement(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::TickPlacement(Windows::UI::Xaml::Controls::Primitives::TickPlacement value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_TickPlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_ISlider<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> bool impl_ISlider<D>::IsDirectionReversed() const
{
    bool value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_IsDirectionReversed(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IsDirectionReversed(bool value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_IsDirectionReversed(value));
}

template <typename D> bool impl_ISlider<D>::IsThumbToolTipEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_IsThumbToolTipEnabled(&value));
    return value;
}

template <typename D> void impl_ISlider<D>::IsThumbToolTipEnabled(bool value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_IsThumbToolTipEnabled(value));
}

template <typename D> Windows::UI::Xaml::Data::IValueConverter impl_ISlider<D>::ThumbToolTipValueConverter() const
{
    Windows::UI::Xaml::Data::IValueConverter value;
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->get_ThumbToolTipValueConverter(put(value)));
    return value;
}

template <typename D> void impl_ISlider<D>::ThumbToolTipValueConverter(const Windows::UI::Xaml::Data::IValueConverter & value) const
{
    check_hresult(static_cast<const ISlider &>(static_cast<const D &>(*this))->put_ThumbToolTipValueConverter(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IntermediateValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_IntermediateValueProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::StepFrequencyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_StepFrequencyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::SnapsToProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_SnapsToProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::TickFrequencyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_TickFrequencyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::TickPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_TickPlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IsDirectionReversedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_IsDirectionReversedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::IsThumbToolTipEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_IsThumbToolTipEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics<D>::ThumbToolTipValueConverterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics &>(static_cast<const D &>(*this))->get_ThumbToolTipValueConverterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Slider impl_ISliderFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Slider instance { nullptr };
    check_hresult(static_cast<const ISliderFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_ISlider2<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ISlider2 &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_ISlider2<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const ISlider2 &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ISlider2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const ISlider2 &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_ISlider2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const ISlider2 &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics2 &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISliderStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISliderStatics2 &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> double impl_IToolTip<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_HorizontalOffset(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::HorizontalOffset(double value) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->put_HorizontalOffset(value));
}

template <typename D> bool impl_IToolTip<D>::IsOpen() const
{
    bool value {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_IsOpen(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::IsOpen(bool value) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->put_IsOpen(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::PlacementMode impl_IToolTip<D>::Placement() const
{
    Windows::UI::Xaml::Controls::Primitives::PlacementMode value {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_Placement(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::Placement(Windows::UI::Xaml::Controls::Primitives::PlacementMode value) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->put_Placement(value));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IToolTip<D>::PlacementTarget() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_PlacementTarget(put(value)));
    return value;
}

template <typename D> void impl_IToolTip<D>::PlacementTarget(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->put_PlacementTarget(get(value)));
}

template <typename D> double impl_IToolTip<D>::VerticalOffset() const
{
    double value {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_VerticalOffset(&value));
    return value;
}

template <typename D> void impl_IToolTip<D>::VerticalOffset(double value) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->put_VerticalOffset(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings impl_IToolTip<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ToolTipTemplateSettings value { nullptr };
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> event_token impl_IToolTip<D>::Closed(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->add_Closed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IToolTip> impl_IToolTip<D>::Closed(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToolTip>(this, &ABI::Windows::UI::Xaml::Controls::IToolTip::remove_Closed, Closed(value));
}

template <typename D> void impl_IToolTip<D>::Closed(event_token token) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->remove_Closed(token));
}

template <typename D> event_token impl_IToolTip<D>::Opened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->add_Opened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IToolTip> impl_IToolTip<D>::Opened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IToolTip>(this, &ABI::Windows::UI::Xaml::Controls::IToolTip::remove_Opened, Opened(value));
}

template <typename D> void impl_IToolTip<D>::Opened(event_token token) const
{
    check_hresult(static_cast<const IToolTip &>(static_cast<const D &>(*this))->remove_Opened(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::HorizontalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipStatics &>(static_cast<const D &>(*this))->get_HorizontalOffsetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::IsOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipStatics &>(static_cast<const D &>(*this))->get_IsOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::PlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipStatics &>(static_cast<const D &>(*this))->get_PlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::PlacementTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipStatics &>(static_cast<const D &>(*this))->get_PlacementTargetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToolTipStatics<D>::VerticalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToolTipStatics &>(static_cast<const D &>(*this))->get_VerticalOffsetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ToolTip impl_IToolTipFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ToolTip instance { nullptr };
    check_hresult(static_cast<const IToolTipFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Button impl_IButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Button instance { nullptr };
    check_hresult(static_cast<const IButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::FlyoutBase impl_IButtonWithFlyout<D>::Flyout() const
{
    Windows::UI::Xaml::Controls::Primitives::FlyoutBase value { nullptr };
    check_hresult(static_cast<const IButtonWithFlyout &>(static_cast<const D &>(*this))->get_Flyout(put(value)));
    return value;
}

template <typename D> void impl_IButtonWithFlyout<D>::Flyout(const Windows::UI::Xaml::Controls::Primitives::FlyoutBase & value) const
{
    check_hresult(static_cast<const IButtonWithFlyout &>(static_cast<const D &>(*this))->put_Flyout(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IButtonStaticsWithFlyout<D>::FlyoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IButtonStaticsWithFlyout &>(static_cast<const D &>(*this))->get_FlyoutProperty(put(value)));
    return value;
}

template <typename D> bool impl_IComboBox<D>::IsDropDownOpen() const
{
    bool value {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_IsDropDownOpen(&value));
    return value;
}

template <typename D> void impl_IComboBox<D>::IsDropDownOpen(bool value) const
{
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->put_IsDropDownOpen(value));
}

template <typename D> bool impl_IComboBox<D>::IsEditable() const
{
    bool value {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_IsEditable(&value));
    return value;
}

template <typename D> bool impl_IComboBox<D>::IsSelectionBoxHighlighted() const
{
    bool value {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_IsSelectionBoxHighlighted(&value));
    return value;
}

template <typename D> double impl_IComboBox<D>::MaxDropDownHeight() const
{
    double value {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_MaxDropDownHeight(&value));
    return value;
}

template <typename D> void impl_IComboBox<D>::MaxDropDownHeight(double value) const
{
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->put_MaxDropDownHeight(value));
}

template <typename D> Windows::IInspectable impl_IComboBox<D>::SelectionBoxItem() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_SelectionBoxItem(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IComboBox<D>::SelectionBoxItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_SelectionBoxItemTemplate(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings impl_IComboBox<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ComboBoxTemplateSettings value { nullptr };
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> event_token impl_IComboBox<D>::DropDownClosed(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->add_DropDownClosed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IComboBox> impl_IComboBox<D>::DropDownClosed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IComboBox>(this, &ABI::Windows::UI::Xaml::Controls::IComboBox::remove_DropDownClosed, DropDownClosed(value));
}

template <typename D> void impl_IComboBox<D>::DropDownClosed(event_token token) const
{
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->remove_DropDownClosed(token));
}

template <typename D> event_token impl_IComboBox<D>::DropDownOpened(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->add_DropDownOpened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IComboBox> impl_IComboBox<D>::DropDownOpened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IComboBox>(this, &ABI::Windows::UI::Xaml::Controls::IComboBox::remove_DropDownOpened, DropDownOpened(value));
}

template <typename D> void impl_IComboBox<D>::DropDownOpened(event_token token) const
{
    check_hresult(static_cast<const IComboBox &>(static_cast<const D &>(*this))->remove_DropDownOpened(token));
}

template <typename D> void impl_IComboBoxOverrides<D>::OnDropDownClosed(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IComboBoxOverrides &>(static_cast<const D &>(*this))->abi_OnDropDownClosed(get(e)));
}

template <typename D> void impl_IComboBoxOverrides<D>::OnDropDownOpened(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IComboBoxOverrides &>(static_cast<const D &>(*this))->abi_OnDropDownOpened(get(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics<D>::IsDropDownOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics &>(static_cast<const D &>(*this))->get_IsDropDownOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics<D>::MaxDropDownHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics &>(static_cast<const D &>(*this))->get_MaxDropDownHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ComboBox impl_IComboBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ComboBox instance { nullptr };
    check_hresult(static_cast<const IComboBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IComboBox2<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IComboBox2<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_IComboBox2<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_IComboBox2<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const IComboBox2 &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics2 &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics2<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics2 &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IComboBox3<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const IComboBox3 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IComboBox3<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const IComboBox3 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> bool impl_IComboBox3<D>::IsTextSearchEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IComboBox3 &>(static_cast<const D &>(*this))->get_IsTextSearchEnabled(&value));
    return value;
}

template <typename D> void impl_IComboBox3<D>::IsTextSearchEnabled(bool value) const
{
    check_hresult(static_cast<const IComboBox3 &>(static_cast<const D &>(*this))->put_IsTextSearchEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics3<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics3 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IComboBoxStatics3<D>::IsTextSearchEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IComboBoxStatics3 &>(static_cast<const D &>(*this))->get_IsTextSearchEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ComboBoxItem impl_IComboBoxItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ComboBoxItem instance { nullptr };
    check_hresult(static_cast<const IComboBoxItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::FlipView impl_IFlipViewFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlipView instance { nullptr };
    check_hresult(static_cast<const IFlipViewFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IFlipView2<D>::UseTouchAnimationsForAllNavigation() const
{
    bool value {};
    check_hresult(static_cast<const IFlipView2 &>(static_cast<const D &>(*this))->get_UseTouchAnimationsForAllNavigation(&value));
    return value;
}

template <typename D> void impl_IFlipView2<D>::UseTouchAnimationsForAllNavigation(bool value) const
{
    check_hresult(static_cast<const IFlipView2 &>(static_cast<const D &>(*this))->put_UseTouchAnimationsForAllNavigation(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlipViewStatics2<D>::UseTouchAnimationsForAllNavigationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFlipViewStatics2 &>(static_cast<const D &>(*this))->get_UseTouchAnimationsForAllNavigationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::FlipViewItem impl_IFlipViewItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlipViewItem instance { nullptr };
    check_hresult(static_cast<const IFlipViewItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Uri impl_IHyperlinkButton<D>::NavigateUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IHyperlinkButton &>(static_cast<const D &>(*this))->get_NavigateUri(put(value)));
    return value;
}

template <typename D> void impl_IHyperlinkButton<D>::NavigateUri(const Windows::Foundation::Uri & value) const
{
    check_hresult(static_cast<const IHyperlinkButton &>(static_cast<const D &>(*this))->put_NavigateUri(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHyperlinkButtonStatics<D>::NavigateUriProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHyperlinkButtonStatics &>(static_cast<const D &>(*this))->get_NavigateUriProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HyperlinkButton impl_IHyperlinkButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::HyperlinkButton instance { nullptr };
    check_hresult(static_cast<const IHyperlinkButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IListBox<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IListBox &>(static_cast<const D &>(*this))->get_SelectedItems(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SelectionMode impl_IListBox<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::SelectionMode value {};
    check_hresult(static_cast<const IListBox &>(static_cast<const D &>(*this))->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListBox<D>::SelectionMode(Windows::UI::Xaml::Controls::SelectionMode value) const
{
    check_hresult(static_cast<const IListBox &>(static_cast<const D &>(*this))->put_SelectionMode(value));
}

template <typename D> void impl_IListBox<D>::ScrollIntoView(const Windows::IInspectable & item) const
{
    check_hresult(static_cast<const IListBox &>(static_cast<const D &>(*this))->abi_ScrollIntoView(get(item)));
}

template <typename D> void impl_IListBox<D>::SelectAll() const
{
    check_hresult(static_cast<const IListBox &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListBoxStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListBoxStatics &>(static_cast<const D &>(*this))->get_SelectionModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListBox impl_IListBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListBox instance { nullptr };
    check_hresult(static_cast<const IListBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IListBox2<D>::SingleSelectionFollowsFocus() const
{
    bool value {};
    check_hresult(static_cast<const IListBox2 &>(static_cast<const D &>(*this))->get_SingleSelectionFollowsFocus(&value));
    return value;
}

template <typename D> void impl_IListBox2<D>::SingleSelectionFollowsFocus(bool value) const
{
    check_hresult(static_cast<const IListBox2 &>(static_cast<const D &>(*this))->put_SingleSelectionFollowsFocus(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListBoxStatics2<D>::SingleSelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListBoxStatics2 &>(static_cast<const D &>(*this))->get_SingleSelectionFollowsFocusProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListBoxItem impl_IListBoxItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListBoxItem instance { nullptr };
    check_hresult(static_cast<const IListBoxItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IListViewBase<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_SelectedItems(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewSelectionMode impl_IListViewBase<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::ListViewSelectionMode value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::SelectionMode(Windows::UI::Xaml::Controls::ListViewSelectionMode value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_SelectionMode(value));
}

template <typename D> bool impl_IListViewBase<D>::IsSwipeEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_IsSwipeEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IsSwipeEnabled(bool value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_IsSwipeEnabled(value));
}

template <typename D> bool impl_IListViewBase<D>::CanDragItems() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_CanDragItems(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::CanDragItems(bool value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_CanDragItems(value));
}

template <typename D> bool impl_IListViewBase<D>::CanReorderItems() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_CanReorderItems(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::CanReorderItems(bool value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_CanReorderItems(value));
}

template <typename D> bool impl_IListViewBase<D>::IsItemClickEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_IsItemClickEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IsItemClickEnabled(bool value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_IsItemClickEnabled(value));
}

template <typename D> double impl_IListViewBase<D>::DataFetchSize() const
{
    double value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_DataFetchSize(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::DataFetchSize(double value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_DataFetchSize(value));
}

template <typename D> double impl_IListViewBase<D>::IncrementalLoadingThreshold() const
{
    double value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_IncrementalLoadingThreshold(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IncrementalLoadingThreshold(double value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_IncrementalLoadingThreshold(value));
}

template <typename D> Windows::UI::Xaml::Controls::IncrementalLoadingTrigger impl_IListViewBase<D>::IncrementalLoadingTrigger() const
{
    Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_IncrementalLoadingTrigger(&value));
    return value;
}

template <typename D> void impl_IListViewBase<D>::IncrementalLoadingTrigger(Windows::UI::Xaml::Controls::IncrementalLoadingTrigger value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_IncrementalLoadingTrigger(value));
}

template <typename D> event_token impl_IListViewBase<D>::ItemClick(const Windows::UI::Xaml::Controls::ItemClickEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->add_ItemClick(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase> impl_IListViewBase<D>::ItemClick(auto_revoke_t, const Windows::UI::Xaml::Controls::ItemClickEventHandler & value) const
{
    return impl::make_event_revoker<D, IListViewBase>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase::remove_ItemClick, ItemClick(value));
}

template <typename D> void impl_IListViewBase<D>::ItemClick(event_token token) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->remove_ItemClick(token));
}

template <typename D> event_token impl_IListViewBase<D>::DragItemsStarting(const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->add_DragItemsStarting(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase> impl_IListViewBase<D>::DragItemsStarting(auto_revoke_t, const Windows::UI::Xaml::Controls::DragItemsStartingEventHandler & value) const
{
    return impl::make_event_revoker<D, IListViewBase>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase::remove_DragItemsStarting, DragItemsStarting(value));
}

template <typename D> void impl_IListViewBase<D>::DragItemsStarting(event_token token) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->remove_DragItemsStarting(token));
}

template <typename D> void impl_IListViewBase<D>::ScrollIntoView(const Windows::IInspectable & item) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->abi_ScrollIntoView(get(item)));
}

template <typename D> void impl_IListViewBase<D>::SelectAll() const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->abi_SelectAll());
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult> impl_IListViewBase<D>::LoadMoreItemsAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::UI::Xaml::Data::LoadMoreItemsResult> returnValue;
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->abi_LoadMoreItemsAsync(put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IListViewBase<D>::ScrollIntoView(const Windows::IInspectable & item, Windows::UI::Xaml::Controls::ScrollIntoViewAlignment alignment) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->abi_ScrollIntoViewWithAlignment(get(item), alignment));
}

template <typename D> Windows::IInspectable impl_IListViewBase<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListViewBase<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IListViewBase<D>::HeaderTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->get_HeaderTransitions(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase<D>::HeaderTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IListViewBase &>(static_cast<const D &>(*this))->put_HeaderTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_SelectionModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsSwipeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IsSwipeEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::CanDragItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_CanDragItemsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::CanReorderItemsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_CanReorderItemsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsItemClickEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IsItemClickEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::DataFetchSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_DataFetchSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IncrementalLoadingThresholdProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IncrementalLoadingThresholdProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IncrementalLoadingTriggerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IncrementalLoadingTriggerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::SemanticZoomOwnerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_SemanticZoomOwnerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsActiveViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IsActiveViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::IsZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_IsZoomedInViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics<D>::HeaderTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics &>(static_cast<const D &>(*this))->get_HeaderTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewBase impl_IListViewBaseFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewBase instance { nullptr };
    check_hresult(static_cast<const IListViewBaseFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IListViewBase2<D>::ShowsScrollingPlaceholders() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->get_ShowsScrollingPlaceholders(&value));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::ShowsScrollingPlaceholders(bool value) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->put_ShowsScrollingPlaceholders(value));
}

template <typename D> event_token impl_IListViewBase2<D>::ContainerContentChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->add_ContainerContentChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase2> impl_IListViewBase2<D>::ContainerContentChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ContainerContentChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase2>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase2::remove_ContainerContentChanging, ContainerContentChanging(value));
}

template <typename D> void impl_IListViewBase2<D>::ContainerContentChanging(event_token token) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->remove_ContainerContentChanging(token));
}

template <typename D> void impl_IListViewBase2<D>::SetDesiredContainerUpdateDuration(const Windows::Foundation::TimeSpan & duration) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->abi_SetDesiredContainerUpdateDuration(get(duration)));
}

template <typename D> Windows::IInspectable impl_IListViewBase2<D>::Footer() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->get_Footer(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::Footer(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->put_Footer(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListViewBase2<D>::FooterTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->get_FooterTemplate(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::FooterTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->put_FooterTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Animation::TransitionCollection impl_IListViewBase2<D>::FooterTransitions() const
{
    Windows::UI::Xaml::Media::Animation::TransitionCollection value { nullptr };
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->get_FooterTransitions(put(value)));
    return value;
}

template <typename D> void impl_IListViewBase2<D>::FooterTransitions(const Windows::UI::Xaml::Media::Animation::TransitionCollection & value) const
{
    check_hresult(static_cast<const IListViewBase2 &>(static_cast<const D &>(*this))->put_FooterTransitions(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::ShowsScrollingPlaceholdersProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics2 &>(static_cast<const D &>(*this))->get_ShowsScrollingPlaceholdersProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics2 &>(static_cast<const D &>(*this))->get_FooterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics2 &>(static_cast<const D &>(*this))->get_FooterTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics2<D>::FooterTransitionsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics2 &>(static_cast<const D &>(*this))->get_FooterTransitionsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewReorderMode impl_IListViewBase3<D>::ReorderMode() const
{
    Windows::UI::Xaml::Controls::ListViewReorderMode value {};
    check_hresult(static_cast<const IListViewBase3 &>(static_cast<const D &>(*this))->get_ReorderMode(&value));
    return value;
}

template <typename D> void impl_IListViewBase3<D>::ReorderMode(Windows::UI::Xaml::Controls::ListViewReorderMode value) const
{
    check_hresult(static_cast<const IListViewBase3 &>(static_cast<const D &>(*this))->put_ReorderMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics3<D>::ReorderModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics3 &>(static_cast<const D &>(*this))->get_ReorderModeProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange> impl_IListViewBase4<D>::SelectedRanges() const
{
    Windows::Foundation::Collections::IVectorView<Windows::UI::Xaml::Data::ItemIndexRange> value;
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->get_SelectedRanges(put(value)));
    return value;
}

template <typename D> bool impl_IListViewBase4<D>::IsMultiSelectCheckBoxEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->get_IsMultiSelectCheckBoxEnabled(&value));
    return value;
}

template <typename D> void impl_IListViewBase4<D>::IsMultiSelectCheckBoxEnabled(bool value) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->put_IsMultiSelectCheckBoxEnabled(value));
}

template <typename D> event_token impl_IListViewBase4<D>::DragItemsCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->add_DragItemsCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::DragItemsCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::DragItemsCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_DragItemsCompleted, DragItemsCompleted(value));
}

template <typename D> void impl_IListViewBase4<D>::DragItemsCompleted(event_token token) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->remove_DragItemsCompleted(token));
}

template <typename D> event_token impl_IListViewBase4<D>::ChoosingItemContainer(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->add_ChoosingItemContainer(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::ChoosingItemContainer(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingItemContainerEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_ChoosingItemContainer, ChoosingItemContainer(value));
}

template <typename D> void impl_IListViewBase4<D>::ChoosingItemContainer(event_token token) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->remove_ChoosingItemContainer(token));
}

template <typename D> event_token impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->add_ChoosingGroupHeaderContainer(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListViewBase4> impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListViewBase, Windows::UI::Xaml::Controls::ChoosingGroupHeaderContainerEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListViewBase4>(this, &ABI::Windows::UI::Xaml::Controls::IListViewBase4::remove_ChoosingGroupHeaderContainer, ChoosingGroupHeaderContainer(value));
}

template <typename D> void impl_IListViewBase4<D>::ChoosingGroupHeaderContainer(event_token token) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->remove_ChoosingGroupHeaderContainer(token));
}

template <typename D> void impl_IListViewBase4<D>::SelectRange(const Windows::UI::Xaml::Data::ItemIndexRange & itemIndexRange) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->abi_SelectRange(get(itemIndexRange)));
}

template <typename D> void impl_IListViewBase4<D>::DeselectRange(const Windows::UI::Xaml::Data::ItemIndexRange & itemIndexRange) const
{
    check_hresult(static_cast<const IListViewBase4 &>(static_cast<const D &>(*this))->abi_DeselectRange(get(itemIndexRange)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics4<D>::IsMultiSelectCheckBoxEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics4 &>(static_cast<const D &>(*this))->get_IsMultiSelectCheckBoxEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IListViewBase5<D>::SingleSelectionFollowsFocus() const
{
    bool value {};
    check_hresult(static_cast<const IListViewBase5 &>(static_cast<const D &>(*this))->get_SingleSelectionFollowsFocus(&value));
    return value;
}

template <typename D> void impl_IListViewBase5<D>::SingleSelectionFollowsFocus(bool value) const
{
    check_hresult(static_cast<const IListViewBase5 &>(static_cast<const D &>(*this))->put_SingleSelectionFollowsFocus(value));
}

template <typename D> bool impl_IListViewBase5<D>::IsDragSource() const
{
    bool returnValue {};
    check_hresult(static_cast<const IListViewBase5 &>(static_cast<const D &>(*this))->abi_IsDragSource(&returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListViewBaseStatics5<D>::SingleSelectionFollowsFocusProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListViewBaseStatics5 &>(static_cast<const D &>(*this))->get_SingleSelectionFollowsFocusProperty(put(value)));
    return value;
}

template <typename D> bool impl_IVirtualizingStackPanel<D>::AreScrollSnapPointsRegular() const
{
    bool value {};
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->get_AreScrollSnapPointsRegular(&value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanel<D>::AreScrollSnapPointsRegular(bool value) const
{
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->put_AreScrollSnapPointsRegular(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IVirtualizingStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> event_token impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->add_CleanUpVirtualizedItemEvent(get(value), &token));
    return token;
}

template <typename D> event_revoker<IVirtualizingStackPanel> impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(auto_revoke_t, const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventHandler & value) const
{
    return impl::make_event_revoker<D, IVirtualizingStackPanel>(this, &ABI::Windows::UI::Xaml::Controls::IVirtualizingStackPanel::remove_CleanUpVirtualizedItemEvent, CleanUpVirtualizedItemEvent(value));
}

template <typename D> void impl_IVirtualizingStackPanel<D>::CleanUpVirtualizedItemEvent(event_token token) const
{
    check_hresult(static_cast<const IVirtualizingStackPanel &>(static_cast<const D &>(*this))->remove_CleanUpVirtualizedItemEvent(token));
}

template <typename D> void impl_IVirtualizingStackPanelOverrides<D>::OnCleanUpVirtualizedItem(const Windows::UI::Xaml::Controls::CleanUpVirtualizedItemEventArgs & e) const
{
    check_hresult(static_cast<const IVirtualizingStackPanelOverrides &>(static_cast<const D &>(*this))->abi_OnCleanUpVirtualizedItem(get(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::AreScrollSnapPointsRegularProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->get_AreScrollSnapPointsRegularProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::VirtualizationModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->get_VirtualizationModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::VirtualizationMode impl_IVirtualizingStackPanelStatics<D>::GetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::VirtualizationMode value {};
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->abi_GetVirtualizationMode(get(element), &value));
    return value;
}

template <typename D> void impl_IVirtualizingStackPanelStatics<D>::SetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::VirtualizationMode value) const
{
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->abi_SetVirtualizationMode(get(element), value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IVirtualizingStackPanelStatics<D>::IsVirtualizingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->get_IsVirtualizingProperty(put(value)));
    return value;
}

template <typename D> bool impl_IVirtualizingStackPanelStatics<D>::GetIsVirtualizing(const Windows::UI::Xaml::DependencyObject & o) const
{
    bool value {};
    check_hresult(static_cast<const IVirtualizingStackPanelStatics &>(static_cast<const D &>(*this))->abi_GetIsVirtualizing(get(o), &value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CheckBox impl_ICheckBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CheckBox instance { nullptr };
    check_hresult(static_cast<const ICheckBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> hstring impl_IRadioButton<D>::GroupName() const
{
    hstring value;
    check_hresult(static_cast<const IRadioButton &>(static_cast<const D &>(*this))->get_GroupName(put(value)));
    return value;
}

template <typename D> void impl_IRadioButton<D>::GroupName(hstring_ref value) const
{
    check_hresult(static_cast<const IRadioButton &>(static_cast<const D &>(*this))->put_GroupName(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IRadioButtonStatics<D>::GroupNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IRadioButtonStatics &>(static_cast<const D &>(*this))->get_GroupNameProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::RadioButton impl_IRadioButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::RadioButton instance { nullptr };
    check_hresult(static_cast<const IRadioButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_ICommandBarElement<D>::IsCompact() const
{
    bool value {};
    check_hresult(static_cast<const ICommandBarElement &>(static_cast<const D &>(*this))->get_IsCompact(&value));
    return value;
}

template <typename D> void impl_ICommandBarElement<D>::IsCompact(bool value) const
{
    check_hresult(static_cast<const ICommandBarElement &>(static_cast<const D &>(*this))->put_IsCompact(value));
}

template <typename D> bool impl_ICommandBarElement2<D>::IsInOverflow() const
{
    bool value {};
    check_hresult(static_cast<const ICommandBarElement2 &>(static_cast<const D &>(*this))->get_IsInOverflow(&value));
    return value;
}

template <typename D> int32_t impl_ICommandBarElement2<D>::DynamicOverflowOrder() const
{
    int32_t value {};
    check_hresult(static_cast<const ICommandBarElement2 &>(static_cast<const D &>(*this))->get_DynamicOverflowOrder(&value));
    return value;
}

template <typename D> void impl_ICommandBarElement2<D>::DynamicOverflowOrder(int32_t value) const
{
    check_hresult(static_cast<const ICommandBarElement2 &>(static_cast<const D &>(*this))->put_DynamicOverflowOrder(value));
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePickerDateChangedEventArgs<D>::NewDate() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarDatePickerDateChangedEventArgs &>(static_cast<const D &>(*this))->get_NewDate(put(value)));
    return value;
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePickerDateChangedEventArgs<D>::OldDate() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarDatePickerDateChangedEventArgs &>(static_cast<const D &>(*this))->get_OldDate(put(value)));
    return value;
}

template <typename D> bool impl_ICalendarViewDayItemChangingEventArgs<D>::InRecycleQueue() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarViewDayItemChangingEventArgs &>(static_cast<const D &>(*this))->get_InRecycleQueue(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDayItem impl_ICalendarViewDayItemChangingEventArgs<D>::Item() const
{
    Windows::UI::Xaml::Controls::CalendarViewDayItem value { nullptr };
    check_hresult(static_cast<const ICalendarViewDayItemChangingEventArgs &>(static_cast<const D &>(*this))->get_Item(put(value)));
    return value;
}

template <typename D> uint32_t impl_ICalendarViewDayItemChangingEventArgs<D>::Phase() const
{
    uint32_t value {};
    check_hresult(static_cast<const ICalendarViewDayItemChangingEventArgs &>(static_cast<const D &>(*this))->get_Phase(&value));
    return value;
}

template <typename D> void impl_ICalendarViewDayItemChangingEventArgs<D>::RegisterUpdateCallback(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & callback) const
{
    check_hresult(static_cast<const ICalendarViewDayItemChangingEventArgs &>(static_cast<const D &>(*this))->abi_RegisterUpdateCallback(get(callback)));
}

template <typename D> void impl_ICalendarViewDayItemChangingEventArgs<D>::RegisterUpdateCallback(uint32_t callbackPhase, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & callback) const
{
    check_hresult(static_cast<const ICalendarViewDayItemChangingEventArgs &>(static_cast<const D &>(*this))->abi_RegisterUpdateCallbackWithPhase(callbackPhase, get(callback)));
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> impl_ICalendarViewSelectedDatesChangedEventArgs<D>::AddedDates() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarViewSelectedDatesChangedEventArgs &>(static_cast<const D &>(*this))->get_AddedDates(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> impl_ICalendarViewSelectedDatesChangedEventArgs<D>::RemovedDates() const
{
    Windows::Foundation::Collections::IVectorView<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarViewSelectedDatesChangedEventArgs &>(static_cast<const D &>(*this))->get_RemovedDates(put(value)));
    return value;
}

template <typename D> void impl_IContentDialogButtonClickDeferral<D>::Complete() const
{
    check_hresult(static_cast<const IContentDialogButtonClickDeferral &>(static_cast<const D &>(*this))->abi_Complete());
}

template <typename D> bool impl_IContentDialogButtonClickEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const IContentDialogButtonClickEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IContentDialogButtonClickEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const IContentDialogButtonClickEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral impl_IContentDialogButtonClickEventArgs<D>::GetDeferral() const
{
    Windows::UI::Xaml::Controls::ContentDialogButtonClickDeferral returnValue { nullptr };
    check_hresult(static_cast<const IContentDialogButtonClickEventArgs &>(static_cast<const D &>(*this))->abi_GetDeferral(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogResult impl_IContentDialogClosedEventArgs<D>::Result() const
{
    Windows::UI::Xaml::Controls::ContentDialogResult value {};
    check_hresult(static_cast<const IContentDialogClosedEventArgs &>(static_cast<const D &>(*this))->get_Result(&value));
    return value;
}

template <typename D> void impl_IContentDialogClosingDeferral<D>::Complete() const
{
    check_hresult(static_cast<const IContentDialogClosingDeferral &>(static_cast<const D &>(*this))->abi_Complete());
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogResult impl_IContentDialogClosingEventArgs<D>::Result() const
{
    Windows::UI::Xaml::Controls::ContentDialogResult value {};
    check_hresult(static_cast<const IContentDialogClosingEventArgs &>(static_cast<const D &>(*this))->get_Result(&value));
    return value;
}

template <typename D> bool impl_IContentDialogClosingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const IContentDialogClosingEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IContentDialogClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const IContentDialogClosingEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialogClosingDeferral impl_IContentDialogClosingEventArgs<D>::GetDeferral() const
{
    Windows::UI::Xaml::Controls::ContentDialogClosingDeferral returnValue { nullptr };
    check_hresult(static_cast<const IContentDialogClosingEventArgs &>(static_cast<const D &>(*this))->abi_GetDeferral(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerValueChangedEventArgs<D>::OldDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickerValueChangedEventArgs &>(static_cast<const D &>(*this))->get_OldDate(put(value)));
    return value;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerValueChangedEventArgs<D>::NewDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickerValueChangedEventArgs &>(static_cast<const D &>(*this))->get_NewDate(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction impl_IDynamicOverflowItemsChangingEventArgs<D>::Action() const
{
    Windows::UI::Xaml::Controls::CommandBarDynamicOverflowAction value {};
    check_hresult(static_cast<const IDynamicOverflowItemsChangingEventArgs &>(static_cast<const D &>(*this))->get_Action(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HubSection impl_IHubSectionHeaderClickEventArgs<D>::Section() const
{
    Windows::UI::Xaml::Controls::HubSection value { nullptr };
    check_hresult(static_cast<const IHubSectionHeaderClickEventArgs &>(static_cast<const D &>(*this))->get_Section(put(value)));
    return value;
}

template <typename D> hstring impl_IListViewPersistenceHelperStatics<D>::GetRelativeScrollPosition(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler & itemToKeyHandler) const
{
    hstring returnValue;
    check_hresult(static_cast<const IListViewPersistenceHelperStatics &>(static_cast<const D &>(*this))->abi_GetRelativeScrollPosition(get(listViewBase), get(itemToKeyHandler), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncAction impl_IListViewPersistenceHelperStatics<D>::SetRelativeScrollPositionAsync(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, hstring_ref relativeScrollPosition, const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler & keyToItemHandler) const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(static_cast<const IListViewPersistenceHelperStatics &>(static_cast<const D &>(*this))->abi_SetRelativeScrollPositionAsync(get(listViewBase), get(relativeScrollPosition), get(keyToItemHandler), put(returnValue)));
    return returnValue;
}

template <typename D> double impl_IScrollViewerView<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewerView &>(static_cast<const D &>(*this))->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewerView<D>::VerticalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewerView &>(static_cast<const D &>(*this))->get_VerticalOffset(&value));
    return value;
}

template <typename D> float impl_IScrollViewerView<D>::ZoomFactor() const
{
    float value {};
    check_hresult(static_cast<const IScrollViewerView &>(static_cast<const D &>(*this))->get_ZoomFactor(&value));
    return value;
}

template <typename D> bool impl_IScrollViewerViewChangedEventArgs<D>::IsIntermediate() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewerViewChangedEventArgs &>(static_cast<const D &>(*this))->get_IsIntermediate(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollViewerView impl_IScrollViewerViewChangingEventArgs<D>::NextView() const
{
    Windows::UI::Xaml::Controls::ScrollViewerView value { nullptr };
    check_hresult(static_cast<const IScrollViewerViewChangingEventArgs &>(static_cast<const D &>(*this))->get_NextView(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollViewerView impl_IScrollViewerViewChangingEventArgs<D>::FinalView() const
{
    Windows::UI::Xaml::Controls::ScrollViewerView value { nullptr };
    check_hresult(static_cast<const IScrollViewerViewChangingEventArgs &>(static_cast<const D &>(*this))->get_FinalView(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerViewChangingEventArgs<D>::IsInertial() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewerViewChangingEventArgs &>(static_cast<const D &>(*this))->get_IsInertial(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxQueryChangedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxQueryChangedEventArgs &>(static_cast<const D &>(*this))->get_QueryText(put(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQueryChangedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxQueryChangedEventArgs &>(static_cast<const D &>(*this))->get_Language(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxQueryChangedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(static_cast<const ISearchBoxQueryChangedEventArgs &>(static_cast<const D &>(*this))->get_LinguisticDetails(put(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQuerySubmittedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_QueryText(put(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxQuerySubmittedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_Language(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxQuerySubmittedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(static_cast<const ISearchBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_LinguisticDetails(put(value)));
    return value;
}

template <typename D> Windows::System::VirtualKeyModifiers impl_ISearchBoxQuerySubmittedEventArgs<D>::KeyModifiers() const
{
    Windows::System::VirtualKeyModifiers value {};
    check_hresult(static_cast<const ISearchBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_KeyModifiers(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxResultSuggestionChosenEventArgs<D>::Tag() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxResultSuggestionChosenEventArgs &>(static_cast<const D &>(*this))->get_Tag(put(value)));
    return value;
}

template <typename D> Windows::System::VirtualKeyModifiers impl_ISearchBoxResultSuggestionChosenEventArgs<D>::KeyModifiers() const
{
    Windows::System::VirtualKeyModifiers value {};
    check_hresult(static_cast<const ISearchBoxResultSuggestionChosenEventArgs &>(static_cast<const D &>(*this))->get_KeyModifiers(&value));
    return value;
}

template <typename D> hstring impl_ISearchBoxSuggestionsRequestedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxSuggestionsRequestedEventArgs &>(static_cast<const D &>(*this))->get_QueryText(put(value)));
    return value;
}

template <typename D> hstring impl_ISearchBoxSuggestionsRequestedEventArgs<D>::Language() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBoxSuggestionsRequestedEventArgs &>(static_cast<const D &>(*this))->get_Language(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchQueryLinguisticDetails impl_ISearchBoxSuggestionsRequestedEventArgs<D>::LinguisticDetails() const
{
    Windows::ApplicationModel::Search::SearchQueryLinguisticDetails value { nullptr };
    check_hresult(static_cast<const ISearchBoxSuggestionsRequestedEventArgs &>(static_cast<const D &>(*this))->get_LinguisticDetails(put(value)));
    return value;
}

template <typename D> Windows::ApplicationModel::Search::SearchSuggestionsRequest impl_ISearchBoxSuggestionsRequestedEventArgs<D>::Request() const
{
    Windows::ApplicationModel::Search::SearchSuggestionsRequest value { nullptr };
    check_hresult(static_cast<const ISearchBoxSuggestionsRequestedEventArgs &>(static_cast<const D &>(*this))->get_Request(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_ISectionsInViewChangedEventArgs<D>::AddedSections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(static_cast<const ISectionsInViewChangedEventArgs &>(static_cast<const D &>(*this))->get_AddedSections(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_ISectionsInViewChangedEventArgs<D>::RemovedSections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(static_cast<const ISectionsInViewChangedEventArgs &>(static_cast<const D &>(*this))->get_RemovedSections(put(value)));
    return value;
}

template <typename D> bool impl_ISplitViewPaneClosingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const ISplitViewPaneClosingEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_ISplitViewPaneClosingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const ISplitViewPaneClosingEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerValueChangedEventArgs<D>::OldTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePickerValueChangedEventArgs &>(static_cast<const D &>(*this))->get_OldTime(put(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerValueChangedEventArgs<D>::NewTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePickerValueChangedEventArgs &>(static_cast<const D &>(*this))->get_NewTime(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewContentLoadingEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewContentLoadingEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewDeferredPermissionRequest<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewDeferredPermissionRequest &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionType impl_IWebViewDeferredPermissionRequest<D>::PermissionType() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionType value {};
    check_hresult(static_cast<const IWebViewDeferredPermissionRequest &>(static_cast<const D &>(*this))->get_PermissionType(&value));
    return value;
}

template <typename D> uint32_t impl_IWebViewDeferredPermissionRequest<D>::Id() const
{
    uint32_t value {};
    check_hresult(static_cast<const IWebViewDeferredPermissionRequest &>(static_cast<const D &>(*this))->get_Id(&value));
    return value;
}

template <typename D> void impl_IWebViewDeferredPermissionRequest<D>::Allow() const
{
    check_hresult(static_cast<const IWebViewDeferredPermissionRequest &>(static_cast<const D &>(*this))->abi_Allow());
}

template <typename D> void impl_IWebViewDeferredPermissionRequest<D>::Deny() const
{
    check_hresult(static_cast<const IWebViewDeferredPermissionRequest &>(static_cast<const D &>(*this))->abi_Deny());
}

template <typename D> Windows::Foundation::Uri impl_IWebViewDOMContentLoadedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewDOMContentLoadedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_IWebViewLongRunningScriptDetectedEventArgs<D>::ExecutionTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const IWebViewLongRunningScriptDetectedEventArgs &>(static_cast<const D &>(*this))->get_ExecutionTime(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewLongRunningScriptDetectedEventArgs<D>::StopPageScriptExecution() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewLongRunningScriptDetectedEventArgs &>(static_cast<const D &>(*this))->get_StopPageScriptExecution(&value));
    return value;
}

template <typename D> void impl_IWebViewLongRunningScriptDetectedEventArgs<D>::StopPageScriptExecution(bool value) const
{
    check_hresult(static_cast<const IWebViewLongRunningScriptDetectedEventArgs &>(static_cast<const D &>(*this))->put_StopPageScriptExecution(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationCompletedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewNavigationCompletedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewNavigationCompletedEventArgs<D>::IsSuccess() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewNavigationCompletedEventArgs &>(static_cast<const D &>(*this))->get_IsSuccess(&value));
    return value;
}

template <typename D> Windows::Web::WebErrorStatus impl_IWebViewNavigationCompletedEventArgs<D>::WebErrorStatus() const
{
    Windows::Web::WebErrorStatus value {};
    check_hresult(static_cast<const IWebViewNavigationCompletedEventArgs &>(static_cast<const D &>(*this))->get_WebErrorStatus(&value));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationFailedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewNavigationFailedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::Web::WebErrorStatus impl_IWebViewNavigationFailedEventArgs<D>::WebErrorStatus() const
{
    Windows::Web::WebErrorStatus value {};
    check_hresult(static_cast<const IWebViewNavigationFailedEventArgs &>(static_cast<const D &>(*this))->get_WebErrorStatus(&value));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNavigationStartingEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewNavigationStartingEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewNavigationStartingEventArgs<D>::Cancel() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewNavigationStartingEventArgs &>(static_cast<const D &>(*this))->get_Cancel(&value));
    return value;
}

template <typename D> void impl_IWebViewNavigationStartingEventArgs<D>::Cancel(bool value) const
{
    check_hresult(static_cast<const IWebViewNavigationStartingEventArgs &>(static_cast<const D &>(*this))->put_Cancel(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNewWindowRequestedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewNewWindowRequestedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewNewWindowRequestedEventArgs<D>::Referrer() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewNewWindowRequestedEventArgs &>(static_cast<const D &>(*this))->get_Referrer(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewNewWindowRequestedEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewNewWindowRequestedEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_IWebViewNewWindowRequestedEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const IWebViewNewWindowRequestedEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewPermissionRequest<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionType impl_IWebViewPermissionRequest<D>::PermissionType() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionType value {};
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->get_PermissionType(&value));
    return value;
}

template <typename D> uint32_t impl_IWebViewPermissionRequest<D>::Id() const
{
    uint32_t value {};
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->get_Id(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionState impl_IWebViewPermissionRequest<D>::State() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionState value {};
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->get_State(&value));
    return value;
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Defer() const
{
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->abi_Defer());
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Allow() const
{
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->abi_Allow());
}

template <typename D> void impl_IWebViewPermissionRequest<D>::Deny() const
{
    check_hresult(static_cast<const IWebViewPermissionRequest &>(static_cast<const D &>(*this))->abi_Deny());
}

template <typename D> Windows::UI::Xaml::Controls::WebViewPermissionRequest impl_IWebViewPermissionRequestedEventArgs<D>::PermissionRequest() const
{
    Windows::UI::Xaml::Controls::WebViewPermissionRequest value { nullptr };
    check_hresult(static_cast<const IWebViewPermissionRequestedEventArgs &>(static_cast<const D &>(*this))->get_PermissionRequest(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewSettings<D>::IsJavaScriptEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewSettings &>(static_cast<const D &>(*this))->get_IsJavaScriptEnabled(&value));
    return value;
}

template <typename D> void impl_IWebViewSettings<D>::IsJavaScriptEnabled(bool value) const
{
    check_hresult(static_cast<const IWebViewSettings &>(static_cast<const D &>(*this))->put_IsJavaScriptEnabled(value));
}

template <typename D> bool impl_IWebViewSettings<D>::IsIndexedDBEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewSettings &>(static_cast<const D &>(*this))->get_IsIndexedDBEnabled(&value));
    return value;
}

template <typename D> void impl_IWebViewSettings<D>::IsIndexedDBEnabled(bool value) const
{
    check_hresult(static_cast<const IWebViewSettings &>(static_cast<const D &>(*this))->put_IsIndexedDBEnabled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewUnsupportedUriSchemeIdentifiedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> bool impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Handled() const
{
    bool value {};
    check_hresult(static_cast<const IWebViewUnsupportedUriSchemeIdentifiedEventArgs &>(static_cast<const D &>(*this))->get_Handled(&value));
    return value;
}

template <typename D> void impl_IWebViewUnsupportedUriSchemeIdentifiedEventArgs<D>::Handled(bool value) const
{
    check_hresult(static_cast<const IWebViewUnsupportedUriSchemeIdentifiedEventArgs &>(static_cast<const D &>(*this))->put_Handled(value));
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnviewableContentIdentifiedEventArgs<D>::Uri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewUnviewableContentIdentifiedEventArgs &>(static_cast<const D &>(*this))->get_Uri(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IWebViewUnviewableContentIdentifiedEventArgs<D>::Referrer() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebViewUnviewableContentIdentifiedEventArgs &>(static_cast<const D &>(*this))->get_Referrer(put(value)));
    return value;
}

template <typename D> hstring impl_IWebViewUnviewableContentIdentifiedEventArgs2<D>::MediaType() const
{
    hstring value;
    check_hresult(static_cast<const IWebViewUnviewableContentIdentifiedEventArgs2 &>(static_cast<const D &>(*this))->get_MediaType(put(value)));
    return value;
}

template <typename D> hstring impl_IAutoSuggestBoxQuerySubmittedEventArgs<D>::QueryText() const
{
    hstring value;
    check_hresult(static_cast<const IAutoSuggestBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_QueryText(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IAutoSuggestBoxQuerySubmittedEventArgs<D>::ChosenSuggestion() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IAutoSuggestBoxQuerySubmittedEventArgs &>(static_cast<const D &>(*this))->get_ChosenSuggestion(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IAutoSuggestBoxSuggestionChosenEventArgs<D>::SelectedItem() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IAutoSuggestBoxSuggestionChosenEventArgs &>(static_cast<const D &>(*this))->get_SelectedItem(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason impl_IAutoSuggestBoxTextChangedEventArgs<D>::Reason() const
{
    Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value {};
    check_hresult(static_cast<const IAutoSuggestBoxTextChangedEventArgs &>(static_cast<const D &>(*this))->get_Reason(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBoxTextChangedEventArgs<D>::Reason(Windows::UI::Xaml::Controls::AutoSuggestionBoxTextChangeReason value) const
{
    check_hresult(static_cast<const IAutoSuggestBoxTextChangedEventArgs &>(static_cast<const D &>(*this))->put_Reason(value));
}

template <typename D> bool impl_IAutoSuggestBoxTextChangedEventArgs<D>::CheckCurrent() const
{
    bool returnValue {};
    check_hresult(static_cast<const IAutoSuggestBoxTextChangedEventArgs &>(static_cast<const D &>(*this))->abi_CheckCurrent(&returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxTextChangedEventArgsStatics<D>::ReasonProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxTextChangedEventArgsStatics &>(static_cast<const D &>(*this))->get_ReasonProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IFlyout<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IFlyout &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_IFlyout<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IFlyout &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_IFlyout<D>::FlyoutPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IFlyout &>(static_cast<const D &>(*this))->get_FlyoutPresenterStyle(put(value)));
    return value;
}

template <typename D> void impl_IFlyout<D>::FlyoutPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IFlyout &>(static_cast<const D &>(*this))->put_FlyoutPresenterStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlyoutStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFlyoutStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFlyoutStatics<D>::FlyoutPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFlyoutStatics &>(static_cast<const D &>(*this))->get_FlyoutPresenterStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Flyout impl_IFlyoutFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Flyout instance { nullptr };
    check_hresult(static_cast<const IFlyoutFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> impl_IMenuFlyout<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> value;
    check_hresult(static_cast<const IMenuFlyout &>(static_cast<const D &>(*this))->get_Items(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Style impl_IMenuFlyout<D>::MenuFlyoutPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IMenuFlyout &>(static_cast<const D &>(*this))->get_MenuFlyoutPresenterStyle(put(value)));
    return value;
}

template <typename D> void impl_IMenuFlyout<D>::MenuFlyoutPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IMenuFlyout &>(static_cast<const D &>(*this))->put_MenuFlyoutPresenterStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutStatics<D>::MenuFlyoutPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutStatics &>(static_cast<const D &>(*this))->get_MenuFlyoutPresenterStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyout impl_IMenuFlyoutFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyout instance { nullptr };
    check_hresult(static_cast<const IMenuFlyoutFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> void impl_IMenuFlyout2<D>::ShowAt(const Windows::UI::Xaml::UIElement & targetElement, const Windows::Foundation::Point & point) const
{
    check_hresult(static_cast<const IMenuFlyout2 &>(static_cast<const D &>(*this))->abi_ShowAt(get(targetElement), get(point)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IIconElement<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IIconElement &>(static_cast<const D &>(*this))->get_Foreground(put(value)));
    return value;
}

template <typename D> void impl_IIconElement<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IIconElement &>(static_cast<const D &>(*this))->put_Foreground(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IIconElementStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IIconElementStatics &>(static_cast<const D &>(*this))->get_ForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkPresenter impl_IInkCanvas<D>::InkPresenter() const
{
    Windows::UI::Input::Inking::InkPresenter value { nullptr };
    check_hresult(static_cast<const IInkCanvas &>(static_cast<const D &>(*this))->get_InkPresenter(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkCanvas impl_IInkCanvasFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkCanvas instance { nullptr };
    check_hresult(static_cast<const IInkCanvasFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IMediaElement<D>::PosterSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_PosterSource(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::PosterSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_PosterSource(get(value)));
}

template <typename D> Windows::Foundation::Uri impl_IMediaElement<D>::Source() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Source(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Source(const Windows::Foundation::Uri & value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Source(get(value)));
}

template <typename D> bool impl_IMediaElement<D>::IsMuted() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_IsMuted(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::IsMuted(bool value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_IsMuted(value));
}

template <typename D> bool impl_IMediaElement<D>::IsAudioOnly() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_IsAudioOnly(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::AutoPlay() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AutoPlay(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AutoPlay(bool value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_AutoPlay(value));
}

template <typename D> double impl_IMediaElement<D>::Volume() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Volume(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Volume(double value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Volume(value));
}

template <typename D> double impl_IMediaElement<D>::Balance() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Balance(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Balance(double value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Balance(value));
}

template <typename D> int32_t impl_IMediaElement<D>::NaturalVideoHeight() const
{
    int32_t value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_NaturalVideoHeight(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::NaturalVideoWidth() const
{
    int32_t value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_NaturalVideoWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Duration impl_IMediaElement<D>::NaturalDuration() const
{
    Windows::UI::Xaml::Duration value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_NaturalDuration(put(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_IMediaElement<D>::Position() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Position(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Position(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Position(get(value)));
}

template <typename D> double impl_IMediaElement<D>::DownloadProgress() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_DownloadProgress(&value));
    return value;
}

template <typename D> double impl_IMediaElement<D>::BufferingProgress() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_BufferingProgress(&value));
    return value;
}

template <typename D> double impl_IMediaElement<D>::DownloadProgressOffset() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_DownloadProgressOffset(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::MediaElementState impl_IMediaElement<D>::CurrentState() const
{
    Windows::UI::Xaml::Media::MediaElementState value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_CurrentState(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::TimelineMarkerCollection impl_IMediaElement<D>::Markers() const
{
    Windows::UI::Xaml::Media::TimelineMarkerCollection value { nullptr };
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Markers(put(value)));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::CanSeek() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_CanSeek(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::CanPause() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_CanPause(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::AudioStreamCount() const
{
    int32_t value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AudioStreamCount(&value));
    return value;
}

template <typename D> Windows::Foundation::IReference<int32_t> impl_IMediaElement<D>::AudioStreamIndex() const
{
    Windows::Foundation::IReference<int32_t> value;
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AudioStreamIndex(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioStreamIndex(const Windows::Foundation::IReference<int32_t> & value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_AudioStreamIndex(get(value)));
}

template <typename D> double impl_IMediaElement<D>::PlaybackRate() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_PlaybackRate(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::PlaybackRate(double value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_PlaybackRate(value));
}

template <typename D> bool impl_IMediaElement<D>::IsLooping() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_IsLooping(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::IsLooping(bool value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_IsLooping(value));
}

template <typename D> Windows::Media::PlayTo::PlayToSource impl_IMediaElement<D>::PlayToSource() const
{
    Windows::Media::PlayTo::PlayToSource value { nullptr };
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_PlayToSource(put(value)));
    return value;
}

template <typename D> double impl_IMediaElement<D>::DefaultPlaybackRate() const
{
    double value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_DefaultPlaybackRate(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::DefaultPlaybackRate(double value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_DefaultPlaybackRate(value));
}

template <typename D> int32_t impl_IMediaElement<D>::AspectRatioWidth() const
{
    int32_t value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AspectRatioWidth(&value));
    return value;
}

template <typename D> int32_t impl_IMediaElement<D>::AspectRatioHeight() const
{
    int32_t value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AspectRatioHeight(&value));
    return value;
}

template <typename D> bool impl_IMediaElement<D>::RealTimePlayback() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_RealTimePlayback(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::RealTimePlayback(bool value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_RealTimePlayback(value));
}

template <typename D> Windows::UI::Xaml::Media::AudioCategory impl_IMediaElement<D>::AudioCategory() const
{
    Windows::UI::Xaml::Media::AudioCategory value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AudioCategory(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioCategory(Windows::UI::Xaml::Media::AudioCategory value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_AudioCategory(value));
}

template <typename D> Windows::UI::Xaml::Media::AudioDeviceType impl_IMediaElement<D>::AudioDeviceType() const
{
    Windows::UI::Xaml::Media::AudioDeviceType value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_AudioDeviceType(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::AudioDeviceType(Windows::UI::Xaml::Media::AudioDeviceType value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_AudioDeviceType(value));
}

template <typename D> Windows::Media::Protection::MediaProtectionManager impl_IMediaElement<D>::ProtectionManager() const
{
    Windows::Media::Protection::MediaProtectionManager value { nullptr };
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_ProtectionManager(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement<D>::ProtectionManager(const Windows::Media::Protection::MediaProtectionManager & value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_ProtectionManager(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoPackingMode impl_IMediaElement<D>::Stereo3DVideoPackingMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Stereo3DVideoPackingMode(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Stereo3DVideoPackingMode(Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Stereo3DVideoPackingMode(value));
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoRenderMode impl_IMediaElement<D>::Stereo3DVideoRenderMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_Stereo3DVideoRenderMode(&value));
    return value;
}

template <typename D> void impl_IMediaElement<D>::Stereo3DVideoRenderMode(Windows::UI::Xaml::Media::Stereo3DVideoRenderMode value) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->put_Stereo3DVideoRenderMode(value));
}

template <typename D> bool impl_IMediaElement<D>::IsStereo3DVideo() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_IsStereo3DVideo(&value));
    return value;
}

template <typename D> event_token impl_IMediaElement<D>::MediaOpened(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_MediaOpened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaOpened(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaOpened, MediaOpened(value));
}

template <typename D> void impl_IMediaElement<D>::MediaOpened(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_MediaOpened(token));
}

template <typename D> event_token impl_IMediaElement<D>::MediaEnded(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_MediaEnded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaEnded(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaEnded, MediaEnded(value));
}

template <typename D> void impl_IMediaElement<D>::MediaEnded(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_MediaEnded(token));
}

template <typename D> event_token impl_IMediaElement<D>::MediaFailed(const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_MediaFailed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MediaFailed(auto_revoke_t, const Windows::UI::Xaml::ExceptionRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MediaFailed, MediaFailed(value));
}

template <typename D> void impl_IMediaElement<D>::MediaFailed(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_MediaFailed(token));
}

template <typename D> event_token impl_IMediaElement<D>::DownloadProgressChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_DownloadProgressChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::DownloadProgressChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_DownloadProgressChanged, DownloadProgressChanged(value));
}

template <typename D> void impl_IMediaElement<D>::DownloadProgressChanged(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_DownloadProgressChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::BufferingProgressChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_BufferingProgressChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::BufferingProgressChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_BufferingProgressChanged, BufferingProgressChanged(value));
}

template <typename D> void impl_IMediaElement<D>::BufferingProgressChanged(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_BufferingProgressChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::CurrentStateChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_CurrentStateChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::CurrentStateChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_CurrentStateChanged, CurrentStateChanged(value));
}

template <typename D> void impl_IMediaElement<D>::CurrentStateChanged(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_CurrentStateChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::MarkerReached(const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_MarkerReached(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::MarkerReached(auto_revoke_t, const Windows::UI::Xaml::Media::TimelineMarkerRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_MarkerReached, MarkerReached(value));
}

template <typename D> void impl_IMediaElement<D>::MarkerReached(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_MarkerReached(token));
}

template <typename D> event_token impl_IMediaElement<D>::RateChanged(const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_RateChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::RateChanged(auto_revoke_t, const Windows::UI::Xaml::Media::RateChangedRoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_RateChanged, RateChanged(value));
}

template <typename D> void impl_IMediaElement<D>::RateChanged(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_RateChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::VolumeChanged(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_VolumeChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::VolumeChanged(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_VolumeChanged, VolumeChanged(value));
}

template <typename D> void impl_IMediaElement<D>::VolumeChanged(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_VolumeChanged(token));
}

template <typename D> event_token impl_IMediaElement<D>::SeekCompleted(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->add_SeekCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement> impl_IMediaElement<D>::SeekCompleted(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMediaElement>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement::remove_SeekCompleted, SeekCompleted(value));
}

template <typename D> void impl_IMediaElement<D>::SeekCompleted(event_token token) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->remove_SeekCompleted(token));
}

template <typename D> void impl_IMediaElement<D>::Stop() const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_Stop());
}

template <typename D> void impl_IMediaElement<D>::Play() const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_Play());
}

template <typename D> void impl_IMediaElement<D>::Pause() const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_Pause());
}

template <typename D> Windows::UI::Xaml::Media::MediaCanPlayResponse impl_IMediaElement<D>::CanPlayType(hstring_ref type) const
{
    Windows::UI::Xaml::Media::MediaCanPlayResponse returnValue {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_CanPlayType(get(type), &returnValue));
    return returnValue;
}

template <typename D> void impl_IMediaElement<D>::SetSource(const Windows::Storage::Streams::IRandomAccessStream & stream, hstring_ref mimeType) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_SetSource(get(stream), get(mimeType)));
}

template <typename D> hstring impl_IMediaElement<D>::GetAudioStreamLanguage(const Windows::Foundation::IReference<int32_t> & index) const
{
    hstring returnValue;
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_GetAudioStreamLanguage(get(index), put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IMediaElement<D>::AddAudioEffect(hstring_ref effectID, bool effectOptional, const Windows::Foundation::Collections::IPropertySet & effectConfiguration) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_AddAudioEffect(get(effectID), effectOptional, get(effectConfiguration)));
}

template <typename D> void impl_IMediaElement<D>::AddVideoEffect(hstring_ref effectID, bool effectOptional, const Windows::Foundation::Collections::IPropertySet & effectConfiguration) const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_AddVideoEffect(get(effectID), effectOptional, get(effectConfiguration)));
}

template <typename D> void impl_IMediaElement<D>::RemoveAllEffects() const
{
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->abi_RemoveAllEffects());
}

template <typename D> Windows::UI::Xaml::Media::Stereo3DVideoPackingMode impl_IMediaElement<D>::ActualStereo3DVideoPackingMode() const
{
    Windows::UI::Xaml::Media::Stereo3DVideoPackingMode value {};
    check_hresult(static_cast<const IMediaElement &>(static_cast<const D &>(*this))->get_ActualStereo3DVideoPackingMode(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PosterSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_PosterSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_SourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsMutedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_IsMutedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsAudioOnlyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_IsAudioOnlyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AutoPlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AutoPlayProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::VolumeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_VolumeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::BalanceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_BalanceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalVideoHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_NaturalVideoHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalVideoWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_NaturalVideoWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::NaturalDurationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_NaturalDurationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_PositionProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DownloadProgressProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_DownloadProgressProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::BufferingProgressProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_BufferingProgressProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DownloadProgressOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_DownloadProgressOffsetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CurrentStateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_CurrentStateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CanSeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_CanSeekProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::CanPauseProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_CanPauseProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioStreamCountProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AudioStreamCountProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioStreamIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AudioStreamIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PlaybackRateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_PlaybackRateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsLoopingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_IsLoopingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::PlayToSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_PlayToSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::DefaultPlaybackRateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_DefaultPlaybackRateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AspectRatioWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AspectRatioWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AspectRatioHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AspectRatioHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::RealTimePlaybackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_RealTimePlaybackProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioCategoryProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AudioCategoryProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::AudioDeviceTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_AudioDeviceTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::ProtectionManagerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_ProtectionManagerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::Stereo3DVideoPackingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_Stereo3DVideoPackingModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::Stereo3DVideoRenderModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_Stereo3DVideoRenderModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::IsStereo3DVideoProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_IsStereo3DVideoProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics<D>::ActualStereo3DVideoPackingModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics &>(static_cast<const D &>(*this))->get_ActualStereo3DVideoPackingModeProperty(put(value)));
    return value;
}

template <typename D> bool impl_IMediaElement2<D>::AreTransportControlsEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->get_AreTransportControlsEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::AreTransportControlsEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->put_AreTransportControlsEnabled(value));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaElement2<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> bool impl_IMediaElement2<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::IsFullWindow(bool value) const
{
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->put_IsFullWindow(value));
}

template <typename D> void impl_IMediaElement2<D>::SetMediaStreamSource(const Windows::Media::Core::IMediaSource & source) const
{
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->abi_SetMediaStreamSource(get(source)));
}

template <typename D> Windows::Foundation::Uri impl_IMediaElement2<D>::PlayToPreferredSourceUri() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->get_PlayToPreferredSourceUri(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement2<D>::PlayToPreferredSourceUri(const Windows::Foundation::Uri & value) const
{
    check_hresult(static_cast<const IMediaElement2 &>(static_cast<const D &>(*this))->put_PlayToPreferredSourceUri(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::AreTransportControlsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics2 &>(static_cast<const D &>(*this))->get_AreTransportControlsEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics2 &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics2 &>(static_cast<const D &>(*this))->get_IsFullWindowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaElementStatics2<D>::PlayToPreferredSourceUriProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaElementStatics2 &>(static_cast<const D &>(*this))->get_PlayToPreferredSourceUriProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaElement3<D>::TransportControls() const
{
    Windows::UI::Xaml::Controls::MediaTransportControls value { nullptr };
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->get_TransportControls(put(value)));
    return value;
}

template <typename D> void impl_IMediaElement3<D>::TransportControls(const Windows::UI::Xaml::Controls::MediaTransportControls & value) const
{
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->put_TransportControls(get(value)));
}

template <typename D> event_token impl_IMediaElement3<D>::PartialMediaFailureDetected(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->add_PartialMediaFailureDetected(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMediaElement3> impl_IMediaElement3<D>::PartialMediaFailureDetected(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::MediaElement, Windows::UI::Xaml::Media::PartialMediaFailureDetectedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IMediaElement3>(this, &ABI::Windows::UI::Xaml::Controls::IMediaElement3::remove_PartialMediaFailureDetected, PartialMediaFailureDetected(value));
}

template <typename D> void impl_IMediaElement3<D>::PartialMediaFailureDetected(event_token token) const
{
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->remove_PartialMediaFailureDetected(token));
}

template <typename D> void impl_IMediaElement3<D>::SetPlaybackSource(const Windows::Media::Playback::IMediaPlaybackSource & source) const
{
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->abi_SetPlaybackSource(get(source)));
}

template <typename D> Windows::Media::Casting::CastingSource impl_IMediaElement3<D>::GetAsCastingSource() const
{
    Windows::Media::Casting::CastingSource returnValue { nullptr };
    check_hresult(static_cast<const IMediaElement3 &>(static_cast<const D &>(*this))->abi_GetAsCastingSource(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Media::Playback::MediaPlayer impl_IMediaPlayerPresenter<D>::MediaPlayer() const
{
    Windows::Media::Playback::MediaPlayer value { nullptr };
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->get_MediaPlayer(put(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::MediaPlayer(const Windows::Media::Playback::MediaPlayer & value) const
{
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->put_MediaPlayer(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaPlayerPresenter<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> bool impl_IMediaPlayerPresenter<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerPresenter<D>::IsFullWindow(bool value) const
{
    check_hresult(static_cast<const IMediaPlayerPresenter &>(static_cast<const D &>(*this))->put_IsFullWindow(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::MediaPlayerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerPresenterStatics &>(static_cast<const D &>(*this))->get_MediaPlayerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerPresenterStatics &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerPresenterStatics<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerPresenterStatics &>(static_cast<const D &>(*this))->get_IsFullWindowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaPlayerPresenter impl_IMediaPlayerPresenterFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaPlayerPresenter instance { nullptr };
    check_hresult(static_cast<const IMediaPlayerPresenterFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Uri impl_IWebView<D>::Source() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->get_Source(put(value)));
    return value;
}

template <typename D> void impl_IWebView<D>::Source(const Windows::Foundation::Uri & value) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->put_Source(get(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IWebView<D>::AllowedScriptNotifyUris() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->get_AllowedScriptNotifyUris(put(value)));
    return value;
}

template <typename D> void impl_IWebView<D>::AllowedScriptNotifyUris(const Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> & value) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->put_AllowedScriptNotifyUris(get(value)));
}

template <typename D> Windows::ApplicationModel::DataTransfer::DataPackage impl_IWebView<D>::DataTransferPackage() const
{
    Windows::ApplicationModel::DataTransfer::DataPackage value { nullptr };
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->get_DataTransferPackage(put(value)));
    return value;
}

template <typename D> event_token impl_IWebView<D>::LoadCompleted(const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->add_LoadCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::LoadCompleted(auto_revoke_t, const Windows::UI::Xaml::Navigation::LoadCompletedEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_LoadCompleted, LoadCompleted(value));
}

template <typename D> void impl_IWebView<D>::LoadCompleted(event_token token) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->remove_LoadCompleted(token));
}

template <typename D> event_token impl_IWebView<D>::ScriptNotify(const Windows::UI::Xaml::Controls::NotifyEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->add_ScriptNotify(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::ScriptNotify(auto_revoke_t, const Windows::UI::Xaml::Controls::NotifyEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_ScriptNotify, ScriptNotify(value));
}

template <typename D> void impl_IWebView<D>::ScriptNotify(event_token token) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->remove_ScriptNotify(token));
}

template <typename D> event_token impl_IWebView<D>::NavigationFailed(const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->add_NavigationFailed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView> impl_IWebView<D>::NavigationFailed(auto_revoke_t, const Windows::UI::Xaml::Controls::WebViewNavigationFailedEventHandler & value) const
{
    return impl::make_event_revoker<D, IWebView>(this, &ABI::Windows::UI::Xaml::Controls::IWebView::remove_NavigationFailed, NavigationFailed(value));
}

template <typename D> void impl_IWebView<D>::NavigationFailed(event_token token) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->remove_NavigationFailed(token));
}

template <typename D> hstring impl_IWebView<D>::InvokeScript(hstring_ref scriptName, array_ref<const hstring> arguments) const
{
    hstring returnValue;
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->abi_InvokeScript(get(scriptName), arguments.size(), get(arguments), put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IWebView<D>::Navigate(const Windows::Foundation::Uri & source) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->abi_Navigate(get(source)));
}

template <typename D> void impl_IWebView<D>::NavigateToString(hstring_ref text) const
{
    check_hresult(static_cast<const IWebView &>(static_cast<const D &>(*this))->abi_NavigateToString(get(text)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> impl_IWebViewStatics<D>::AnyScriptNotifyUri() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> value;
    check_hresult(static_cast<const IWebViewStatics &>(static_cast<const D &>(*this))->get_AnyScriptNotifyUri(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics &>(static_cast<const D &>(*this))->get_SourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::AllowedScriptNotifyUrisProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics &>(static_cast<const D &>(*this))->get_AllowedScriptNotifyUrisProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics<D>::DataTransferPackageProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics &>(static_cast<const D &>(*this))->get_DataTransferPackageProperty(put(value)));
    return value;
}

template <typename D> bool impl_IWebView2<D>::CanGoBack() const
{
    bool value {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->get_CanGoBack(&value));
    return value;
}

template <typename D> bool impl_IWebView2<D>::CanGoForward() const
{
    bool value {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->get_CanGoForward(&value));
    return value;
}

template <typename D> hstring impl_IWebView2<D>::DocumentTitle() const
{
    hstring value;
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->get_DocumentTitle(put(value)));
    return value;
}

template <typename D> event_token impl_IWebView2<D>::NavigationStarting(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_NavigationStarting(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::NavigationStarting(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_NavigationStarting, NavigationStarting(value));
}

template <typename D> void impl_IWebView2<D>::NavigationStarting(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_NavigationStarting(token));
}

template <typename D> event_token impl_IWebView2<D>::ContentLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_ContentLoading(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::ContentLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_ContentLoading, ContentLoading(value));
}

template <typename D> void impl_IWebView2<D>::ContentLoading(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_ContentLoading(token));
}

template <typename D> event_token impl_IWebView2<D>::DOMContentLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_DOMContentLoaded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::DOMContentLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_DOMContentLoaded, DOMContentLoaded(value));
}

template <typename D> void impl_IWebView2<D>::DOMContentLoaded(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_DOMContentLoaded(token));
}

template <typename D> void impl_IWebView2<D>::GoForward() const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_GoForward());
}

template <typename D> void impl_IWebView2<D>::GoBack() const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_GoBack());
}

template <typename D> void impl_IWebView2<D>::Refresh() const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_Refresh());
}

template <typename D> void impl_IWebView2<D>::Stop() const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_Stop());
}

template <typename D> Windows::Foundation::IAsyncAction impl_IWebView2<D>::CapturePreviewToStreamAsync(const Windows::Storage::Streams::IRandomAccessStream & stream) const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_CapturePreviewToStreamAsync(get(stream), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncOperation<hstring> impl_IWebView2<D>::InvokeScriptAsync(hstring_ref scriptName, const Windows::Foundation::Collections::IIterable<hstring> & arguments) const
{
    Windows::Foundation::IAsyncOperation<hstring> returnValue;
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_InvokeScriptAsync(get(scriptName), get(arguments), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> impl_IWebView2<D>::CaptureSelectedContentToDataPackageAsync() const
{
    Windows::Foundation::IAsyncOperation<Windows::ApplicationModel::DataTransfer::DataPackage> returnValue;
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_CaptureSelectedContentToDataPackageAsync(put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IWebView2<D>::NavigateToLocalStreamUri(const Windows::Foundation::Uri & source, const Windows::Web::IUriToStreamResolver & streamResolver) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_NavigateToLocalStreamUri(get(source), get(streamResolver)));
}

template <typename D> Windows::Foundation::Uri impl_IWebView2<D>::BuildLocalStreamUri(hstring_ref contentIdentifier, hstring_ref relativePath) const
{
    Windows::Foundation::Uri returnValue { nullptr };
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_BuildLocalStreamUri(get(contentIdentifier), get(relativePath), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Color impl_IWebView2<D>::DefaultBackgroundColor() const
{
    Windows::UI::Color value {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->get_DefaultBackgroundColor(put(value)));
    return value;
}

template <typename D> void impl_IWebView2<D>::DefaultBackgroundColor(const Windows::UI::Color & value) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->put_DefaultBackgroundColor(get(value)));
}

template <typename D> event_token impl_IWebView2<D>::NavigationCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_NavigationCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::NavigationCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_NavigationCompleted, NavigationCompleted(value));
}

template <typename D> void impl_IWebView2<D>::NavigationCompleted(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_NavigationCompleted(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameNavigationStarting(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_FrameNavigationStarting(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameNavigationStarting(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationStartingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameNavigationStarting, FrameNavigationStarting(value));
}

template <typename D> void impl_IWebView2<D>::FrameNavigationStarting(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_FrameNavigationStarting(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameContentLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_FrameContentLoading(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameContentLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewContentLoadingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameContentLoading, FrameContentLoading(value));
}

template <typename D> void impl_IWebView2<D>::FrameContentLoading(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_FrameContentLoading(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameDOMContentLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_FrameDOMContentLoaded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameDOMContentLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewDOMContentLoadedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameDOMContentLoaded, FrameDOMContentLoaded(value));
}

template <typename D> void impl_IWebView2<D>::FrameDOMContentLoaded(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_FrameDOMContentLoaded(token));
}

template <typename D> event_token impl_IWebView2<D>::FrameNavigationCompleted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_FrameNavigationCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::FrameNavigationCompleted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNavigationCompletedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_FrameNavigationCompleted, FrameNavigationCompleted(value));
}

template <typename D> void impl_IWebView2<D>::FrameNavigationCompleted(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_FrameNavigationCompleted(token));
}

template <typename D> event_token impl_IWebView2<D>::LongRunningScriptDetected(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_LongRunningScriptDetected(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::LongRunningScriptDetected(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewLongRunningScriptDetectedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_LongRunningScriptDetected, LongRunningScriptDetected(value));
}

template <typename D> void impl_IWebView2<D>::LongRunningScriptDetected(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_LongRunningScriptDetected(token));
}

template <typename D> event_token impl_IWebView2<D>::UnsafeContentWarningDisplaying(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_UnsafeContentWarningDisplaying(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::UnsafeContentWarningDisplaying(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_UnsafeContentWarningDisplaying, UnsafeContentWarningDisplaying(value));
}

template <typename D> void impl_IWebView2<D>::UnsafeContentWarningDisplaying(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_UnsafeContentWarningDisplaying(token));
}

template <typename D> event_token impl_IWebView2<D>::UnviewableContentIdentified(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->add_UnviewableContentIdentified(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView2> impl_IWebView2<D>::UnviewableContentIdentified(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnviewableContentIdentifiedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView2>(this, &ABI::Windows::UI::Xaml::Controls::IWebView2::remove_UnviewableContentIdentified, UnviewableContentIdentified(value));
}

template <typename D> void impl_IWebView2<D>::UnviewableContentIdentified(event_token token) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->remove_UnviewableContentIdentified(token));
}

template <typename D> void impl_IWebView2<D>::NavigateWithHttpRequestMessage(const Windows::Web::Http::HttpRequestMessage & requestMessage) const
{
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_NavigateWithHttpRequestMessage(get(requestMessage)));
}

template <typename D> bool impl_IWebView2<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(static_cast<const IWebView2 &>(static_cast<const D &>(*this))->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::CanGoBackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics2 &>(static_cast<const D &>(*this))->get_CanGoBackProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::CanGoForwardProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics2 &>(static_cast<const D &>(*this))->get_CanGoForwardProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::DocumentTitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics2 &>(static_cast<const D &>(*this))->get_DocumentTitleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics2<D>::DefaultBackgroundColorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics2 &>(static_cast<const D &>(*this))->get_DefaultBackgroundColorProperty(put(value)));
    return value;
}

template <typename D> bool impl_IWebView3<D>::ContainsFullScreenElement() const
{
    bool value {};
    check_hresult(static_cast<const IWebView3 &>(static_cast<const D &>(*this))->get_ContainsFullScreenElement(&value));
    return value;
}

template <typename D> event_token impl_IWebView3<D>::ContainsFullScreenElementChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView3 &>(static_cast<const D &>(*this))->add_ContainsFullScreenElementChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView3> impl_IWebView3<D>::ContainsFullScreenElementChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IWebView3>(this, &ABI::Windows::UI::Xaml::Controls::IWebView3::remove_ContainsFullScreenElementChanged, ContainsFullScreenElementChanged(value));
}

template <typename D> void impl_IWebView3<D>::ContainsFullScreenElementChanged(event_token token) const
{
    check_hresult(static_cast<const IWebView3 &>(static_cast<const D &>(*this))->remove_ContainsFullScreenElementChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics3<D>::ContainsFullScreenElementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics3 &>(static_cast<const D &>(*this))->get_ContainsFullScreenElementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewExecutionMode impl_IWebView4<D>::ExecutionMode() const
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode value {};
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->get_ExecutionMode(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> impl_IWebView4<D>::DeferredPermissionRequests() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest> value;
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->get_DeferredPermissionRequests(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewSettings impl_IWebView4<D>::Settings() const
{
    Windows::UI::Xaml::Controls::WebViewSettings value { nullptr };
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->get_Settings(put(value)));
    return value;
}

template <typename D> event_token impl_IWebView4<D>::UnsupportedUriSchemeIdentified(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->add_UnsupportedUriSchemeIdentified(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::UnsupportedUriSchemeIdentified(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewUnsupportedUriSchemeIdentifiedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_UnsupportedUriSchemeIdentified, UnsupportedUriSchemeIdentified(value));
}

template <typename D> void impl_IWebView4<D>::UnsupportedUriSchemeIdentified(event_token token) const
{
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->remove_UnsupportedUriSchemeIdentified(token));
}

template <typename D> event_token impl_IWebView4<D>::NewWindowRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->add_NewWindowRequested(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::NewWindowRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewNewWindowRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_NewWindowRequested, NewWindowRequested(value));
}

template <typename D> void impl_IWebView4<D>::NewWindowRequested(event_token token) const
{
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->remove_NewWindowRequested(token));
}

template <typename D> event_token impl_IWebView4<D>::PermissionRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->add_PermissionRequested(get(value), &token));
    return token;
}

template <typename D> event_revoker<IWebView4> impl_IWebView4<D>::PermissionRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::WebView, Windows::UI::Xaml::Controls::WebViewPermissionRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IWebView4>(this, &ABI::Windows::UI::Xaml::Controls::IWebView4::remove_PermissionRequested, PermissionRequested(value));
}

template <typename D> void impl_IWebView4<D>::PermissionRequested(event_token token) const
{
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->remove_PermissionRequested(token));
}

template <typename D> void impl_IWebView4<D>::AddWebAllowedObject(hstring_ref name, const Windows::IInspectable & pObject) const
{
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->abi_AddWebAllowedObject(get(name), get(pObject)));
}

template <typename D> Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest impl_IWebView4<D>::DeferredPermissionRequestById(uint32_t id) const
{
    Windows::UI::Xaml::Controls::WebViewDeferredPermissionRequest returnValue { nullptr };
    check_hresult(static_cast<const IWebView4 &>(static_cast<const D &>(*this))->abi_DeferredPermissionRequestById(id, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::WebViewExecutionMode impl_IWebViewStatics4<D>::DefaultExecutionMode() const
{
    Windows::UI::Xaml::Controls::WebViewExecutionMode value {};
    check_hresult(static_cast<const IWebViewStatics4 &>(static_cast<const D &>(*this))->get_DefaultExecutionMode(&value));
    return value;
}

template <typename D> Windows::Foundation::IAsyncAction impl_IWebViewStatics4<D>::ClearTemporaryWebDataAsync() const
{
    Windows::Foundation::IAsyncAction returnValue;
    check_hresult(static_cast<const IWebViewStatics4 &>(static_cast<const D &>(*this))->abi_ClearTemporaryWebDataAsync(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::WebView impl_IWebViewFactory4<D>::CreateInstanceWithExecutionMode(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode) const
{
    Windows::UI::Xaml::Controls::WebView instance { nullptr };
    check_hresult(static_cast<const IWebViewFactory4 &>(static_cast<const D &>(*this))->abi_CreateInstanceWithExecutionMode(executionMode, put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusLeft() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->get_XYFocusLeft(put(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusLeft(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->put_XYFocusLeft(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusRight() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->get_XYFocusRight(put(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusRight(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->put_XYFocusRight(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusUp() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->get_XYFocusUp(put(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusUp(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->put_XYFocusUp(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IWebView5<D>::XYFocusDown() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->get_XYFocusDown(put(value)));
    return value;
}

template <typename D> void impl_IWebView5<D>::XYFocusDown(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IWebView5 &>(static_cast<const D &>(*this))->put_XYFocusDown(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics5 &>(static_cast<const D &>(*this))->get_XYFocusLeftProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusRightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics5 &>(static_cast<const D &>(*this))->get_XYFocusRightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusUpProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics5 &>(static_cast<const D &>(*this))->get_XYFocusUpProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewStatics5<D>::XYFocusDownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewStatics5 &>(static_cast<const D &>(*this))->get_XYFocusDownProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IWebViewBrush<D>::SourceName() const
{
    hstring value;
    check_hresult(static_cast<const IWebViewBrush &>(static_cast<const D &>(*this))->get_SourceName(put(value)));
    return value;
}

template <typename D> void impl_IWebViewBrush<D>::SourceName(hstring_ref value) const
{
    check_hresult(static_cast<const IWebViewBrush &>(static_cast<const D &>(*this))->put_SourceName(get(value)));
}

template <typename D> void impl_IWebViewBrush<D>::Redraw() const
{
    check_hresult(static_cast<const IWebViewBrush &>(static_cast<const D &>(*this))->abi_Redraw());
}

template <typename D> void impl_IWebViewBrush<D>::SetSource(const Windows::UI::Xaml::Controls::WebView & source) const
{
    check_hresult(static_cast<const IWebViewBrush &>(static_cast<const D &>(*this))->abi_SetSource(get(source)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWebViewBrushStatics<D>::SourceNameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWebViewBrushStatics &>(static_cast<const D &>(*this))->get_SourceNameProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarSeparatorStatics &>(static_cast<const D &>(*this))->get_IsCompactProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarSeparator impl_IAppBarSeparatorFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarSeparator instance { nullptr };
    check_hresult(static_cast<const IAppBarSeparatorFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarSeparatorStatics3 &>(static_cast<const D &>(*this))->get_IsInOverflowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarSeparatorStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarSeparatorStatics3 &>(static_cast<const D &>(*this))->get_DynamicOverflowOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Uri impl_IBitmapIcon<D>::UriSource() const
{
    Windows::Foundation::Uri value { nullptr };
    check_hresult(static_cast<const IBitmapIcon &>(static_cast<const D &>(*this))->get_UriSource(put(value)));
    return value;
}

template <typename D> void impl_IBitmapIcon<D>::UriSource(const Windows::Foundation::Uri & value) const
{
    check_hresult(static_cast<const IBitmapIcon &>(static_cast<const D &>(*this))->put_UriSource(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IBitmapIconStatics<D>::UriSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IBitmapIconStatics &>(static_cast<const D &>(*this))->get_UriSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::BitmapIcon impl_IBitmapIconFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::BitmapIcon instance { nullptr };
    check_hresult(static_cast<const IBitmapIconFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::IReference<Windows::Foundation::DateTime> impl_ICalendarDatePicker<D>::Date() const
{
    Windows::Foundation::IReference<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_Date(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::Date(const Windows::Foundation::IReference<Windows::Foundation::DateTime> & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_Date(get(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsCalendarOpen() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_IsCalendarOpen(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsCalendarOpen(bool value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_IsCalendarOpen(value));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::DateFormat() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_DateFormat(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DateFormat(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_DateFormat(get(value)));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::IInspectable impl_ICalendarDatePicker<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ICalendarDatePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_ICalendarDatePicker<D>::CalendarViewStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_CalendarViewStyle(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarViewStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_CalendarViewStyle(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarDatePicker<D>::MinDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_MinDate(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::MinDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_MinDate(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarDatePicker<D>::MaxDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_MaxDate(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::MaxDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_MaxDate(get(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsTodayHighlighted() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_IsTodayHighlighted(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsTodayHighlighted(bool value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_IsTodayHighlighted(value));
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDisplayMode impl_ICalendarDatePicker<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_DisplayMode(value));
}

template <typename D> Windows::Globalization::DayOfWeek impl_ICalendarDatePicker<D>::FirstDayOfWeek() const
{
    Windows::Globalization::DayOfWeek value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_FirstDayOfWeek(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::FirstDayOfWeek(Windows::Globalization::DayOfWeek value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_FirstDayOfWeek(value));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::DayOfWeekFormat() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_DayOfWeekFormat(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::DayOfWeekFormat(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_DayOfWeekFormat(get(value)));
}

template <typename D> hstring impl_ICalendarDatePicker<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_CalendarIdentifier(put(value)));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_CalendarIdentifier(get(value)));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsOutOfScopeEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_IsOutOfScopeEnabled(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsOutOfScopeEnabled(bool value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_IsOutOfScopeEnabled(value));
}

template <typename D> bool impl_ICalendarDatePicker<D>::IsGroupLabelVisible() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->get_IsGroupLabelVisible(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker<D>::IsGroupLabelVisible(bool value) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->put_IsGroupLabelVisible(value));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->add_CalendarViewDayItemChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(auto_revoke_t, const Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventHandler & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_CalendarViewDayItemChanging, CalendarViewDayItemChanging(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::CalendarViewDayItemChanging(event_token token) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->remove_CalendarViewDayItemChanging(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::DateChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->add_DateChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::DateChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarDatePicker, Windows::UI::Xaml::Controls::CalendarDatePickerDateChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_DateChanged, DateChanged(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::DateChanged(event_token token) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->remove_DateChanged(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::Opened(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->add_Opened(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::Opened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_Opened, Opened(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::Opened(event_token token) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->remove_Opened(token));
}

template <typename D> event_token impl_ICalendarDatePicker<D>::Closed(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->add_Closed(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarDatePicker> impl_ICalendarDatePicker<D>::Closed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ICalendarDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarDatePicker::remove_Closed, Closed(value));
}

template <typename D> void impl_ICalendarDatePicker<D>::Closed(event_token token) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->remove_Closed(token));
}

template <typename D> void impl_ICalendarDatePicker<D>::SetDisplayDate(const Windows::Foundation::DateTime & date) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->abi_SetDisplayDate(get(date)));
}

template <typename D> void impl_ICalendarDatePicker<D>::SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const
{
    check_hresult(static_cast<const ICalendarDatePicker &>(static_cast<const D &>(*this))->abi_SetYearDecadeDisplayDimensions(columns, rows));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_DateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsCalendarOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_IsCalendarOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DateFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_DateFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::CalendarViewStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_CalendarViewStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::MinDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_MinDateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::MaxDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_MaxDateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsTodayHighlightedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_IsTodayHighlightedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_DisplayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::FirstDayOfWeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_FirstDayOfWeekProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::DayOfWeekFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_DayOfWeekFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_CalendarIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsOutOfScopeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_IsOutOfScopeEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics<D>::IsGroupLabelVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics &>(static_cast<const D &>(*this))->get_IsGroupLabelVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarDatePicker impl_ICalendarDatePickerFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarDatePicker instance { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ICalendarDatePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const ICalendarDatePicker2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarDatePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const ICalendarDatePicker2 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarDatePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarDatePickerStatics2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> hstring impl_ICalendarView<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarIdentifier(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarIdentifier(get(value)));
}

template <typename D> hstring impl_ICalendarView<D>::DayOfWeekFormat() const
{
    hstring value;
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DayOfWeekFormat(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayOfWeekFormat(hstring_ref value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DayOfWeekFormat(get(value)));
}

template <typename D> bool impl_ICalendarView<D>::IsGroupLabelVisible() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_IsGroupLabelVisible(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsGroupLabelVisible(bool value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_IsGroupLabelVisible(value));
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDisplayMode impl_ICalendarView<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewDisplayMode value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DisplayMode(Windows::UI::Xaml::Controls::CalendarViewDisplayMode value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DisplayMode(value));
}

template <typename D> Windows::Globalization::DayOfWeek impl_ICalendarView<D>::FirstDayOfWeek() const
{
    Windows::Globalization::DayOfWeek value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstDayOfWeek(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstDayOfWeek(Windows::Globalization::DayOfWeek value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstDayOfWeek(value));
}

template <typename D> bool impl_ICalendarView<D>::IsOutOfScopeEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_IsOutOfScopeEnabled(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsOutOfScopeEnabled(bool value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_IsOutOfScopeEnabled(value));
}

template <typename D> bool impl_ICalendarView<D>::IsTodayHighlighted() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_IsTodayHighlighted(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::IsTodayHighlighted(bool value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_IsTodayHighlighted(value));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarView<D>::MaxDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MaxDate(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MaxDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MaxDate(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarView<D>::MinDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MinDate(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MinDate(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MinDate(get(value)));
}

template <typename D> int32_t impl_ICalendarView<D>::NumberOfWeeksInView() const
{
    int32_t value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_NumberOfWeeksInView(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::NumberOfWeeksInView(int32_t value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_NumberOfWeeksInView(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime> impl_ICalendarView<D>::SelectedDates() const
{
    Windows::Foundation::Collections::IVector<Windows::Foundation::DateTime> value;
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectedDates(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewSelectionMode impl_ICalendarView<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::CalendarViewSelectionMode value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectionMode(Windows::UI::Xaml::Controls::CalendarViewSelectionMode value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_SelectionMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings impl_ICalendarView<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::CalendarViewTemplateSettings value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::FocusBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FocusBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FocusBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FocusBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedHoverBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectedHoverBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedHoverBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_SelectedHoverBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedPressedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectedPressedBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedPressedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_SelectedPressedBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectedBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_SelectedBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::HoverBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_HoverBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HoverBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_HoverBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::PressedBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_PressedBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::PressedBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_PressedBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemBorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarItemBorderBrush(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarItemBorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::OutOfScopeBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_OutOfScopeBackground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::OutOfScopeBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_OutOfScopeBackground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarItemBackground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarItemBackground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::PressedForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_PressedForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::PressedForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_PressedForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::TodayForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_TodayForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::TodayForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_TodayForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::BlackoutForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_BlackoutForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::BlackoutForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_BlackoutForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::SelectedForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_SelectedForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::SelectedForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_SelectedForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::OutOfScopeForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_OutOfScopeForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::OutOfScopeForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_OutOfScopeForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ICalendarView<D>::CalendarItemForeground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarItemForeground(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemForeground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarItemForeground(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::DayItemFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DayItemFontFamily(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DayItemFontFamily(get(value)));
}

template <typename D> double impl_ICalendarView<D>::DayItemFontSize() const
{
    double value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DayItemFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontSize(double value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DayItemFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::DayItemFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DayItemFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DayItemFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::DayItemFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_DayItemFontWeight(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::DayItemFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_DayItemFontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::TodayFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_TodayFontWeight(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::TodayFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_TodayFontWeight(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::FirstOfMonthLabelFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontFamily(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfMonthLabelFontFamily(get(value)));
}

template <typename D> double impl_ICalendarView<D>::FirstOfMonthLabelFontSize() const
{
    double value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontSize(double value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfMonthLabelFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::FirstOfMonthLabelFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfMonthLabelFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::FirstOfMonthLabelFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontWeight(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfMonthLabelFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfMonthLabelFontWeight(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::MonthYearItemFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MonthYearItemFontFamily(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MonthYearItemFontFamily(get(value)));
}

template <typename D> double impl_ICalendarView<D>::MonthYearItemFontSize() const
{
    double value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MonthYearItemFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontSize(double value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MonthYearItemFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::MonthYearItemFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MonthYearItemFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MonthYearItemFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::MonthYearItemFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_MonthYearItemFontWeight(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::MonthYearItemFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_MonthYearItemFontWeight(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_ICalendarView<D>::FirstOfYearDecadeLabelFontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontFamily(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfYearDecadeLabelFontFamily(get(value)));
}

template <typename D> double impl_ICalendarView<D>::FirstOfYearDecadeLabelFontSize() const
{
    double value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontSize(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontSize(double value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfYearDecadeLabelFontSize(value));
}

template <typename D> Windows::UI::Text::FontStyle impl_ICalendarView<D>::FirstOfYearDecadeLabelFontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontStyle(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfYearDecadeLabelFontStyle(value));
}

template <typename D> Windows::UI::Text::FontWeight impl_ICalendarView<D>::FirstOfYearDecadeLabelFontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontWeight(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::FirstOfYearDecadeLabelFontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_FirstOfYearDecadeLabelFontWeight(get(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_ICalendarView<D>::HorizontalDayItemAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_HorizontalDayItemAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HorizontalDayItemAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_HorizontalDayItemAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_ICalendarView<D>::VerticalDayItemAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_VerticalDayItemAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::VerticalDayItemAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_VerticalDayItemAlignment(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_ICalendarView<D>::HorizontalFirstOfMonthLabelAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_HorizontalFirstOfMonthLabelAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::HorizontalFirstOfMonthLabelAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_HorizontalFirstOfMonthLabelAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_ICalendarView<D>::VerticalFirstOfMonthLabelAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_VerticalFirstOfMonthLabelAlignment(&value));
    return value;
}

template <typename D> void impl_ICalendarView<D>::VerticalFirstOfMonthLabelAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_VerticalFirstOfMonthLabelAlignment(value));
}

template <typename D> Windows::UI::Xaml::Thickness impl_ICalendarView<D>::CalendarItemBorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarItemBorderThickness(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarItemBorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarItemBorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::Style impl_ICalendarView<D>::CalendarViewDayItemStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->get_CalendarViewDayItemStyle(put(value)));
    return value;
}

template <typename D> void impl_ICalendarView<D>::CalendarViewDayItemStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->put_CalendarViewDayItemStyle(get(value)));
}

template <typename D> event_token impl_ICalendarView<D>::CalendarViewDayItemChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->add_CalendarViewDayItemChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarView> impl_ICalendarView<D>::CalendarViewDayItemChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewDayItemChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarView>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarView::remove_CalendarViewDayItemChanging, CalendarViewDayItemChanging(value));
}

template <typename D> void impl_ICalendarView<D>::CalendarViewDayItemChanging(event_token token) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->remove_CalendarViewDayItemChanging(token));
}

template <typename D> event_token impl_ICalendarView<D>::SelectedDatesChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->add_SelectedDatesChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICalendarView> impl_ICalendarView<D>::SelectedDatesChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CalendarView, Windows::UI::Xaml::Controls::CalendarViewSelectedDatesChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICalendarView>(this, &ABI::Windows::UI::Xaml::Controls::ICalendarView::remove_SelectedDatesChanged, SelectedDatesChanged(value));
}

template <typename D> void impl_ICalendarView<D>::SelectedDatesChanged(event_token token) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->remove_SelectedDatesChanged(token));
}

template <typename D> void impl_ICalendarView<D>::SetDisplayDate(const Windows::Foundation::DateTime & date) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->abi_SetDisplayDate(get(date)));
}

template <typename D> void impl_ICalendarView<D>::SetYearDecadeDisplayDimensions(int32_t columns, int32_t rows) const
{
    check_hresult(static_cast<const ICalendarView &>(static_cast<const D &>(*this))->abi_SetYearDecadeDisplayDimensions(columns, rows));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayOfWeekFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DayOfWeekFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsGroupLabelVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_IsGroupLabelVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DisplayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstDayOfWeekProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstDayOfWeekProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsOutOfScopeEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_IsOutOfScopeEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::IsTodayHighlightedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_IsTodayHighlightedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MaxDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MaxDateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MinDateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MinDateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::NumberOfWeeksInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_NumberOfWeeksInViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedDatesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectedDatesProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectionModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_TemplateSettingsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FocusBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FocusBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedHoverBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectedHoverBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedPressedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectedPressedBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectedBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HoverBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_HoverBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::PressedBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_PressedBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarItemBorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::OutOfScopeBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_OutOfScopeBackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarItemBackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::PressedForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_PressedForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TodayForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_TodayForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::BlackoutForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_BlackoutForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::SelectedForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_SelectedForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::OutOfScopeForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_OutOfScopeForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarItemForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DayItemFontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DayItemFontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DayItemFontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::DayItemFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_DayItemFontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::TodayFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_TodayFontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfMonthLabelFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfMonthLabelFontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MonthYearItemFontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MonthYearItemFontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MonthYearItemFontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::MonthYearItemFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_MonthYearItemFontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::FirstOfYearDecadeLabelFontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_FirstOfYearDecadeLabelFontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HorizontalDayItemAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_HorizontalDayItemAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::VerticalDayItemAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_VerticalDayItemAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::HorizontalFirstOfMonthLabelAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_HorizontalFirstOfMonthLabelAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::VerticalFirstOfMonthLabelAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_VerticalFirstOfMonthLabelAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarItemBorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarItemBorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewStatics<D>::CalendarViewDayItemStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewStatics &>(static_cast<const D &>(*this))->get_CalendarViewDayItemStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarView impl_ICalendarViewFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarView instance { nullptr };
    check_hresult(static_cast<const ICalendarViewFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_ICalendarViewDayItem<D>::IsBlackout() const
{
    bool value {};
    check_hresult(static_cast<const ICalendarViewDayItem &>(static_cast<const D &>(*this))->get_IsBlackout(&value));
    return value;
}

template <typename D> void impl_ICalendarViewDayItem<D>::IsBlackout(bool value) const
{
    check_hresult(static_cast<const ICalendarViewDayItem &>(static_cast<const D &>(*this))->put_IsBlackout(value));
}

template <typename D> Windows::Foundation::DateTime impl_ICalendarViewDayItem<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const ICalendarViewDayItem &>(static_cast<const D &>(*this))->get_Date(put(value)));
    return value;
}

template <typename D> void impl_ICalendarViewDayItem<D>::SetDensityColors(const Windows::Foundation::Collections::IIterable<Windows::UI::Color> & colors) const
{
    check_hresult(static_cast<const ICalendarViewDayItem &>(static_cast<const D &>(*this))->abi_SetDensityColors(get(colors)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewDayItemStatics<D>::IsBlackoutProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewDayItemStatics &>(static_cast<const D &>(*this))->get_IsBlackoutProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICalendarViewDayItemStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICalendarViewDayItemStatics &>(static_cast<const D &>(*this))->get_DateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CalendarViewDayItem impl_ICalendarViewDayItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CalendarViewDayItem instance { nullptr };
    check_hresult(static_cast<const ICalendarViewDayItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IDatePicker<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IDatePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_IDatePicker<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_CalendarIdentifier(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::CalendarIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_CalendarIdentifier(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_Date(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Date(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_Date(get(value)));
}

template <typename D> bool impl_IDatePicker<D>::DayVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_DayVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::DayVisible(bool value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_DayVisible(value));
}

template <typename D> bool impl_IDatePicker<D>::MonthVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_MonthVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MonthVisible(bool value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_MonthVisible(value));
}

template <typename D> bool impl_IDatePicker<D>::YearVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_YearVisible(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::YearVisible(bool value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_YearVisible(value));
}

template <typename D> hstring impl_IDatePicker<D>::DayFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_DayFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::DayFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_DayFormat(get(value)));
}

template <typename D> hstring impl_IDatePicker<D>::MonthFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_MonthFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MonthFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_MonthFormat(get(value)));
}

template <typename D> hstring impl_IDatePicker<D>::YearFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_YearFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::YearFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_YearFormat(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::MinYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_MinYear(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MinYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_MinYear(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePicker<D>::MaxYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_MaxYear(put(value)));
    return value;
}

template <typename D> void impl_IDatePicker<D>::MaxYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_MaxYear(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IDatePicker<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IDatePicker<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> event_token impl_IDatePicker<D>::DateChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->add_DateChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IDatePicker> impl_IDatePicker<D>::DateChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::DatePickerValueChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IDatePicker>(this, &ABI::Windows::UI::Xaml::Controls::IDatePicker::remove_DateChanged, DateChanged(value));
}

template <typename D> void impl_IDatePicker<D>::DateChanged(event_token token) const
{
    check_hresult(static_cast<const IDatePicker &>(static_cast<const D &>(*this))->remove_DateChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_CalendarIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_DateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DayVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_DayVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MonthVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_MonthVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::YearVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_YearVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::DayFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_DayFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MonthFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_MonthFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::YearFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_YearFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MinYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_MinYearProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::MaxYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_MaxYearProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::DatePicker impl_IDatePickerFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::DatePicker instance { nullptr };
    check_hresult(static_cast<const IDatePickerFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IDatePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const IDatePicker2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IDatePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const IDatePicker2 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerStatics2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IFontIcon<D>::Glyph() const
{
    hstring value;
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->get_Glyph(put(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::Glyph(hstring_ref value) const
{
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->put_Glyph(get(value)));
}

template <typename D> double impl_IFontIcon<D>::FontSize() const
{
    double value {};
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontSize(double value) const
{
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IFontIcon<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->get_FontFamily(put(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->put_FontFamily(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IFontIcon<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->get_FontWeight(put(value)));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->put_FontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IFontIcon<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IFontIcon<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const IFontIcon &>(static_cast<const D &>(*this))->put_FontStyle(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::GlyphProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics &>(static_cast<const D &>(*this))->get_GlyphProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics &>(static_cast<const D &>(*this))->get_FontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics &>(static_cast<const D &>(*this))->get_FontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics &>(static_cast<const D &>(*this))->get_FontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics &>(static_cast<const D &>(*this))->get_FontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::FontIcon impl_IFontIconFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FontIcon instance { nullptr };
    check_hresult(static_cast<const IFontIconFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IFontIcon2<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IFontIcon2 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IFontIcon2<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(static_cast<const IFontIcon2 &>(static_cast<const D &>(*this))->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics2<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics2 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IFontIcon3<D>::MirroredWhenRightToLeft() const
{
    bool value {};
    check_hresult(static_cast<const IFontIcon3 &>(static_cast<const D &>(*this))->get_MirroredWhenRightToLeft(&value));
    return value;
}

template <typename D> void impl_IFontIcon3<D>::MirroredWhenRightToLeft(bool value) const
{
    check_hresult(static_cast<const IFontIcon3 &>(static_cast<const D &>(*this))->put_MirroredWhenRightToLeft(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFontIconStatics3<D>::MirroredWhenRightToLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFontIconStatics3 &>(static_cast<const D &>(*this))->get_MirroredWhenRightToLeftProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IHub<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IHub<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHub<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IHub<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IHub<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IHub<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> int32_t impl_IHub<D>::DefaultSectionIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_DefaultSectionIndex(&value));
    return value;
}

template <typename D> void impl_IHub<D>::DefaultSectionIndex(int32_t value) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->put_DefaultSectionIndex(value));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_IHub<D>::Sections() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_Sections(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> impl_IHub<D>::SectionsInView() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::HubSection> value;
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_SectionsInView(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::IInspectable> impl_IHub<D>::SectionHeaders() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->get_SectionHeaders(put(value)));
    return value;
}

template <typename D> event_token impl_IHub<D>::SectionHeaderClick(const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->add_SectionHeaderClick(get(value), &token));
    return token;
}

template <typename D> event_revoker<IHub> impl_IHub<D>::SectionHeaderClick(auto_revoke_t, const Windows::UI::Xaml::Controls::HubSectionHeaderClickEventHandler & value) const
{
    return impl::make_event_revoker<D, IHub>(this, &ABI::Windows::UI::Xaml::Controls::IHub::remove_SectionHeaderClick, SectionHeaderClick(value));
}

template <typename D> void impl_IHub<D>::SectionHeaderClick(event_token token) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->remove_SectionHeaderClick(token));
}

template <typename D> event_token impl_IHub<D>::SectionsInViewChanged(const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->add_SectionsInViewChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IHub> impl_IHub<D>::SectionsInViewChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::SectionsInViewChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IHub>(this, &ABI::Windows::UI::Xaml::Controls::IHub::remove_SectionsInViewChanged, SectionsInViewChanged(value));
}

template <typename D> void impl_IHub<D>::SectionsInViewChanged(event_token token) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->remove_SectionsInViewChanged(token));
}

template <typename D> void impl_IHub<D>::ScrollToSection(const Windows::UI::Xaml::Controls::HubSection & section) const
{
    check_hresult(static_cast<const IHub &>(static_cast<const D &>(*this))->abi_ScrollToSection(get(section)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::DefaultSectionIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_DefaultSectionIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::SemanticZoomOwnerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_SemanticZoomOwnerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::IsActiveViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_IsActiveViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubStatics<D>::IsZoomedInViewProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubStatics &>(static_cast<const D &>(*this))->get_IsZoomedInViewProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Hub impl_IHubFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Hub instance { nullptr };
    check_hresult(static_cast<const IHubFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IHubSection<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHubSection<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IHubSection<D>::ContentTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->get_ContentTemplate(put(value)));
    return value;
}

template <typename D> void impl_IHubSection<D>::ContentTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->put_ContentTemplate(get(value)));
}

template <typename D> bool impl_IHubSection<D>::IsHeaderInteractive() const
{
    bool value {};
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->get_IsHeaderInteractive(&value));
    return value;
}

template <typename D> void impl_IHubSection<D>::IsHeaderInteractive(bool value) const
{
    check_hresult(static_cast<const IHubSection &>(static_cast<const D &>(*this))->put_IsHeaderInteractive(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubSectionStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubSectionStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::ContentTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubSectionStatics &>(static_cast<const D &>(*this))->get_ContentTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IHubSectionStatics<D>::IsHeaderInteractiveProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IHubSectionStatics &>(static_cast<const D &>(*this))->get_IsHeaderInteractiveProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::HubSection impl_IHubSectionFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::HubSection instance { nullptr };
    check_hresult(static_cast<const IHubSectionFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsStackPanel<D>::GroupPadding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_GroupPadding(put(value)));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::GroupPadding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->put_GroupPadding(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IItemsStackPanel<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> int32_t impl_IItemsStackPanel<D>::FirstCacheIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_FirstCacheIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::FirstVisibleIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_FirstVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::LastVisibleIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_LastVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsStackPanel<D>::LastCacheIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_LastCacheIndex(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PanelScrollingDirection impl_IItemsStackPanel<D>::ScrollingDirection() const
{
    Windows::UI::Xaml::Controls::PanelScrollingDirection value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_ScrollingDirection(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement impl_IItemsStackPanel<D>::GroupHeaderPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_GroupHeaderPlacement(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const
{
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->put_GroupHeaderPlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode impl_IItemsStackPanel<D>::ItemsUpdatingScrollMode() const
{
    Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_ItemsUpdatingScrollMode(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::ItemsUpdatingScrollMode(Windows::UI::Xaml::Controls::ItemsUpdatingScrollMode value) const
{
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->put_ItemsUpdatingScrollMode(value));
}

template <typename D> double impl_IItemsStackPanel<D>::CacheLength() const
{
    double value {};
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->get_CacheLength(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel<D>::CacheLength(double value) const
{
    check_hresult(static_cast<const IItemsStackPanel &>(static_cast<const D &>(*this))->put_CacheLength(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::GroupPaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsStackPanelStatics &>(static_cast<const D &>(*this))->get_GroupPaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsStackPanelStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::GroupHeaderPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsStackPanelStatics &>(static_cast<const D &>(*this))->get_GroupHeaderPlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics<D>::CacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsStackPanelStatics &>(static_cast<const D &>(*this))->get_CacheLengthProperty(put(value)));
    return value;
}

template <typename D> bool impl_IItemsStackPanel2<D>::AreStickyGroupHeadersEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IItemsStackPanel2 &>(static_cast<const D &>(*this))->get_AreStickyGroupHeadersEnabled(&value));
    return value;
}

template <typename D> void impl_IItemsStackPanel2<D>::AreStickyGroupHeadersEnabled(bool value) const
{
    check_hresult(static_cast<const IItemsStackPanel2 &>(static_cast<const D &>(*this))->put_AreStickyGroupHeadersEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsStackPanelStatics2<D>::AreStickyGroupHeadersEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsStackPanelStatics2 &>(static_cast<const D &>(*this))->get_AreStickyGroupHeadersEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Thickness impl_IItemsWrapGrid<D>::GroupPadding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_GroupPadding(put(value)));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::GroupPadding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_GroupPadding(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IItemsWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_MaximumRowsOrColumns(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_ItemWidth(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_ItemHeight(value));
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::FirstCacheIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_FirstCacheIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::FirstVisibleIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_FirstVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::LastVisibleIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_LastVisibleIndex(&value));
    return value;
}

template <typename D> int32_t impl_IItemsWrapGrid<D>::LastCacheIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_LastCacheIndex(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PanelScrollingDirection impl_IItemsWrapGrid<D>::ScrollingDirection() const
{
    Windows::UI::Xaml::Controls::PanelScrollingDirection value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_ScrollingDirection(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement impl_IItemsWrapGrid<D>::GroupHeaderPlacement() const
{
    Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_GroupHeaderPlacement(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::GroupHeaderPlacement(Windows::UI::Xaml::Controls::Primitives::GroupHeaderPlacement value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_GroupHeaderPlacement(value));
}

template <typename D> double impl_IItemsWrapGrid<D>::CacheLength() const
{
    double value {};
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->get_CacheLength(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid<D>::CacheLength(double value) const
{
    check_hresult(static_cast<const IItemsWrapGrid &>(static_cast<const D &>(*this))->put_CacheLength(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::GroupPaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_GroupPaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumnsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::GroupHeaderPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_GroupHeaderPlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics<D>::CacheLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics &>(static_cast<const D &>(*this))->get_CacheLengthProperty(put(value)));
    return value;
}

template <typename D> bool impl_IItemsWrapGrid2<D>::AreStickyGroupHeadersEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IItemsWrapGrid2 &>(static_cast<const D &>(*this))->get_AreStickyGroupHeadersEnabled(&value));
    return value;
}

template <typename D> void impl_IItemsWrapGrid2<D>::AreStickyGroupHeadersEnabled(bool value) const
{
    check_hresult(static_cast<const IItemsWrapGrid2 &>(static_cast<const D &>(*this))->put_AreStickyGroupHeadersEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IItemsWrapGridStatics2<D>::AreStickyGroupHeadersEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IItemsWrapGridStatics2 &>(static_cast<const D &>(*this))->get_AreStickyGroupHeadersEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::Media::Playback::IMediaPlaybackSource impl_IMediaPlayerElement<D>::Source() const
{
    Windows::Media::Playback::IMediaPlaybackSource value;
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_Source(put(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::Source(const Windows::Media::Playback::IMediaPlaybackSource & value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_Source(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::MediaTransportControls impl_IMediaPlayerElement<D>::TransportControls() const
{
    Windows::UI::Xaml::Controls::MediaTransportControls value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_TransportControls(put(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::TransportControls(const Windows::UI::Xaml::Controls::MediaTransportControls & value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_TransportControls(get(value)));
}

template <typename D> bool impl_IMediaPlayerElement<D>::AreTransportControlsEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_AreTransportControlsEnabled(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::AreTransportControlsEnabled(bool value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_AreTransportControlsEnabled(value));
}

template <typename D> Windows::UI::Xaml::Media::ImageSource impl_IMediaPlayerElement<D>::PosterSource() const
{
    Windows::UI::Xaml::Media::ImageSource value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_PosterSource(put(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::PosterSource(const Windows::UI::Xaml::Media::ImageSource & value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_PosterSource(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Stretch impl_IMediaPlayerElement<D>::Stretch() const
{
    Windows::UI::Xaml::Media::Stretch value {};
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_Stretch(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::Stretch(Windows::UI::Xaml::Media::Stretch value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_Stretch(value));
}

template <typename D> bool impl_IMediaPlayerElement<D>::AutoPlay() const
{
    bool value {};
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_AutoPlay(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::AutoPlay(bool value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_AutoPlay(value));
}

template <typename D> bool impl_IMediaPlayerElement<D>::IsFullWindow() const
{
    bool value {};
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_IsFullWindow(&value));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::IsFullWindow(bool value) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->put_IsFullWindow(value));
}

template <typename D> Windows::Media::Playback::MediaPlayer impl_IMediaPlayerElement<D>::MediaPlayer() const
{
    Windows::Media::Playback::MediaPlayer value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->get_MediaPlayer(put(value)));
    return value;
}

template <typename D> void impl_IMediaPlayerElement<D>::SetMediaPlayer(const Windows::Media::Playback::MediaPlayer & mediaPlayer) const
{
    check_hresult(static_cast<const IMediaPlayerElement &>(static_cast<const D &>(*this))->abi_SetMediaPlayer(get(mediaPlayer)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::SourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_SourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::AreTransportControlsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_AreTransportControlsEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::PosterSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_PosterSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::StretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_StretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::AutoPlayProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_AutoPlayProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::IsFullWindowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_IsFullWindowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMediaPlayerElementStatics<D>::MediaPlayerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementStatics &>(static_cast<const D &>(*this))->get_MediaPlayerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MediaPlayerElement impl_IMediaPlayerElementFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MediaPlayerElement instance { nullptr };
    check_hresult(static_cast<const IMediaPlayerElementFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Media::Geometry impl_IPathIcon<D>::Data() const
{
    Windows::UI::Xaml::Media::Geometry value { nullptr };
    check_hresult(static_cast<const IPathIcon &>(static_cast<const D &>(*this))->get_Data(put(value)));
    return value;
}

template <typename D> void impl_IPathIcon<D>::Data(const Windows::UI::Xaml::Media::Geometry & value) const
{
    check_hresult(static_cast<const IPathIcon &>(static_cast<const D &>(*this))->put_Data(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPathIconStatics<D>::DataProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPathIconStatics &>(static_cast<const D &>(*this))->get_DataProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PathIcon impl_IPathIconFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::PathIcon instance { nullptr };
    check_hresult(static_cast<const IPathIconFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IScrollContentPresenter<D>::CanVerticallyScroll() const
{
    bool value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_CanVerticallyScroll(&value));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::CanVerticallyScroll(bool value) const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->put_CanVerticallyScroll(value));
}

template <typename D> bool impl_IScrollContentPresenter<D>::CanHorizontallyScroll() const
{
    bool value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_CanHorizontallyScroll(&value));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::CanHorizontallyScroll(bool value) const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->put_CanHorizontallyScroll(value));
}

template <typename D> double impl_IScrollContentPresenter<D>::ExtentWidth() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_ExtentWidth(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ExtentHeight() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_ExtentHeight(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ViewportWidth() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_ViewportWidth(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::ViewportHeight() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_ViewportHeight(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollContentPresenter<D>::VerticalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_VerticalOffset(&value));
    return value;
}

template <typename D> Windows::IInspectable impl_IScrollContentPresenter<D>::ScrollOwner() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->get_ScrollOwner(put(value)));
    return value;
}

template <typename D> void impl_IScrollContentPresenter<D>::ScrollOwner(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->put_ScrollOwner(get(value)));
}

template <typename D> void impl_IScrollContentPresenter<D>::LineUp() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_LineUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineDown() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_LineDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineLeft() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_LineLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::LineRight() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_LineRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageUp() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_PageUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageDown() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_PageDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageLeft() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_PageLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::PageRight() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_PageRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelUp() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_MouseWheelUp());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelDown() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_MouseWheelDown());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelLeft() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_MouseWheelLeft());
}

template <typename D> void impl_IScrollContentPresenter<D>::MouseWheelRight() const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_MouseWheelRight());
}

template <typename D> void impl_IScrollContentPresenter<D>::SetHorizontalOffset(double offset) const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_SetHorizontalOffset(offset));
}

template <typename D> void impl_IScrollContentPresenter<D>::SetVerticalOffset(double offset) const
{
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_SetVerticalOffset(offset));
}

template <typename D> Windows::Foundation::Rect impl_IScrollContentPresenter<D>::MakeVisible(const Windows::UI::Xaml::UIElement & visual, const Windows::Foundation::Rect & rectangle) const
{
    Windows::Foundation::Rect returnValue {};
    check_hresult(static_cast<const IScrollContentPresenter &>(static_cast<const D &>(*this))->abi_MakeVisible(get(visual), get(rectangle), put(returnValue)));
    return returnValue;
}

template <typename D> bool impl_ISearchBox<D>::SearchHistoryEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_SearchHistoryEnabled(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::SearchHistoryEnabled(bool value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_SearchHistoryEnabled(value));
}

template <typename D> hstring impl_ISearchBox<D>::SearchHistoryContext() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_SearchHistoryContext(put(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::SearchHistoryContext(hstring_ref value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_SearchHistoryContext(get(value)));
}

template <typename D> hstring impl_ISearchBox<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> hstring impl_ISearchBox<D>::QueryText() const
{
    hstring value;
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_QueryText(put(value)));
    return value;
}

template <typename D> void impl_ISearchBox<D>::QueryText(hstring_ref value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_QueryText(get(value)));
}

template <typename D> bool impl_ISearchBox<D>::FocusOnKeyboardInput() const
{
    bool value {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_FocusOnKeyboardInput(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::FocusOnKeyboardInput(bool value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_FocusOnKeyboardInput(value));
}

template <typename D> bool impl_ISearchBox<D>::ChooseSuggestionOnEnter() const
{
    bool value {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->get_ChooseSuggestionOnEnter(&value));
    return value;
}

template <typename D> void impl_ISearchBox<D>::ChooseSuggestionOnEnter(bool value) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->put_ChooseSuggestionOnEnter(value));
}

template <typename D> event_token impl_ISearchBox<D>::QueryChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->add_QueryChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::QueryChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQueryChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_QueryChanged, QueryChanged(value));
}

template <typename D> void impl_ISearchBox<D>::QueryChanged(event_token token) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->remove_QueryChanged(token));
}

template <typename D> event_token impl_ISearchBox<D>::SuggestionsRequested(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->add_SuggestionsRequested(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::SuggestionsRequested(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxSuggestionsRequestedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_SuggestionsRequested, SuggestionsRequested(value));
}

template <typename D> void impl_ISearchBox<D>::SuggestionsRequested(event_token token) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->remove_SuggestionsRequested(token));
}

template <typename D> event_token impl_ISearchBox<D>::QuerySubmitted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->add_QuerySubmitted(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::QuerySubmitted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxQuerySubmittedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_QuerySubmitted, QuerySubmitted(value));
}

template <typename D> void impl_ISearchBox<D>::QuerySubmitted(event_token token) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->remove_QuerySubmitted(token));
}

template <typename D> event_token impl_ISearchBox<D>::ResultSuggestionChosen(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->add_ResultSuggestionChosen(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::ResultSuggestionChosen(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::Controls::SearchBoxResultSuggestionChosenEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_ResultSuggestionChosen, ResultSuggestionChosen(value));
}

template <typename D> void impl_ISearchBox<D>::ResultSuggestionChosen(event_token token) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->remove_ResultSuggestionChosen(token));
}

template <typename D> event_token impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->add_PrepareForFocusOnKeyboardInput(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISearchBox> impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SearchBox, Windows::UI::Xaml::RoutedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISearchBox>(this, &ABI::Windows::UI::Xaml::Controls::ISearchBox::remove_PrepareForFocusOnKeyboardInput, PrepareForFocusOnKeyboardInput(value));
}

template <typename D> void impl_ISearchBox<D>::PrepareForFocusOnKeyboardInput(event_token token) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->remove_PrepareForFocusOnKeyboardInput(token));
}

template <typename D> void impl_ISearchBox<D>::SetLocalContentSuggestionSettings(const Windows::ApplicationModel::Search::LocalContentSuggestionSettings & settings) const
{
    check_hresult(static_cast<const ISearchBox &>(static_cast<const D &>(*this))->abi_SetLocalContentSuggestionSettings(get(settings)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::SearchHistoryEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_SearchHistoryEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::SearchHistoryContextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_SearchHistoryContextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::QueryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_QueryTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::FocusOnKeyboardInputProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_FocusOnKeyboardInputProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISearchBoxStatics<D>::ChooseSuggestionOnEnterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISearchBoxStatics &>(static_cast<const D &>(*this))->get_ChooseSuggestionOnEnterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SearchBox impl_ISearchBoxFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SearchBox instance { nullptr };
    check_hresult(static_cast<const ISearchBoxFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_ISplitView<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_ISplitView<D>::Pane() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_Pane(put(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::Pane(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_Pane(get(value)));
}

template <typename D> bool impl_ISplitView<D>::IsPaneOpen() const
{
    bool value {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_IsPaneOpen(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::IsPaneOpen(bool value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_IsPaneOpen(value));
}

template <typename D> double impl_ISplitView<D>::OpenPaneLength() const
{
    double value {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_OpenPaneLength(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::OpenPaneLength(double value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_OpenPaneLength(value));
}

template <typename D> double impl_ISplitView<D>::CompactPaneLength() const
{
    double value {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_CompactPaneLength(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::CompactPaneLength(double value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_CompactPaneLength(value));
}

template <typename D> Windows::UI::Xaml::Controls::SplitViewPanePlacement impl_ISplitView<D>::PanePlacement() const
{
    Windows::UI::Xaml::Controls::SplitViewPanePlacement value {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_PanePlacement(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::PanePlacement(Windows::UI::Xaml::Controls::SplitViewPanePlacement value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_PanePlacement(value));
}

template <typename D> Windows::UI::Xaml::Controls::SplitViewDisplayMode impl_ISplitView<D>::DisplayMode() const
{
    Windows::UI::Xaml::Controls::SplitViewDisplayMode value {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_DisplayMode(&value));
    return value;
}

template <typename D> void impl_ISplitView<D>::DisplayMode(Windows::UI::Xaml::Controls::SplitViewDisplayMode value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_DisplayMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings impl_ISplitView<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::SplitViewTemplateSettings value { nullptr };
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_ISplitView<D>::PaneBackground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->get_PaneBackground(put(value)));
    return value;
}

template <typename D> void impl_ISplitView<D>::PaneBackground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->put_PaneBackground(get(value)));
}

template <typename D> event_token impl_ISplitView<D>::PaneClosing(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->add_PaneClosing(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISplitView> impl_ISplitView<D>::PaneClosing(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::UI::Xaml::Controls::SplitViewPaneClosingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ISplitView>(this, &ABI::Windows::UI::Xaml::Controls::ISplitView::remove_PaneClosing, PaneClosing(value));
}

template <typename D> void impl_ISplitView<D>::PaneClosing(event_token token) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->remove_PaneClosing(token));
}

template <typename D> event_token impl_ISplitView<D>::PaneClosed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->add_PaneClosed(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISplitView> impl_ISplitView<D>::PaneClosed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SplitView, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ISplitView>(this, &ABI::Windows::UI::Xaml::Controls::ISplitView::remove_PaneClosed, PaneClosed(value));
}

template <typename D> void impl_ISplitView<D>::PaneClosed(event_token token) const
{
    check_hresult(static_cast<const ISplitView &>(static_cast<const D &>(*this))->remove_PaneClosed(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PaneProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_PaneProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::IsPaneOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_IsPaneOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::OpenPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_OpenPaneLengthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::CompactPaneLengthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_CompactPaneLengthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PanePlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_PanePlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::DisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_DisplayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::TemplateSettingsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_TemplateSettingsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics<D>::PaneBackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics &>(static_cast<const D &>(*this))->get_PaneBackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SplitView impl_ISplitViewFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SplitView instance { nullptr };
    check_hresult(static_cast<const ISplitViewFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ISplitView2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const ISplitView2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ISplitView2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const ISplitView2 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISplitViewStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISplitViewStatics2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Symbol impl_ISymbolIcon<D>::Symbol() const
{
    Windows::UI::Xaml::Controls::Symbol value {};
    check_hresult(static_cast<const ISymbolIcon &>(static_cast<const D &>(*this))->get_Symbol(&value));
    return value;
}

template <typename D> void impl_ISymbolIcon<D>::Symbol(Windows::UI::Xaml::Controls::Symbol value) const
{
    check_hresult(static_cast<const ISymbolIcon &>(static_cast<const D &>(*this))->put_Symbol(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISymbolIconStatics<D>::SymbolProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISymbolIconStatics &>(static_cast<const D &>(*this))->get_SymbolProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SymbolIcon impl_ISymbolIconFactory<D>::CreateInstanceWithSymbol(Windows::UI::Xaml::Controls::Symbol symbol) const
{
    Windows::UI::Xaml::Controls::SymbolIcon instance { nullptr };
    check_hresult(static_cast<const ISymbolIconFactory &>(static_cast<const D &>(*this))->abi_CreateInstanceWithSymbol(symbol, put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_ITimePicker<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_ITimePicker<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> hstring impl_ITimePicker<D>::ClockIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->get_ClockIdentifier(put(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::ClockIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->put_ClockIdentifier(get(value)));
}

template <typename D> int32_t impl_ITimePicker<D>::MinuteIncrement() const
{
    int32_t value {};
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->get_MinuteIncrement(&value));
    return value;
}

template <typename D> void impl_ITimePicker<D>::MinuteIncrement(int32_t value) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->put_MinuteIncrement(value));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePicker<D>::Time() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->get_Time(put(value)));
    return value;
}

template <typename D> void impl_ITimePicker<D>::Time(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->put_Time(get(value)));
}

template <typename D> event_token impl_ITimePicker<D>::TimeChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->add_TimeChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITimePicker> impl_ITimePicker<D>::TimeChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::TimePickerValueChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITimePicker>(this, &ABI::Windows::UI::Xaml::Controls::ITimePicker::remove_TimeChanged, TimeChanged(value));
}

template <typename D> void impl_ITimePicker<D>::TimeChanged(event_token token) const
{
    check_hresult(static_cast<const ITimePicker &>(static_cast<const D &>(*this))->remove_TimeChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::ClockIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics &>(static_cast<const D &>(*this))->get_ClockIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::MinuteIncrementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics &>(static_cast<const D &>(*this))->get_MinuteIncrementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics<D>::TimeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics &>(static_cast<const D &>(*this))->get_TimeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::TimePicker impl_ITimePickerFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::TimePicker instance { nullptr };
    check_hresult(static_cast<const ITimePickerFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_ITimePicker2<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const ITimePicker2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_ITimePicker2<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const ITimePicker2 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerStatics2<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerStatics2 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> bool impl_IAppBar<D>::IsOpen() const
{
    bool value {};
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->get_IsOpen(&value));
    return value;
}

template <typename D> void impl_IAppBar<D>::IsOpen(bool value) const
{
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->put_IsOpen(value));
}

template <typename D> bool impl_IAppBar<D>::IsSticky() const
{
    bool value {};
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->get_IsSticky(&value));
    return value;
}

template <typename D> void impl_IAppBar<D>::IsSticky(bool value) const
{
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->put_IsSticky(value));
}

template <typename D> event_token impl_IAppBar<D>::Opened(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->add_Opened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar> impl_IAppBar<D>::Opened(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar::remove_Opened, Opened(value));
}

template <typename D> void impl_IAppBar<D>::Opened(event_token token) const
{
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->remove_Opened(token));
}

template <typename D> event_token impl_IAppBar<D>::Closed(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->add_Closed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar> impl_IAppBar<D>::Closed(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar::remove_Closed, Closed(value));
}

template <typename D> void impl_IAppBar<D>::Closed(event_token token) const
{
    check_hresult(static_cast<const IAppBar &>(static_cast<const D &>(*this))->remove_Closed(token));
}

template <typename D> void impl_IAppBarOverrides<D>::OnClosed(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IAppBarOverrides &>(static_cast<const D &>(*this))->abi_OnClosed(get(e)));
}

template <typename D> void impl_IAppBarOverrides<D>::OnOpened(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IAppBarOverrides &>(static_cast<const D &>(*this))->abi_OnOpened(get(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics<D>::IsOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarStatics &>(static_cast<const D &>(*this))->get_IsOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics<D>::IsStickyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarStatics &>(static_cast<const D &>(*this))->get_IsStickyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IAppBarFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBar instance { nullptr };
    check_hresult(static_cast<const IAppBarFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarClosedDisplayMode impl_IAppBar2<D>::ClosedDisplayMode() const
{
    Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value {};
    check_hresult(static_cast<const IAppBar2 &>(static_cast<const D &>(*this))->get_ClosedDisplayMode(&value));
    return value;
}

template <typename D> void impl_IAppBar2<D>::ClosedDisplayMode(Windows::UI::Xaml::Controls::AppBarClosedDisplayMode value) const
{
    check_hresult(static_cast<const IAppBar2 &>(static_cast<const D &>(*this))->put_ClosedDisplayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics2<D>::ClosedDisplayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarStatics2 &>(static_cast<const D &>(*this))->get_ClosedDisplayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::AppBarTemplateSettings impl_IAppBar3<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::AppBarTemplateSettings value { nullptr };
    check_hresult(static_cast<const IAppBar3 &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> event_token impl_IAppBar3<D>::Opening(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAppBar3 &>(static_cast<const D &>(*this))->add_Opening(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar3> impl_IAppBar3<D>::Opening(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar3>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar3::remove_Opening, Opening(value));
}

template <typename D> void impl_IAppBar3<D>::Opening(event_token token) const
{
    check_hresult(static_cast<const IAppBar3 &>(static_cast<const D &>(*this))->remove_Opening(token));
}

template <typename D> event_token impl_IAppBar3<D>::Closing(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAppBar3 &>(static_cast<const D &>(*this))->add_Closing(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAppBar3> impl_IAppBar3<D>::Closing(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IAppBar3>(this, &ABI::Windows::UI::Xaml::Controls::IAppBar3::remove_Closing, Closing(value));
}

template <typename D> void impl_IAppBar3<D>::Closing(event_token token) const
{
    check_hresult(static_cast<const IAppBar3 &>(static_cast<const D &>(*this))->remove_Closing(token));
}

template <typename D> void impl_IAppBarOverrides3<D>::OnClosing(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IAppBarOverrides3 &>(static_cast<const D &>(*this))->abi_OnClosing(get(e)));
}

template <typename D> void impl_IAppBarOverrides3<D>::OnOpening(const Windows::IInspectable & e) const
{
    check_hresult(static_cast<const IAppBarOverrides3 &>(static_cast<const D &>(*this))->abi_OnOpening(get(e)));
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IAppBar4<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const IAppBar4 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IAppBar4<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const IAppBar4 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarStatics4<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarStatics4 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> double impl_IAutoSuggestBox<D>::MaxSuggestionListHeight() const
{
    double value {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_MaxSuggestionListHeight(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::MaxSuggestionListHeight(double value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_MaxSuggestionListHeight(value));
}

template <typename D> bool impl_IAutoSuggestBox<D>::IsSuggestionListOpen() const
{
    bool value {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_IsSuggestionListOpen(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::IsSuggestionListOpen(bool value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_IsSuggestionListOpen(value));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::TextMemberPath() const
{
    hstring value;
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_TextMemberPath(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::TextMemberPath(hstring_ref value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_TextMemberPath(get(value)));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::Text() const
{
    hstring value;
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_Text(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::Text(hstring_ref value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_Text(get(value)));
}

template <typename D> bool impl_IAutoSuggestBox<D>::UpdateTextOnSelect() const
{
    bool value {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_UpdateTextOnSelect(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::UpdateTextOnSelect(bool value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_UpdateTextOnSelect(value));
}

template <typename D> hstring impl_IAutoSuggestBox<D>::PlaceholderText() const
{
    hstring value;
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_PlaceholderText(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::PlaceholderText(hstring_ref value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_PlaceholderText(get(value)));
}

template <typename D> Windows::IInspectable impl_IAutoSuggestBox<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> bool impl_IAutoSuggestBox<D>::AutoMaximizeSuggestionArea() const
{
    bool value {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_AutoMaximizeSuggestionArea(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::AutoMaximizeSuggestionArea(bool value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_AutoMaximizeSuggestionArea(value));
}

template <typename D> Windows::UI::Xaml::Style impl_IAutoSuggestBox<D>::TextBoxStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->get_TextBoxStyle(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox<D>::TextBoxStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->put_TextBoxStyle(get(value)));
}

template <typename D> event_token impl_IAutoSuggestBox<D>::SuggestionChosen(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->add_SuggestionChosen(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox> impl_IAutoSuggestBox<D>::SuggestionChosen(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxSuggestionChosenEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox::remove_SuggestionChosen, SuggestionChosen(value));
}

template <typename D> void impl_IAutoSuggestBox<D>::SuggestionChosen(event_token token) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->remove_SuggestionChosen(token));
}

template <typename D> event_token impl_IAutoSuggestBox<D>::TextChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->add_TextChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox> impl_IAutoSuggestBox<D>::TextChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxTextChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox::remove_TextChanged, TextChanged(value));
}

template <typename D> void impl_IAutoSuggestBox<D>::TextChanged(event_token token) const
{
    check_hresult(static_cast<const IAutoSuggestBox &>(static_cast<const D &>(*this))->remove_TextChanged(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::MaxSuggestionListHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_MaxSuggestionListHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::IsSuggestionListOpenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_IsSuggestionListOpenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_TextMemberPathProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_TextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::UpdateTextOnSelectProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_UpdateTextOnSelectProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::PlaceholderTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_PlaceholderTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::AutoMaximizeSuggestionAreaProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_AutoMaximizeSuggestionAreaProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics<D>::TextBoxStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics &>(static_cast<const D &>(*this))->get_TextBoxStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAutoSuggestBox2<D>::QueryIcon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBox2 &>(static_cast<const D &>(*this))->get_QueryIcon(put(value)));
    return value;
}

template <typename D> void impl_IAutoSuggestBox2<D>::QueryIcon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(static_cast<const IAutoSuggestBox2 &>(static_cast<const D &>(*this))->put_QueryIcon(get(value)));
}

template <typename D> event_token impl_IAutoSuggestBox2<D>::QuerySubmitted(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IAutoSuggestBox2 &>(static_cast<const D &>(*this))->add_QuerySubmitted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IAutoSuggestBox2> impl_IAutoSuggestBox2<D>::QuerySubmitted(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::AutoSuggestBox, Windows::UI::Xaml::Controls::AutoSuggestBoxQuerySubmittedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IAutoSuggestBox2>(this, &ABI::Windows::UI::Xaml::Controls::IAutoSuggestBox2::remove_QuerySubmitted, QuerySubmitted(value));
}

template <typename D> void impl_IAutoSuggestBox2<D>::QuerySubmitted(event_token token) const
{
    check_hresult(static_cast<const IAutoSuggestBox2 &>(static_cast<const D &>(*this))->remove_QuerySubmitted(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics2<D>::QueryIconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics2 &>(static_cast<const D &>(*this))->get_QueryIconProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::LightDismissOverlayMode impl_IAutoSuggestBox3<D>::LightDismissOverlayMode() const
{
    Windows::UI::Xaml::Controls::LightDismissOverlayMode value {};
    check_hresult(static_cast<const IAutoSuggestBox3 &>(static_cast<const D &>(*this))->get_LightDismissOverlayMode(&value));
    return value;
}

template <typename D> void impl_IAutoSuggestBox3<D>::LightDismissOverlayMode(Windows::UI::Xaml::Controls::LightDismissOverlayMode value) const
{
    check_hresult(static_cast<const IAutoSuggestBox3 &>(static_cast<const D &>(*this))->put_LightDismissOverlayMode(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAutoSuggestBoxStatics3<D>::LightDismissOverlayModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAutoSuggestBoxStatics3 &>(static_cast<const D &>(*this))->get_LightDismissOverlayModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarOverflowPresenter impl_ICommandBarOverflowPresenterFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CommandBarOverflowPresenter instance { nullptr };
    check_hresult(static_cast<const ICommandBarOverflowPresenterFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IContentDialog<D>::Title() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_Title(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::Title(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_Title(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IContentDialog<D>::TitleTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_TitleTemplate(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::TitleTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_TitleTemplate(get(value)));
}

template <typename D> bool impl_IContentDialog<D>::FullSizeDesired() const
{
    bool value {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_FullSizeDesired(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::FullSizeDesired(bool value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_FullSizeDesired(value));
}

template <typename D> hstring impl_IContentDialog<D>::PrimaryButtonText() const
{
    hstring value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_PrimaryButtonText(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonText(hstring_ref value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_PrimaryButtonText(get(value)));
}

template <typename D> hstring impl_IContentDialog<D>::SecondaryButtonText() const
{
    hstring value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_SecondaryButtonText(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonText(hstring_ref value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_SecondaryButtonText(get(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IContentDialog<D>::PrimaryButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_PrimaryButtonCommand(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonCommand(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_PrimaryButtonCommand(get(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IContentDialog<D>::SecondaryButtonCommand() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_SecondaryButtonCommand(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonCommand(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_SecondaryButtonCommand(get(value)));
}

template <typename D> Windows::IInspectable impl_IContentDialog<D>::PrimaryButtonCommandParameter() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_PrimaryButtonCommandParameter(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonCommandParameter(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_PrimaryButtonCommandParameter(get(value)));
}

template <typename D> Windows::IInspectable impl_IContentDialog<D>::SecondaryButtonCommandParameter() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_SecondaryButtonCommandParameter(put(value)));
    return value;
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonCommandParameter(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_SecondaryButtonCommandParameter(get(value)));
}

template <typename D> bool impl_IContentDialog<D>::IsPrimaryButtonEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_IsPrimaryButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::IsPrimaryButtonEnabled(bool value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_IsPrimaryButtonEnabled(value));
}

template <typename D> bool impl_IContentDialog<D>::IsSecondaryButtonEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->get_IsSecondaryButtonEnabled(&value));
    return value;
}

template <typename D> void impl_IContentDialog<D>::IsSecondaryButtonEnabled(bool value) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->put_IsSecondaryButtonEnabled(value));
}

template <typename D> event_token impl_IContentDialog<D>::Closing(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->add_Closing(get(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Closing(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Closing, Closing(value));
}

template <typename D> void impl_IContentDialog<D>::Closing(event_token token) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->remove_Closing(token));
}

template <typename D> event_token impl_IContentDialog<D>::Closed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->add_Closed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Closed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogClosedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Closed, Closed(value));
}

template <typename D> void impl_IContentDialog<D>::Closed(event_token token) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->remove_Closed(token));
}

template <typename D> event_token impl_IContentDialog<D>::Opened(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->add_Opened(get(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::Opened(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogOpenedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_Opened, Opened(value));
}

template <typename D> void impl_IContentDialog<D>::Opened(event_token token) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->remove_Opened(token));
}

template <typename D> event_token impl_IContentDialog<D>::PrimaryButtonClick(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->add_PrimaryButtonClick(get(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::PrimaryButtonClick(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_PrimaryButtonClick, PrimaryButtonClick(value));
}

template <typename D> void impl_IContentDialog<D>::PrimaryButtonClick(event_token token) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->remove_PrimaryButtonClick(token));
}

template <typename D> event_token impl_IContentDialog<D>::SecondaryButtonClick(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->add_SecondaryButtonClick(get(value), &token));
    return token;
}

template <typename D> event_revoker<IContentDialog> impl_IContentDialog<D>::SecondaryButtonClick(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ContentDialog, Windows::UI::Xaml::Controls::ContentDialogButtonClickEventArgs> & value) const
{
    return impl::make_event_revoker<D, IContentDialog>(this, &ABI::Windows::UI::Xaml::Controls::IContentDialog::remove_SecondaryButtonClick, SecondaryButtonClick(value));
}

template <typename D> void impl_IContentDialog<D>::SecondaryButtonClick(event_token token) const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->remove_SecondaryButtonClick(token));
}

template <typename D> void impl_IContentDialog<D>::Hide() const
{
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->abi_Hide());
}

template <typename D> Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> impl_IContentDialog<D>::ShowAsync() const
{
    Windows::Foundation::IAsyncOperation<winrt::Windows::UI::Xaml::Controls::ContentDialogResult> returnValue;
    check_hresult(static_cast<const IContentDialog &>(static_cast<const D &>(*this))->abi_ShowAsync(put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_TitleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::TitleTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_TitleTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::FullSizeDesiredProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_FullSizeDesiredProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_PrimaryButtonTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_SecondaryButtonTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_PrimaryButtonCommandProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonCommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_SecondaryButtonCommandProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::PrimaryButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_PrimaryButtonCommandParameterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::SecondaryButtonCommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_SecondaryButtonCommandParameterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::IsPrimaryButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_IsPrimaryButtonEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IContentDialogStatics<D>::IsSecondaryButtonEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IContentDialogStatics &>(static_cast<const D &>(*this))->get_IsSecondaryButtonEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ContentDialog impl_IContentDialogFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ContentDialog instance { nullptr };
    check_hresult(static_cast<const IContentDialogFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::FlyoutPresenter impl_IFlyoutPresenterFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::FlyoutPresenter instance { nullptr };
    check_hresult(static_cast<const IFlyoutPresenterFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> int32_t impl_IFrame<D>::CacheSize() const
{
    int32_t value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_CacheSize(&value));
    return value;
}

template <typename D> void impl_IFrame<D>::CacheSize(int32_t value) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->put_CacheSize(value));
}

template <typename D> bool impl_IFrame<D>::CanGoBack() const
{
    bool value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_CanGoBack(&value));
    return value;
}

template <typename D> bool impl_IFrame<D>::CanGoForward() const
{
    bool value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_CanGoForward(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IFrame<D>::CurrentSourcePageType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_CurrentSourcePageType(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IFrame<D>::SourcePageType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_SourcePageType(put(value)));
    return value;
}

template <typename D> void impl_IFrame<D>::SourcePageType(const Windows::UI::Xaml::Interop::TypeName & value) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->put_SourcePageType(get(value)));
}

template <typename D> int32_t impl_IFrame<D>::BackStackDepth() const
{
    int32_t value {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->get_BackStackDepth(&value));
    return value;
}

template <typename D> event_token impl_IFrame<D>::Navigated(const Windows::UI::Xaml::Navigation::NavigatedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->add_Navigated(get(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::Navigated(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigatedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_Navigated, Navigated(value));
}

template <typename D> void impl_IFrame<D>::Navigated(event_token token) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->remove_Navigated(token));
}

template <typename D> event_token impl_IFrame<D>::Navigating(const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->add_Navigating(get(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::Navigating(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigatingCancelEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_Navigating, Navigating(value));
}

template <typename D> void impl_IFrame<D>::Navigating(event_token token) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->remove_Navigating(token));
}

template <typename D> event_token impl_IFrame<D>::NavigationFailed(const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->add_NavigationFailed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::NavigationFailed(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigationFailedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_NavigationFailed, NavigationFailed(value));
}

template <typename D> void impl_IFrame<D>::NavigationFailed(event_token token) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->remove_NavigationFailed(token));
}

template <typename D> event_token impl_IFrame<D>::NavigationStopped(const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->add_NavigationStopped(get(value), &token));
    return token;
}

template <typename D> event_revoker<IFrame> impl_IFrame<D>::NavigationStopped(auto_revoke_t, const Windows::UI::Xaml::Navigation::NavigationStoppedEventHandler & value) const
{
    return impl::make_event_revoker<D, IFrame>(this, &ABI::Windows::UI::Xaml::Controls::IFrame::remove_NavigationStopped, NavigationStopped(value));
}

template <typename D> void impl_IFrame<D>::NavigationStopped(event_token token) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->remove_NavigationStopped(token));
}

template <typename D> void impl_IFrame<D>::GoBack() const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->abi_GoBack());
}

template <typename D> void impl_IFrame<D>::GoForward() const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->abi_GoForward());
}

template <typename D> bool impl_IFrame<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType, const Windows::IInspectable & parameter) const
{
    bool returnValue {};
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->abi_Navigate(get(sourcePageType), get(parameter), &returnValue));
    return returnValue;
}

template <typename D> hstring impl_IFrame<D>::GetNavigationState() const
{
    hstring returnValue;
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->abi_GetNavigationState(put(returnValue)));
    return returnValue;
}

template <typename D> void impl_IFrame<D>::SetNavigationState(hstring_ref navigationState) const
{
    check_hresult(static_cast<const IFrame &>(static_cast<const D &>(*this))->abi_SetNavigationState(get(navigationState)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CacheSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_CacheSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CanGoBackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_CanGoBackProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CanGoForwardProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_CanGoForwardProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::CurrentSourcePageTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_CurrentSourcePageTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::SourcePageTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_SourcePageTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics<D>::BackStackDepthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics &>(static_cast<const D &>(*this))->get_BackStackDepthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Frame impl_IFrameFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Frame instance { nullptr };
    check_hresult(static_cast<const IFrameFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> impl_IFrame2<D>::BackStack() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> value;
    check_hresult(static_cast<const IFrame2 &>(static_cast<const D &>(*this))->get_BackStack(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> impl_IFrame2<D>::ForwardStack() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Navigation::PageStackEntry> value;
    check_hresult(static_cast<const IFrame2 &>(static_cast<const D &>(*this))->get_ForwardStack(put(value)));
    return value;
}

template <typename D> bool impl_IFrame2<D>::Navigate(const Windows::UI::Xaml::Interop::TypeName & sourcePageType, const Windows::IInspectable & parameter, const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo & infoOverride) const
{
    bool returnValue {};
    check_hresult(static_cast<const IFrame2 &>(static_cast<const D &>(*this))->abi_Navigate(get(sourcePageType), get(parameter), get(infoOverride), &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics2<D>::BackStackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics2 &>(static_cast<const D &>(*this))->get_BackStackProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IFrameStatics2<D>::ForwardStackProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IFrameStatics2 &>(static_cast<const D &>(*this))->get_ForwardStackProperty(put(value)));
    return value;
}

template <typename D> void impl_IFrame3<D>::GoBack(const Windows::UI::Xaml::Media::Animation::NavigationTransitionInfo & transitionInfoOverride) const
{
    check_hresult(static_cast<const IFrame3 &>(static_cast<const D &>(*this))->abi_GoBack(get(transitionInfoOverride)));
}

template <typename D> hstring impl_IMenuFlyoutItem<D>::Text() const
{
    hstring value;
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->get_Text(put(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::Text(hstring_ref value) const
{
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->put_Text(get(value)));
}

template <typename D> Windows::UI::Xaml::Input::ICommand impl_IMenuFlyoutItem<D>::Command() const
{
    Windows::UI::Xaml::Input::ICommand value;
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->get_Command(put(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::Command(const Windows::UI::Xaml::Input::ICommand & value) const
{
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->put_Command(get(value)));
}

template <typename D> Windows::IInspectable impl_IMenuFlyoutItem<D>::CommandParameter() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->get_CommandParameter(put(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutItem<D>::CommandParameter(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->put_CommandParameter(get(value)));
}

template <typename D> event_token impl_IMenuFlyoutItem<D>::Click(const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->add_Click(get(value), &token));
    return token;
}

template <typename D> event_revoker<IMenuFlyoutItem> impl_IMenuFlyoutItem<D>::Click(auto_revoke_t, const Windows::UI::Xaml::RoutedEventHandler & value) const
{
    return impl::make_event_revoker<D, IMenuFlyoutItem>(this, &ABI::Windows::UI::Xaml::Controls::IMenuFlyoutItem::remove_Click, Click(value));
}

template <typename D> void impl_IMenuFlyoutItem<D>::Click(event_token token) const
{
    check_hresult(static_cast<const IMenuFlyoutItem &>(static_cast<const D &>(*this))->remove_Click(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutItemStatics &>(static_cast<const D &>(*this))->get_TextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::CommandProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutItemStatics &>(static_cast<const D &>(*this))->get_CommandProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutItemStatics<D>::CommandParameterProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutItemStatics &>(static_cast<const D &>(*this))->get_CommandParameterProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutItem impl_IMenuFlyoutItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutItem instance { nullptr };
    check_hresult(static_cast<const IMenuFlyoutItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutPresenter impl_IMenuFlyoutPresenterFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutPresenter instance { nullptr };
    check_hresult(static_cast<const IMenuFlyoutPresenterFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings impl_IMenuFlyoutPresenter2<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::MenuFlyoutPresenterTemplateSettings value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutPresenter2 &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::MenuFlyoutSeparator impl_IMenuFlyoutSeparatorFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::MenuFlyoutSeparator instance { nullptr };
    check_hresult(static_cast<const IMenuFlyoutSeparatorFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> impl_IMenuFlyoutSubItem<D>::Items() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Controls::MenuFlyoutItemBase> value;
    check_hresult(static_cast<const IMenuFlyoutSubItem &>(static_cast<const D &>(*this))->get_Items(put(value)));
    return value;
}

template <typename D> hstring impl_IMenuFlyoutSubItem<D>::Text() const
{
    hstring value;
    check_hresult(static_cast<const IMenuFlyoutSubItem &>(static_cast<const D &>(*this))->get_Text(put(value)));
    return value;
}

template <typename D> void impl_IMenuFlyoutSubItem<D>::Text(hstring_ref value) const
{
    check_hresult(static_cast<const IMenuFlyoutSubItem &>(static_cast<const D &>(*this))->put_Text(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IMenuFlyoutSubItemStatics<D>::TextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IMenuFlyoutSubItemStatics &>(static_cast<const D &>(*this))->get_TextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Frame impl_IPage<D>::Frame() const
{
    Windows::UI::Xaml::Controls::Frame value { nullptr };
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->get_Frame(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Navigation::NavigationCacheMode impl_IPage<D>::NavigationCacheMode() const
{
    Windows::UI::Xaml::Navigation::NavigationCacheMode value {};
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->get_NavigationCacheMode(&value));
    return value;
}

template <typename D> void impl_IPage<D>::NavigationCacheMode(Windows::UI::Xaml::Navigation::NavigationCacheMode value) const
{
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->put_NavigationCacheMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IPage<D>::TopAppBar() const
{
    Windows::UI::Xaml::Controls::AppBar value { nullptr };
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->get_TopAppBar(put(value)));
    return value;
}

template <typename D> void impl_IPage<D>::TopAppBar(const Windows::UI::Xaml::Controls::AppBar & value) const
{
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->put_TopAppBar(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::AppBar impl_IPage<D>::BottomAppBar() const
{
    Windows::UI::Xaml::Controls::AppBar value { nullptr };
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->get_BottomAppBar(put(value)));
    return value;
}

template <typename D> void impl_IPage<D>::BottomAppBar(const Windows::UI::Xaml::Controls::AppBar & value) const
{
    check_hresult(static_cast<const IPage &>(static_cast<const D &>(*this))->put_BottomAppBar(get(value)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatedFrom(const Windows::UI::Xaml::Navigation::NavigationEventArgs & e) const
{
    check_hresult(static_cast<const IPageOverrides &>(static_cast<const D &>(*this))->abi_OnNavigatedFrom(get(e)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatedTo(const Windows::UI::Xaml::Navigation::NavigationEventArgs & e) const
{
    check_hresult(static_cast<const IPageOverrides &>(static_cast<const D &>(*this))->abi_OnNavigatedTo(get(e)));
}

template <typename D> void impl_IPageOverrides<D>::OnNavigatingFrom(const Windows::UI::Xaml::Navigation::NavigatingCancelEventArgs & e) const
{
    check_hresult(static_cast<const IPageOverrides &>(static_cast<const D &>(*this))->abi_OnNavigatingFrom(get(e)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::FrameProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPageStatics &>(static_cast<const D &>(*this))->get_FrameProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::TopAppBarProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPageStatics &>(static_cast<const D &>(*this))->get_TopAppBarProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPageStatics<D>::BottomAppBarProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPageStatics &>(static_cast<const D &>(*this))->get_BottomAppBarProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Page impl_IPageFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Page instance { nullptr };
    check_hresult(static_cast<const IPageFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewer<D>::HorizontalScrollBarVisibility() const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_HorizontalScrollBarVisibility(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_HorizontalScrollBarVisibility(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewer<D>::VerticalScrollBarVisibility() const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_VerticalScrollBarVisibility(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalScrollBarVisibility(Windows::UI::Xaml::Controls::ScrollBarVisibility value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_VerticalScrollBarVisibility(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsHorizontalRailEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsHorizontalRailEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsHorizontalRailEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsHorizontalRailEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsVerticalRailEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsVerticalRailEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsVerticalRailEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsVerticalRailEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsHorizontalScrollChainingEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsHorizontalScrollChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsHorizontalScrollChainingEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsHorizontalScrollChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsVerticalScrollChainingEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsVerticalScrollChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsVerticalScrollChainingEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsVerticalScrollChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsZoomChainingEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsZoomChainingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsZoomChainingEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsZoomChainingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsScrollInertiaEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsScrollInertiaEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsScrollInertiaEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsScrollInertiaEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::IsZoomInertiaEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsZoomInertiaEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsZoomInertiaEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsZoomInertiaEnabled(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewer<D>::HorizontalScrollMode() const
{
    Windows::UI::Xaml::Controls::ScrollMode value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_HorizontalScrollMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_HorizontalScrollMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewer<D>::VerticalScrollMode() const
{
    Windows::UI::Xaml::Controls::ScrollMode value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_VerticalScrollMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalScrollMode(Windows::UI::Xaml::Controls::ScrollMode value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_VerticalScrollMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::ZoomMode impl_IScrollViewer<D>::ZoomMode() const
{
    Windows::UI::Xaml::Controls::ZoomMode value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ZoomMode(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::ZoomMode(Windows::UI::Xaml::Controls::ZoomMode value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_ZoomMode(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment impl_IScrollViewer<D>::HorizontalSnapPointsAlignment() const
{
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_HorizontalSnapPointsAlignment(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_HorizontalSnapPointsAlignment(value));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment impl_IScrollViewer<D>::VerticalSnapPointsAlignment() const
{
    Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_VerticalSnapPointsAlignment(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalSnapPointsAlignment(Windows::UI::Xaml::Controls::Primitives::SnapPointsAlignment value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_VerticalSnapPointsAlignment(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::HorizontalSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_HorizontalSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::HorizontalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_HorizontalSnapPointsType(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::VerticalSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_VerticalSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::VerticalSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_VerticalSnapPointsType(value));
}

template <typename D> Windows::UI::Xaml::Controls::SnapPointsType impl_IScrollViewer<D>::ZoomSnapPointsType() const
{
    Windows::UI::Xaml::Controls::SnapPointsType value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ZoomSnapPointsType(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::ZoomSnapPointsType(Windows::UI::Xaml::Controls::SnapPointsType value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_ZoomSnapPointsType(value));
}

template <typename D> double impl_IScrollViewer<D>::HorizontalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_HorizontalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ViewportWidth() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ViewportWidth(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ScrollableWidth() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ScrollableWidth(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility impl_IScrollViewer<D>::ComputedHorizontalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ComputedHorizontalScrollBarVisibility(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ExtentWidth() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ExtentWidth(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::VerticalOffset() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_VerticalOffset(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ViewportHeight() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ViewportHeight(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ScrollableHeight() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ScrollableHeight(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Visibility impl_IScrollViewer<D>::ComputedVerticalScrollBarVisibility() const
{
    Windows::UI::Xaml::Visibility value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ComputedVerticalScrollBarVisibility(&value));
    return value;
}

template <typename D> double impl_IScrollViewer<D>::ExtentHeight() const
{
    double value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ExtentHeight(&value));
    return value;
}

template <typename D> float impl_IScrollViewer<D>::MinZoomFactor() const
{
    float value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_MinZoomFactor(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::MinZoomFactor(float value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_MinZoomFactor(value));
}

template <typename D> float impl_IScrollViewer<D>::MaxZoomFactor() const
{
    float value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_MaxZoomFactor(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::MaxZoomFactor(float value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_MaxZoomFactor(value));
}

template <typename D> float impl_IScrollViewer<D>::ZoomFactor() const
{
    float value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ZoomFactor(&value));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<float> impl_IScrollViewer<D>::ZoomSnapPoints() const
{
    Windows::Foundation::Collections::IVector<float> value;
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_ZoomSnapPoints(put(value)));
    return value;
}

template <typename D> event_token impl_IScrollViewer<D>::ViewChanged(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->add_ViewChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer> impl_IScrollViewer<D>::ViewChanged(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer::remove_ViewChanged, ViewChanged(value));
}

template <typename D> void impl_IScrollViewer<D>::ViewChanged(event_token token) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->remove_ViewChanged(token));
}

template <typename D> void impl_IScrollViewer<D>::ScrollToHorizontalOffset(double offset) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->abi_ScrollToHorizontalOffset(offset));
}

template <typename D> void impl_IScrollViewer<D>::ScrollToVerticalOffset(double offset) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->abi_ScrollToVerticalOffset(offset));
}

template <typename D> void impl_IScrollViewer<D>::ZoomToFactor(float factor) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->abi_ZoomToFactor(factor));
}

template <typename D> void impl_IScrollViewer<D>::InvalidateScrollInfo() const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->abi_InvalidateScrollInfo());
}

template <typename D> bool impl_IScrollViewer<D>::IsDeferredScrollingEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_IsDeferredScrollingEnabled(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::IsDeferredScrollingEnabled(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_IsDeferredScrollingEnabled(value));
}

template <typename D> bool impl_IScrollViewer<D>::BringIntoViewOnFocusChange() const
{
    bool value {};
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->get_BringIntoViewOnFocusChange(&value));
    return value;
}

template <typename D> void impl_IScrollViewer<D>::BringIntoViewOnFocusChange(bool value) const
{
    check_hresult(static_cast<const IScrollViewer &>(static_cast<const D &>(*this))->put_BringIntoViewOnFocusChange(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalSnapPointsAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_HorizontalSnapPointsAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalSnapPointsAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_VerticalSnapPointsAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_HorizontalSnapPointsTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_VerticalSnapPointsTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomSnapPointsTypeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ZoomSnapPointsTypeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_HorizontalOffsetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ViewportWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ViewportWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ScrollableWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ScrollableWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ComputedHorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ComputedHorizontalScrollBarVisibilityProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ExtentWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ExtentWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalOffsetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_VerticalOffsetProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ViewportHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ViewportHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ScrollableHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ScrollableHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ComputedVerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ComputedVerticalScrollBarVisibilityProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ExtentHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ExtentHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::MinZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_MinZoomFactorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::MaxZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_MaxZoomFactorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomFactorProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ZoomFactorProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomSnapPointsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ZoomSnapPointsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_HorizontalScrollBarVisibilityProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewerStatics<D>::GetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetHorizontalScrollBarVisibility(get(element), &horizontalScrollBarVisibility));
    return horizontalScrollBarVisibility;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetHorizontalScrollBarVisibility(get(element), horizontalScrollBarVisibility));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalScrollBarVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_VerticalScrollBarVisibilityProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollBarVisibility impl_IScrollViewerStatics<D>::GetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetVerticalScrollBarVisibility(get(element), &verticalScrollBarVisibility));
    return verticalScrollBarVisibility;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetVerticalScrollBarVisibility(get(element), verticalScrollBarVisibility));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsHorizontalRailEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsHorizontalRailEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isHorizontalRailEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsHorizontalRailEnabled(get(element), &isHorizontalRailEnabled));
    return isHorizontalRailEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalRailEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsHorizontalRailEnabled(get(element), isHorizontalRailEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsVerticalRailEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsVerticalRailEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isVerticalRailEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsVerticalRailEnabled(get(element), &isVerticalRailEnabled));
    return isVerticalRailEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalRailEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsVerticalRailEnabled(get(element), isVerticalRailEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsHorizontalScrollChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsHorizontalScrollChainingEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isHorizontalScrollChainingEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsHorizontalScrollChainingEnabled(get(element), &isHorizontalScrollChainingEnabled));
    return isHorizontalScrollChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalScrollChainingEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsHorizontalScrollChainingEnabled(get(element), isHorizontalScrollChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsVerticalScrollChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsVerticalScrollChainingEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isVerticalScrollChainingEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsVerticalScrollChainingEnabled(get(element), &isVerticalScrollChainingEnabled));
    return isVerticalScrollChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalScrollChainingEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsVerticalScrollChainingEnabled(get(element), isVerticalScrollChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsZoomChainingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsZoomChainingEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isZoomChainingEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsZoomChainingEnabled(get(element), &isZoomChainingEnabled));
    return isZoomChainingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomChainingEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsZoomChainingEnabled(get(element), isZoomChainingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsScrollInertiaEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsScrollInertiaEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isScrollInertiaEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsScrollInertiaEnabled(get(element), &isScrollInertiaEnabled));
    return isScrollInertiaEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isScrollInertiaEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsScrollInertiaEnabled(get(element), isScrollInertiaEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsZoomInertiaEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsZoomInertiaEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isZoomInertiaEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsZoomInertiaEnabled(get(element), &isZoomInertiaEnabled));
    return isZoomInertiaEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomInertiaEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsZoomInertiaEnabled(get(element), isZoomInertiaEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::HorizontalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_HorizontalScrollModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewerStatics<D>::GetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetHorizontalScrollMode(get(element), &horizontalScrollMode));
    return horizontalScrollMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetHorizontalScrollMode(get(element), horizontalScrollMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::VerticalScrollModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_VerticalScrollModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ScrollMode impl_IScrollViewerStatics<D>::GetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetVerticalScrollMode(get(element), &verticalScrollMode));
    return verticalScrollMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetVerticalScrollMode(get(element), verticalScrollMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::ZoomModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_ZoomModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ZoomMode impl_IScrollViewerStatics<D>::GetZoomMode(const Windows::UI::Xaml::DependencyObject & element) const
{
    Windows::UI::Xaml::Controls::ZoomMode zoomMode {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetZoomMode(get(element), &zoomMode));
    return zoomMode;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetZoomMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetZoomMode(get(element), zoomMode));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::IsDeferredScrollingEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_IsDeferredScrollingEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool isDeferredScrollingEnabled {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetIsDeferredScrollingEnabled(get(element), &isDeferredScrollingEnabled));
    return isDeferredScrollingEnabled;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isDeferredScrollingEnabled) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetIsDeferredScrollingEnabled(get(element), isDeferredScrollingEnabled));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics<D>::BringIntoViewOnFocusChangeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->get_BringIntoViewOnFocusChangeProperty(put(value)));
    return value;
}

template <typename D> bool impl_IScrollViewerStatics<D>::GetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element) const
{
    bool bringIntoViewOnFocusChange {};
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_GetBringIntoViewOnFocusChange(get(element), &bringIntoViewOnFocusChange));
    return bringIntoViewOnFocusChange;
}

template <typename D> void impl_IScrollViewerStatics<D>::SetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element, bool bringIntoViewOnFocusChange) const
{
    check_hresult(static_cast<const IScrollViewerStatics &>(static_cast<const D &>(*this))->abi_SetBringIntoViewOnFocusChange(get(element), bringIntoViewOnFocusChange));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::TopLeftHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->get_TopLeftHeader(put(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::TopLeftHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->put_TopLeftHeader(get(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::LeftHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->get_LeftHeader(put(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::LeftHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->put_LeftHeader(get(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IScrollViewer2<D>::TopHeader() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->get_TopHeader(put(value)));
    return value;
}

template <typename D> void impl_IScrollViewer2<D>::TopHeader(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->put_TopHeader(get(value)));
}

template <typename D> event_token impl_IScrollViewer2<D>::ViewChanging(const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->add_ViewChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer2> impl_IScrollViewer2<D>::ViewChanging(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::UI::Xaml::Controls::ScrollViewerViewChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer2>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer2::remove_ViewChanging, ViewChanging(value));
}

template <typename D> void impl_IScrollViewer2<D>::ViewChanging(event_token token) const
{
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->remove_ViewChanging(token));
}

template <typename D> bool impl_IScrollViewer2<D>::ChangeView(const Windows::Foundation::IReference<double> & horizontalOffset, const Windows::Foundation::IReference<double> & verticalOffset, const Windows::Foundation::IReference<float> & zoomFactor) const
{
    bool returnValue {};
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->abi_ChangeView(get(horizontalOffset), get(verticalOffset), get(zoomFactor), &returnValue));
    return returnValue;
}

template <typename D> bool impl_IScrollViewer2<D>::ChangeView(const Windows::Foundation::IReference<double> & horizontalOffset, const Windows::Foundation::IReference<double> & verticalOffset, const Windows::Foundation::IReference<float> & zoomFactor, bool disableAnimation) const
{
    bool returnValue {};
    check_hresult(static_cast<const IScrollViewer2 &>(static_cast<const D &>(*this))->abi_ChangeViewWithOptionalAnimation(get(horizontalOffset), get(verticalOffset), get(zoomFactor), disableAnimation, &returnValue));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::TopLeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics2 &>(static_cast<const D &>(*this))->get_TopLeftHeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::LeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics2 &>(static_cast<const D &>(*this))->get_LeftHeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IScrollViewerStatics2<D>::TopHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IScrollViewerStatics2 &>(static_cast<const D &>(*this))->get_TopHeaderProperty(put(value)));
    return value;
}

template <typename D> event_token impl_IScrollViewer3<D>::DirectManipulationStarted(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IScrollViewer3 &>(static_cast<const D &>(*this))->add_DirectManipulationStarted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer3> impl_IScrollViewer3<D>::DirectManipulationStarted(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer3>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer3::remove_DirectManipulationStarted, DirectManipulationStarted(value));
}

template <typename D> void impl_IScrollViewer3<D>::DirectManipulationStarted(event_token token) const
{
    check_hresult(static_cast<const IScrollViewer3 &>(static_cast<const D &>(*this))->remove_DirectManipulationStarted(token));
}

template <typename D> event_token impl_IScrollViewer3<D>::DirectManipulationCompleted(const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IScrollViewer3 &>(static_cast<const D &>(*this))->add_DirectManipulationCompleted(get(value), &token));
    return token;
}

template <typename D> event_revoker<IScrollViewer3> impl_IScrollViewer3<D>::DirectManipulationCompleted(auto_revoke_t, const Windows::Foundation::EventHandler<Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IScrollViewer3>(this, &ABI::Windows::UI::Xaml::Controls::IScrollViewer3::remove_DirectManipulationCompleted, DirectManipulationCompleted(value));
}

template <typename D> void impl_IScrollViewer3<D>::DirectManipulationCompleted(event_token token) const
{
    check_hresult(static_cast<const IScrollViewer3 &>(static_cast<const D &>(*this))->remove_DirectManipulationCompleted(token));
}

template <typename D> Windows::UI::Xaml::Controls::SwapChainBackgroundPanel impl_ISwapChainBackgroundPanelFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SwapChainBackgroundPanel instance { nullptr };
    check_hresult(static_cast<const ISwapChainBackgroundPanelFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Core::CoreIndependentInputSource impl_ISwapChainBackgroundPanel2<D>::CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const
{
    Windows::UI::Core::CoreIndependentInputSource returnValue { nullptr };
    check_hresult(static_cast<const ISwapChainBackgroundPanel2 &>(static_cast<const D &>(*this))->abi_CreateCoreIndependentInputSource(deviceTypes, put(returnValue)));
    return returnValue;
}

template <typename D> float impl_ISwapChainPanel<D>::CompositionScaleX() const
{
    float value {};
    check_hresult(static_cast<const ISwapChainPanel &>(static_cast<const D &>(*this))->get_CompositionScaleX(&value));
    return value;
}

template <typename D> float impl_ISwapChainPanel<D>::CompositionScaleY() const
{
    float value {};
    check_hresult(static_cast<const ISwapChainPanel &>(static_cast<const D &>(*this))->get_CompositionScaleY(&value));
    return value;
}

template <typename D> event_token impl_ISwapChainPanel<D>::CompositionScaleChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ISwapChainPanel &>(static_cast<const D &>(*this))->add_CompositionScaleChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<ISwapChainPanel> impl_ISwapChainPanel<D>::CompositionScaleChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::SwapChainPanel, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, ISwapChainPanel>(this, &ABI::Windows::UI::Xaml::Controls::ISwapChainPanel::remove_CompositionScaleChanged, CompositionScaleChanged(value));
}

template <typename D> void impl_ISwapChainPanel<D>::CompositionScaleChanged(event_token token) const
{
    check_hresult(static_cast<const ISwapChainPanel &>(static_cast<const D &>(*this))->remove_CompositionScaleChanged(token));
}

template <typename D> Windows::UI::Core::CoreIndependentInputSource impl_ISwapChainPanel<D>::CreateCoreIndependentInputSource(Windows::UI::Core::CoreInputDeviceTypes deviceTypes) const
{
    Windows::UI::Core::CoreIndependentInputSource returnValue { nullptr };
    check_hresult(static_cast<const ISwapChainPanel &>(static_cast<const D &>(*this))->abi_CreateCoreIndependentInputSource(deviceTypes, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISwapChainPanelStatics<D>::CompositionScaleXProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISwapChainPanelStatics &>(static_cast<const D &>(*this))->get_CompositionScaleXProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ISwapChainPanelStatics<D>::CompositionScaleYProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ISwapChainPanelStatics &>(static_cast<const D &>(*this))->get_CompositionScaleYProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::SwapChainPanel impl_ISwapChainPanelFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::SwapChainPanel instance { nullptr };
    check_hresult(static_cast<const ISwapChainPanelFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> impl_ICommandBar<D>::PrimaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value;
    check_hresult(static_cast<const ICommandBar &>(static_cast<const D &>(*this))->get_PrimaryCommands(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> impl_ICommandBar<D>::SecondaryCommands() const
{
    Windows::Foundation::Collections::IObservableVector<Windows::UI::Xaml::Controls::ICommandBarElement> value;
    check_hresult(static_cast<const ICommandBar &>(static_cast<const D &>(*this))->get_SecondaryCommands(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics<D>::PrimaryCommandsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics &>(static_cast<const D &>(*this))->get_PrimaryCommandsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics<D>::SecondaryCommandsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics &>(static_cast<const D &>(*this))->get_SecondaryCommandsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBar impl_ICommandBarFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::CommandBar instance { nullptr };
    check_hresult(static_cast<const ICommandBarFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Style impl_ICommandBar2<D>::CommandBarOverflowPresenterStyle() const
{
    Windows::UI::Xaml::Style value { nullptr };
    check_hresult(static_cast<const ICommandBar2 &>(static_cast<const D &>(*this))->get_CommandBarOverflowPresenterStyle(put(value)));
    return value;
}

template <typename D> void impl_ICommandBar2<D>::CommandBarOverflowPresenterStyle(const Windows::UI::Xaml::Style & value) const
{
    check_hresult(static_cast<const ICommandBar2 &>(static_cast<const D &>(*this))->put_CommandBarOverflowPresenterStyle(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings impl_ICommandBar2<D>::CommandBarTemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::CommandBarTemplateSettings value { nullptr };
    check_hresult(static_cast<const ICommandBar2 &>(static_cast<const D &>(*this))->get_CommandBarTemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics2<D>::CommandBarOverflowPresenterStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics2 &>(static_cast<const D &>(*this))->get_CommandBarOverflowPresenterStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition impl_ICommandBar3<D>::DefaultLabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value {};
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->get_DefaultLabelPosition(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::DefaultLabelPosition(Windows::UI::Xaml::Controls::CommandBarDefaultLabelPosition value) const
{
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->put_DefaultLabelPosition(value));
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility impl_ICommandBar3<D>::OverflowButtonVisibility() const
{
    Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value {};
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->get_OverflowButtonVisibility(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::OverflowButtonVisibility(Windows::UI::Xaml::Controls::CommandBarOverflowButtonVisibility value) const
{
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->put_OverflowButtonVisibility(value));
}

template <typename D> bool impl_ICommandBar3<D>::IsDynamicOverflowEnabled() const
{
    bool value {};
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->get_IsDynamicOverflowEnabled(&value));
    return value;
}

template <typename D> void impl_ICommandBar3<D>::IsDynamicOverflowEnabled(bool value) const
{
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->put_IsDynamicOverflowEnabled(value));
}

template <typename D> event_token impl_ICommandBar3<D>::DynamicOverflowItemsChanging(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->add_DynamicOverflowItemsChanging(get(value), &token));
    return token;
}

template <typename D> event_revoker<ICommandBar3> impl_ICommandBar3<D>::DynamicOverflowItemsChanging(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::CommandBar, Windows::UI::Xaml::Controls::DynamicOverflowItemsChangingEventArgs> & value) const
{
    return impl::make_event_revoker<D, ICommandBar3>(this, &ABI::Windows::UI::Xaml::Controls::ICommandBar3::remove_DynamicOverflowItemsChanging, DynamicOverflowItemsChanging(value));
}

template <typename D> void impl_ICommandBar3<D>::DynamicOverflowItemsChanging(event_token token) const
{
    check_hresult(static_cast<const ICommandBar3 &>(static_cast<const D &>(*this))->remove_DynamicOverflowItemsChanging(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::DefaultLabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics3 &>(static_cast<const D &>(*this))->get_DefaultLabelPositionProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::OverflowButtonVisibilityProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics3 &>(static_cast<const D &>(*this))->get_OverflowButtonVisibilityProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ICommandBarStatics3<D>::IsDynamicOverflowEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ICommandBarStatics3 &>(static_cast<const D &>(*this))->get_IsDynamicOverflowEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridViewHeaderItem impl_IGridViewHeaderItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridViewHeaderItem instance { nullptr };
    check_hresult(static_cast<const IGridViewHeaderItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings impl_IGridViewItem<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::GridViewItemTemplateSettings value { nullptr };
    check_hresult(static_cast<const IGridViewItem &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridViewItem impl_IGridViewItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridViewItem instance { nullptr };
    check_hresult(static_cast<const IGridViewItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewHeaderItem impl_IListViewHeaderItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewHeaderItem instance { nullptr };
    check_hresult(static_cast<const IListViewHeaderItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings impl_IListViewItem<D>::TemplateSettings() const
{
    Windows::UI::Xaml::Controls::Primitives::ListViewItemTemplateSettings value { nullptr };
    check_hresult(static_cast<const IListViewItem &>(static_cast<const D &>(*this))->get_TemplateSettings(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ListViewItem impl_IListViewItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListViewItem instance { nullptr };
    check_hresult(static_cast<const IListViewItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IToggleMenuFlyoutItem<D>::IsChecked() const
{
    bool value {};
    check_hresult(static_cast<const IToggleMenuFlyoutItem &>(static_cast<const D &>(*this))->get_IsChecked(&value));
    return value;
}

template <typename D> void impl_IToggleMenuFlyoutItem<D>::IsChecked(bool value) const
{
    check_hresult(static_cast<const IToggleMenuFlyoutItem &>(static_cast<const D &>(*this))->put_IsChecked(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IToggleMenuFlyoutItemStatics<D>::IsCheckedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IToggleMenuFlyoutItemStatics &>(static_cast<const D &>(*this))->get_IsCheckedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem impl_IToggleMenuFlyoutItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ToggleMenuFlyoutItem instance { nullptr };
    check_hresult(static_cast<const IToggleMenuFlyoutItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> double impl_IWrapGrid<D>::ItemWidth() const
{
    double value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_ItemWidth(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::ItemWidth(double value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_ItemWidth(value));
}

template <typename D> double impl_IWrapGrid<D>::ItemHeight() const
{
    double value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_ItemHeight(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::ItemHeight(double value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_ItemHeight(value));
}

template <typename D> Windows::UI::Xaml::Controls::Orientation impl_IWrapGrid<D>::Orientation() const
{
    Windows::UI::Xaml::Controls::Orientation value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_Orientation(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::Orientation(Windows::UI::Xaml::Controls::Orientation value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_Orientation(value));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IWrapGrid<D>::HorizontalChildrenAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_HorizontalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::HorizontalChildrenAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_HorizontalChildrenAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IWrapGrid<D>::VerticalChildrenAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_VerticalChildrenAlignment(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::VerticalChildrenAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_VerticalChildrenAlignment(value));
}

template <typename D> int32_t impl_IWrapGrid<D>::MaximumRowsOrColumns() const
{
    int32_t value {};
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumns(&value));
    return value;
}

template <typename D> void impl_IWrapGrid<D>::MaximumRowsOrColumns(int32_t value) const
{
    check_hresult(static_cast<const IWrapGrid &>(static_cast<const D &>(*this))->put_MaximumRowsOrColumns(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::ItemWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::ItemHeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_ItemHeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::OrientationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_OrientationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::HorizontalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_HorizontalChildrenAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::VerticalChildrenAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_VerticalChildrenAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IWrapGridStatics<D>::MaximumRowsOrColumnsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IWrapGridStatics &>(static_cast<const D &>(*this))->get_MaximumRowsOrColumnsProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IAppBarButton<D>::Label() const
{
    hstring value;
    check_hresult(static_cast<const IAppBarButton &>(static_cast<const D &>(*this))->get_Label(put(value)));
    return value;
}

template <typename D> void impl_IAppBarButton<D>::Label(hstring_ref value) const
{
    check_hresult(static_cast<const IAppBarButton &>(static_cast<const D &>(*this))->put_Label(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAppBarButton<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(static_cast<const IAppBarButton &>(static_cast<const D &>(*this))->get_Icon(put(value)));
    return value;
}

template <typename D> void impl_IAppBarButton<D>::Icon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(static_cast<const IAppBarButton &>(static_cast<const D &>(*this))->put_Icon(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::LabelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics &>(static_cast<const D &>(*this))->get_LabelProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics &>(static_cast<const D &>(*this))->get_IconProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics &>(static_cast<const D &>(*this))->get_IsCompactProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarButton impl_IAppBarButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarButton instance { nullptr };
    check_hresult(static_cast<const IAppBarButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarLabelPosition impl_IAppBarButton3<D>::LabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition value {};
    check_hresult(static_cast<const IAppBarButton3 &>(static_cast<const D &>(*this))->get_LabelPosition(&value));
    return value;
}

template <typename D> void impl_IAppBarButton3<D>::LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) const
{
    check_hresult(static_cast<const IAppBarButton3 &>(static_cast<const D &>(*this))->put_LabelPosition(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::LabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics3 &>(static_cast<const D &>(*this))->get_LabelPositionProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics3 &>(static_cast<const D &>(*this))->get_IsInOverflowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarButtonStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarButtonStatics3 &>(static_cast<const D &>(*this))->get_DynamicOverflowOrderProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IAppBarToggleButton<D>::Label() const
{
    hstring value;
    check_hresult(static_cast<const IAppBarToggleButton &>(static_cast<const D &>(*this))->get_Label(put(value)));
    return value;
}

template <typename D> void impl_IAppBarToggleButton<D>::Label(hstring_ref value) const
{
    check_hresult(static_cast<const IAppBarToggleButton &>(static_cast<const D &>(*this))->put_Label(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::IconElement impl_IAppBarToggleButton<D>::Icon() const
{
    Windows::UI::Xaml::Controls::IconElement value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButton &>(static_cast<const D &>(*this))->get_Icon(put(value)));
    return value;
}

template <typename D> void impl_IAppBarToggleButton<D>::Icon(const Windows::UI::Xaml::Controls::IconElement & value) const
{
    check_hresult(static_cast<const IAppBarToggleButton &>(static_cast<const D &>(*this))->put_Icon(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::LabelProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics &>(static_cast<const D &>(*this))->get_LabelProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::IconProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics &>(static_cast<const D &>(*this))->get_IconProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics<D>::IsCompactProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics &>(static_cast<const D &>(*this))->get_IsCompactProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::AppBarToggleButton impl_IAppBarToggleButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::AppBarToggleButton instance { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::CommandBarLabelPosition impl_IAppBarToggleButton3<D>::LabelPosition() const
{
    Windows::UI::Xaml::Controls::CommandBarLabelPosition value {};
    check_hresult(static_cast<const IAppBarToggleButton3 &>(static_cast<const D &>(*this))->get_LabelPosition(&value));
    return value;
}

template <typename D> void impl_IAppBarToggleButton3<D>::LabelPosition(Windows::UI::Xaml::Controls::CommandBarLabelPosition value) const
{
    check_hresult(static_cast<const IAppBarToggleButton3 &>(static_cast<const D &>(*this))->put_LabelPosition(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::LabelPositionProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics3 &>(static_cast<const D &>(*this))->get_LabelPositionProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::IsInOverflowProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics3 &>(static_cast<const D &>(*this))->get_IsInOverflowProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IAppBarToggleButtonStatics3<D>::DynamicOverflowOrderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IAppBarToggleButtonStatics3 &>(static_cast<const D &>(*this))->get_DynamicOverflowOrderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::GridView impl_IGridViewFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::GridView instance { nullptr };
    check_hresult(static_cast<const IGridViewFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::ListView impl_IListViewFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::ListView instance { nullptr };
    check_hresult(static_cast<const IListViewFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Interop::TypeName impl_IControlTemplate<D>::TargetType() const
{
    Windows::UI::Xaml::Interop::TypeName value {};
    check_hresult(static_cast<const IControlTemplate &>(static_cast<const D &>(*this))->get_TargetType(put(value)));
    return value;
}

template <typename D> void impl_IControlTemplate<D>::TargetType(const Windows::UI::Xaml::Interop::TypeName & value) const
{
    check_hresult(static_cast<const IControlTemplate &>(static_cast<const D &>(*this))->put_TargetType(get(value)));
}

template <typename D> double impl_IControl<D>::FontSize() const
{
    double value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FontSize(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontSize(double value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_FontSize(value));
}

template <typename D> Windows::UI::Xaml::Media::FontFamily impl_IControl<D>::FontFamily() const
{
    Windows::UI::Xaml::Media::FontFamily value { nullptr };
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FontFamily(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::FontFamily(const Windows::UI::Xaml::Media::FontFamily & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_FontFamily(get(value)));
}

template <typename D> Windows::UI::Text::FontWeight impl_IControl<D>::FontWeight() const
{
    Windows::UI::Text::FontWeight value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FontWeight(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::FontWeight(const Windows::UI::Text::FontWeight & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_FontWeight(get(value)));
}

template <typename D> Windows::UI::Text::FontStyle impl_IControl<D>::FontStyle() const
{
    Windows::UI::Text::FontStyle value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FontStyle(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontStyle(Windows::UI::Text::FontStyle value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_FontStyle(value));
}

template <typename D> Windows::UI::Text::FontStretch impl_IControl<D>::FontStretch() const
{
    Windows::UI::Text::FontStretch value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FontStretch(&value));
    return value;
}

template <typename D> void impl_IControl<D>::FontStretch(Windows::UI::Text::FontStretch value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_FontStretch(value));
}

template <typename D> int32_t impl_IControl<D>::CharacterSpacing() const
{
    int32_t value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_CharacterSpacing(&value));
    return value;
}

template <typename D> void impl_IControl<D>::CharacterSpacing(int32_t value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_CharacterSpacing(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::Foreground() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_Foreground(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Foreground(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_Foreground(get(value)));
}

template <typename D> bool impl_IControl<D>::IsTabStop() const
{
    bool value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_IsTabStop(&value));
    return value;
}

template <typename D> void impl_IControl<D>::IsTabStop(bool value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_IsTabStop(value));
}

template <typename D> bool impl_IControl<D>::IsEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_IsEnabled(&value));
    return value;
}

template <typename D> void impl_IControl<D>::IsEnabled(bool value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_IsEnabled(value));
}

template <typename D> int32_t impl_IControl<D>::TabIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_TabIndex(&value));
    return value;
}

template <typename D> void impl_IControl<D>::TabIndex(int32_t value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_TabIndex(value));
}

template <typename D> Windows::UI::Xaml::Input::KeyboardNavigationMode impl_IControl<D>::TabNavigation() const
{
    Windows::UI::Xaml::Input::KeyboardNavigationMode value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_TabNavigation(&value));
    return value;
}

template <typename D> void impl_IControl<D>::TabNavigation(Windows::UI::Xaml::Input::KeyboardNavigationMode value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_TabNavigation(value));
}

template <typename D> Windows::UI::Xaml::Controls::ControlTemplate impl_IControl<D>::Template() const
{
    Windows::UI::Xaml::Controls::ControlTemplate value { nullptr };
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_Template(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Template(const Windows::UI::Xaml::Controls::ControlTemplate & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_Template(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IControl<D>::Padding() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_Padding(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Padding(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_Padding(get(value)));
}

template <typename D> Windows::UI::Xaml::HorizontalAlignment impl_IControl<D>::HorizontalContentAlignment() const
{
    Windows::UI::Xaml::HorizontalAlignment value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_HorizontalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IControl<D>::HorizontalContentAlignment(Windows::UI::Xaml::HorizontalAlignment value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_HorizontalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::VerticalAlignment impl_IControl<D>::VerticalContentAlignment() const
{
    Windows::UI::Xaml::VerticalAlignment value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_VerticalContentAlignment(&value));
    return value;
}

template <typename D> void impl_IControl<D>::VerticalContentAlignment(Windows::UI::Xaml::VerticalAlignment value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_VerticalContentAlignment(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::Background() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_Background(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::Background(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_Background(get(value)));
}

template <typename D> Windows::UI::Xaml::Thickness impl_IControl<D>::BorderThickness() const
{
    Windows::UI::Xaml::Thickness value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_BorderThickness(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::BorderThickness(const Windows::UI::Xaml::Thickness & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_BorderThickness(get(value)));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IControl<D>::BorderBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_BorderBrush(put(value)));
    return value;
}

template <typename D> void impl_IControl<D>::BorderBrush(const Windows::UI::Xaml::Media::Brush & value) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->put_BorderBrush(get(value)));
}

template <typename D> Windows::UI::Xaml::FocusState impl_IControl<D>::FocusState() const
{
    Windows::UI::Xaml::FocusState value {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->get_FocusState(&value));
    return value;
}

template <typename D> event_token impl_IControl<D>::IsEnabledChanged(const Windows::UI::Xaml::DependencyPropertyChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->add_IsEnabledChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IControl> impl_IControl<D>::IsEnabledChanged(auto_revoke_t, const Windows::UI::Xaml::DependencyPropertyChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IControl>(this, &ABI::Windows::UI::Xaml::Controls::IControl::remove_IsEnabledChanged, IsEnabledChanged(value));
}

template <typename D> void impl_IControl<D>::IsEnabledChanged(event_token token) const
{
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->remove_IsEnabledChanged(token));
}

template <typename D> bool impl_IControl<D>::ApplyTemplate() const
{
    bool returnValue {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->abi_ApplyTemplate(&returnValue));
    return returnValue;
}

template <typename D> bool impl_IControl<D>::Focus(Windows::UI::Xaml::FocusState value) const
{
    bool returnValue {};
    check_hresult(static_cast<const IControl &>(static_cast<const D &>(*this))->abi_Focus(value, &returnValue));
    return returnValue;
}

template <typename D> void impl_IControlOverrides<D>::OnPointerEntered(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerEntered(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerPressed(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerPressed(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerMoved(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerMoved(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerReleased(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerReleased(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerExited(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerExited(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerCaptureLost(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerCaptureLost(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerCanceled(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerCanceled(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnPointerWheelChanged(const Windows::UI::Xaml::Input::PointerRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnPointerWheelChanged(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnTapped(const Windows::UI::Xaml::Input::TappedRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnTapped(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDoubleTapped(const Windows::UI::Xaml::Input::DoubleTappedRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnDoubleTapped(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnHolding(const Windows::UI::Xaml::Input::HoldingRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnHolding(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnRightTapped(const Windows::UI::Xaml::Input::RightTappedRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnRightTapped(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationStarting(const Windows::UI::Xaml::Input::ManipulationStartingRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnManipulationStarting(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationInertiaStarting(const Windows::UI::Xaml::Input::ManipulationInertiaStartingRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnManipulationInertiaStarting(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationStarted(const Windows::UI::Xaml::Input::ManipulationStartedRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnManipulationStarted(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationDelta(const Windows::UI::Xaml::Input::ManipulationDeltaRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnManipulationDelta(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnManipulationCompleted(const Windows::UI::Xaml::Input::ManipulationCompletedRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnManipulationCompleted(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnKeyUp(const Windows::UI::Xaml::Input::KeyRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnKeyUp(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnKeyDown(const Windows::UI::Xaml::Input::KeyRoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnKeyDown(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnGotFocus(const Windows::UI::Xaml::RoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnGotFocus(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnLostFocus(const Windows::UI::Xaml::RoutedEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnLostFocus(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragEnter(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnDragEnter(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragLeave(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnDragLeave(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDragOver(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnDragOver(get(e)));
}

template <typename D> void impl_IControlOverrides<D>::OnDrop(const Windows::UI::Xaml::DragEventArgs & e) const
{
    check_hresult(static_cast<const IControlOverrides &>(static_cast<const D &>(*this))->abi_OnDrop(get(e)));
}

template <typename D> Windows::IInspectable impl_IControlProtected<D>::DefaultStyleKey() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IControlProtected &>(static_cast<const D &>(*this))->get_DefaultStyleKey(put(value)));
    return value;
}

template <typename D> void impl_IControlProtected<D>::DefaultStyleKey(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IControlProtected &>(static_cast<const D &>(*this))->put_DefaultStyleKey(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControlProtected<D>::GetTemplateChild(hstring_ref childName) const
{
    Windows::UI::Xaml::DependencyObject returnValue { nullptr };
    check_hresult(static_cast<const IControlProtected &>(static_cast<const D &>(*this))->abi_GetTemplateChild(get(childName), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontSizeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FontSizeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontFamilyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FontFamilyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontWeightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FontWeightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontStyleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FontStyleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FontStretchProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FontStretchProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::CharacterSpacingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_CharacterSpacingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::ForegroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_ForegroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::IsTabStopProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_IsTabStopProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::IsEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_IsEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TabIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_TabIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TabNavigationProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_TabNavigationProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::TemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_TemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::PaddingProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_PaddingProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::HorizontalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_HorizontalContentAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::VerticalContentAlignmentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_VerticalContentAlignmentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BackgroundProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_BackgroundProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BorderThicknessProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_BorderThicknessProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::BorderBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_BorderBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::DefaultStyleKeyProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_DefaultStyleKeyProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics<D>::FocusStateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics &>(static_cast<const D &>(*this))->get_FocusStateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::Control impl_IControlFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Control instance { nullptr };
    check_hresult(static_cast<const IControlFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> bool impl_IControl2<D>::IsTextScaleFactorEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IControl2 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabled(&value));
    return value;
}

template <typename D> void impl_IControl2<D>::IsTextScaleFactorEnabled(bool value) const
{
    check_hresult(static_cast<const IControl2 &>(static_cast<const D &>(*this))->put_IsTextScaleFactorEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics2<D>::IsTextScaleFactorEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics2 &>(static_cast<const D &>(*this))->get_IsTextScaleFactorEnabledProperty(put(value)));
    return value;
}

template <typename D> bool impl_IControl3<D>::UseSystemFocusVisuals() const
{
    bool value {};
    check_hresult(static_cast<const IControl3 &>(static_cast<const D &>(*this))->get_UseSystemFocusVisuals(&value));
    return value;
}

template <typename D> void impl_IControl3<D>::UseSystemFocusVisuals(bool value) const
{
    check_hresult(static_cast<const IControl3 &>(static_cast<const D &>(*this))->put_UseSystemFocusVisuals(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics3<D>::UseSystemFocusVisualsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics3 &>(static_cast<const D &>(*this))->get_UseSystemFocusVisualsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics3<D>::IsTemplateFocusTargetProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics3 &>(static_cast<const D &>(*this))->get_IsTemplateFocusTargetProperty(put(value)));
    return value;
}

template <typename D> bool impl_IControlStatics3<D>::GetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element) const
{
    bool value {};
    check_hresult(static_cast<const IControlStatics3 &>(static_cast<const D &>(*this))->abi_GetIsTemplateFocusTarget(get(element), &value));
    return value;
}

template <typename D> void impl_IControlStatics3<D>::SetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element, bool value) const
{
    check_hresult(static_cast<const IControlStatics3 &>(static_cast<const D &>(*this))->abi_SetIsTemplateFocusTarget(get(element), value));
}

template <typename D> bool impl_IControl4<D>::IsFocusEngagementEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_IsFocusEngagementEnabled(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::IsFocusEngagementEnabled(bool value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_IsFocusEngagementEnabled(value));
}

template <typename D> bool impl_IControl4<D>::IsFocusEngaged() const
{
    bool value {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_IsFocusEngaged(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::IsFocusEngaged(bool value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_IsFocusEngaged(value));
}

template <typename D> Windows::UI::Xaml::Controls::RequiresPointer impl_IControl4<D>::RequiresPointer() const
{
    Windows::UI::Xaml::Controls::RequiresPointer value {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_RequiresPointer(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::RequiresPointer(Windows::UI::Xaml::Controls::RequiresPointer value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_RequiresPointer(value));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusLeft() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_XYFocusLeft(put(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusLeft(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_XYFocusLeft(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusRight() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_XYFocusRight(put(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusRight(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_XYFocusRight(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusUp() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_XYFocusUp(put(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusUp(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_XYFocusUp(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyObject impl_IControl4<D>::XYFocusDown() const
{
    Windows::UI::Xaml::DependencyObject value { nullptr };
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_XYFocusDown(put(value)));
    return value;
}

template <typename D> void impl_IControl4<D>::XYFocusDown(const Windows::UI::Xaml::DependencyObject & value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_XYFocusDown(get(value)));
}

template <typename D> Windows::UI::Xaml::ElementSoundMode impl_IControl4<D>::ElementSoundMode() const
{
    Windows::UI::Xaml::ElementSoundMode value {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->get_ElementSoundMode(&value));
    return value;
}

template <typename D> void impl_IControl4<D>::ElementSoundMode(Windows::UI::Xaml::ElementSoundMode value) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->put_ElementSoundMode(value));
}

template <typename D> event_token impl_IControl4<D>::FocusEngaged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->add_FocusEngaged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IControl4> impl_IControl4<D>::FocusEngaged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusEngagedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IControl4>(this, &ABI::Windows::UI::Xaml::Controls::IControl4::remove_FocusEngaged, FocusEngaged(value));
}

template <typename D> void impl_IControl4<D>::FocusEngaged(event_token token) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->remove_FocusEngaged(token));
}

template <typename D> event_token impl_IControl4<D>::FocusDisengaged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->add_FocusDisengaged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IControl4> impl_IControl4<D>::FocusDisengaged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Control, Windows::UI::Xaml::Controls::FocusDisengagedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IControl4>(this, &ABI::Windows::UI::Xaml::Controls::IControl4::remove_FocusDisengaged, FocusDisengaged(value));
}

template <typename D> void impl_IControl4<D>::FocusDisengaged(event_token token) const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->remove_FocusDisengaged(token));
}

template <typename D> void impl_IControl4<D>::RemoveFocusEngagement() const
{
    check_hresult(static_cast<const IControl4 &>(static_cast<const D &>(*this))->abi_RemoveFocusEngagement());
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::IsFocusEngagementEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_IsFocusEngagementEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::IsFocusEngagedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_IsFocusEngagedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::RequiresPointerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_RequiresPointerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusLeftProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_XYFocusLeftProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusRightProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_XYFocusRightProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusUpProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_XYFocusUpProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::XYFocusDownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_XYFocusDownProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IControlStatics4<D>::ElementSoundModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IControlStatics4 &>(static_cast<const D &>(*this))->get_ElementSoundModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbarCustomPen<D>::CreateInkDrawingAttributes(const Windows::UI::Xaml::Media::Brush & brush, double strokeWidth) const
{
    Windows::UI::Input::Inking::InkDrawingAttributes returnValue { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPen &>(static_cast<const D &>(*this))->abi_CreateInkDrawingAttributes(get(brush), strokeWidth, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbarCustomPenOverrides<D>::CreateInkDrawingAttributesCore(const Windows::UI::Xaml::Media::Brush & brush, double strokeWidth) const
{
    Windows::UI::Input::Inking::InkDrawingAttributes returnValue { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenOverrides &>(static_cast<const D &>(*this))->abi_CreateInkDrawingAttributesCore(get(brush), strokeWidth, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPen impl_IInkToolbarCustomPenFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen instance { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarInitialControls impl_IInkToolbar<D>::InitialControls() const
{
    Windows::UI::Xaml::Controls::InkToolbarInitialControls value {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_InitialControls(&value));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::InitialControls(Windows::UI::Xaml::Controls::InkToolbarInitialControls value) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->put_InitialControls(value));
}

template <typename D> Windows::UI::Xaml::DependencyObjectCollection impl_IInkToolbar<D>::Children() const
{
    Windows::UI::Xaml::DependencyObjectCollection value { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_Children(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToolButton impl_IInkToolbar<D>::ActiveTool() const
{
    Windows::UI::Xaml::Controls::InkToolbarToolButton value { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_ActiveTool(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::ActiveTool(const Windows::UI::Xaml::Controls::InkToolbarToolButton & value) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->put_ActiveTool(get(value)));
}

template <typename D> Windows::UI::Input::Inking::InkDrawingAttributes impl_IInkToolbar<D>::InkDrawingAttributes() const
{
    Windows::UI::Input::Inking::InkDrawingAttributes value { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_InkDrawingAttributes(put(value)));
    return value;
}

template <typename D> bool impl_IInkToolbar<D>::IsRulerButtonChecked() const
{
    bool value {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_IsRulerButtonChecked(&value));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::IsRulerButtonChecked(bool value) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->put_IsRulerButtonChecked(value));
}

template <typename D> Windows::UI::Xaml::Controls::InkCanvas impl_IInkToolbar<D>::TargetInkCanvas() const
{
    Windows::UI::Xaml::Controls::InkCanvas value { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->get_TargetInkCanvas(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbar<D>::TargetInkCanvas(const Windows::UI::Xaml::Controls::InkCanvas & value) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->put_TargetInkCanvas(get(value)));
}

template <typename D> event_token impl_IInkToolbar<D>::ActiveToolChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->add_ActiveToolChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::ActiveToolChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_ActiveToolChanged, ActiveToolChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::ActiveToolChanged(event_token token) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->remove_ActiveToolChanged(token));
}

template <typename D> event_token impl_IInkToolbar<D>::InkDrawingAttributesChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->add_InkDrawingAttributesChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::InkDrawingAttributesChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_InkDrawingAttributesChanged, InkDrawingAttributesChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::InkDrawingAttributesChanged(event_token token) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->remove_InkDrawingAttributesChanged(token));
}

template <typename D> event_token impl_IInkToolbar<D>::EraseAllClicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->add_EraseAllClicked(get(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::EraseAllClicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_EraseAllClicked, EraseAllClicked(value));
}

template <typename D> void impl_IInkToolbar<D>::EraseAllClicked(event_token token) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->remove_EraseAllClicked(token));
}

template <typename D> event_token impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->add_IsRulerButtonCheckedChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IInkToolbar> impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::InkToolbar, Windows::IInspectable> & value) const
{
    return impl::make_event_revoker<D, IInkToolbar>(this, &ABI::Windows::UI::Xaml::Controls::IInkToolbar::remove_IsRulerButtonCheckedChanged, IsRulerButtonCheckedChanged(value));
}

template <typename D> void impl_IInkToolbar<D>::IsRulerButtonCheckedChanged(event_token token) const
{
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->remove_IsRulerButtonCheckedChanged(token));
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToolButton impl_IInkToolbar<D>::GetToolButton(Windows::UI::Xaml::Controls::InkToolbarTool tool) const
{
    Windows::UI::Xaml::Controls::InkToolbarToolButton returnValue { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->abi_GetToolButton(tool, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToggleButton impl_IInkToolbar<D>::GetToggleButton(Windows::UI::Xaml::Controls::InkToolbarToggle tool) const
{
    Windows::UI::Xaml::Controls::InkToolbarToggleButton returnValue { nullptr };
    check_hresult(static_cast<const IInkToolbar &>(static_cast<const D &>(*this))->abi_GetToggleButton(tool, put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::InitialControlsProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_InitialControlsProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::ChildrenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_ChildrenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::ActiveToolProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_ActiveToolProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::InkDrawingAttributesProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_InkDrawingAttributesProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::IsRulerButtonCheckedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_IsRulerButtonCheckedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarStatics<D>::TargetInkCanvasProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarStatics &>(static_cast<const D &>(*this))->get_TargetInkCanvasProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbar impl_IInkToolbarFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbar instance { nullptr };
    check_hresult(static_cast<const IInkToolbarFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPenButton impl_IInkToolbarPenConfigurationControl<D>::PenButton() const
{
    Windows::UI::Xaml::Controls::InkToolbarPenButton value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenConfigurationControl &>(static_cast<const D &>(*this))->get_PenButton(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenConfigurationControlStatics<D>::PenButtonProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenConfigurationControlStatics &>(static_cast<const D &>(*this))->get_PenButtonProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl impl_IInkToolbarPenConfigurationControlFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarPenConfigurationControl instance { nullptr };
    check_hresult(static_cast<const IInkToolbarPenConfigurationControlFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarToggle impl_IInkToolbarToggleButton<D>::ToggleKind() const
{
    Windows::UI::Xaml::Controls::InkToolbarToggle value {};
    check_hresult(static_cast<const IInkToolbarToggleButton &>(static_cast<const D &>(*this))->get_ToggleKind(&value));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarTool impl_IInkToolbarToolButton<D>::ToolKind() const
{
    Windows::UI::Xaml::Controls::InkToolbarTool value {};
    check_hresult(static_cast<const IInkToolbarToolButton &>(static_cast<const D &>(*this))->get_ToolKind(&value));
    return value;
}

template <typename D> bool impl_IInkToolbarToolButton<D>::IsExtensionGlyphShown() const
{
    bool value {};
    check_hresult(static_cast<const IInkToolbarToolButton &>(static_cast<const D &>(*this))->get_IsExtensionGlyphShown(&value));
    return value;
}

template <typename D> void impl_IInkToolbarToolButton<D>::IsExtensionGlyphShown(bool value) const
{
    check_hresult(static_cast<const IInkToolbarToolButton &>(static_cast<const D &>(*this))->put_IsExtensionGlyphShown(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarToolButtonStatics<D>::IsExtensionGlyphShownProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarToolButtonStatics &>(static_cast<const D &>(*this))->get_IsExtensionGlyphShownProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton impl_IInkToolbarCustomToggleButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToggleButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomToggleButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IInkToolbarCustomToolButton<D>::ConfigurationContent() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomToolButton &>(static_cast<const D &>(*this))->get_ConfigurationContent(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomToolButton<D>::ConfigurationContent(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IInkToolbarCustomToolButton &>(static_cast<const D &>(*this))->put_ConfigurationContent(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomToolButtonStatics<D>::ConfigurationContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomToolButtonStatics &>(static_cast<const D &>(*this))->get_ConfigurationContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomToolButton impl_IInkToolbarCustomToolButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomToolButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomToolButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarEraserButton impl_IInkToolbarEraserButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarEraserButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarEraserButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> impl_IInkToolbarPenButton<D>::Palette() const
{
    Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> value;
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_Palette(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::Palette(const Windows::Foundation::Collections::IVector<Windows::UI::Xaml::Media::Brush> & value) const
{
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->put_Palette(get(value)));
}

template <typename D> double impl_IInkToolbarPenButton<D>::MinStrokeWidth() const
{
    double value {};
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_MinStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::MinStrokeWidth(double value) const
{
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->put_MinStrokeWidth(value));
}

template <typename D> double impl_IInkToolbarPenButton<D>::MaxStrokeWidth() const
{
    double value {};
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_MaxStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::MaxStrokeWidth(double value) const
{
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->put_MaxStrokeWidth(value));
}

template <typename D> Windows::UI::Xaml::Media::Brush impl_IInkToolbarPenButton<D>::SelectedBrush() const
{
    Windows::UI::Xaml::Media::Brush value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_SelectedBrush(put(value)));
    return value;
}

template <typename D> int32_t impl_IInkToolbarPenButton<D>::SelectedBrushIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_SelectedBrushIndex(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::SelectedBrushIndex(int32_t value) const
{
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->put_SelectedBrushIndex(value));
}

template <typename D> double impl_IInkToolbarPenButton<D>::SelectedStrokeWidth() const
{
    double value {};
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->get_SelectedStrokeWidth(&value));
    return value;
}

template <typename D> void impl_IInkToolbarPenButton<D>::SelectedStrokeWidth(double value) const
{
    check_hresult(static_cast<const IInkToolbarPenButton &>(static_cast<const D &>(*this))->put_SelectedStrokeWidth(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::PaletteProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_PaletteProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::MinStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_MinStrokeWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::MaxStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_MaxStrokeWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedBrushProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_SelectedBrushProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedBrushIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_SelectedBrushIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarPenButtonStatics<D>::SelectedStrokeWidthProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarPenButtonStatics &>(static_cast<const D &>(*this))->get_SelectedStrokeWidthProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Input::Inking::InkPresenterRuler impl_IInkToolbarRulerButton<D>::Ruler() const
{
    Windows::UI::Input::Inking::InkPresenterRuler value { nullptr };
    check_hresult(static_cast<const IInkToolbarRulerButton &>(static_cast<const D &>(*this))->get_Ruler(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarRulerButtonStatics<D>::RulerProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarRulerButtonStatics &>(static_cast<const D &>(*this))->get_RulerProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarRulerButton impl_IInkToolbarRulerButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarRulerButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarRulerButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton impl_IInkToolbarBallpointPenButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarBallpointPenButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarBallpointPenButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPen impl_IInkToolbarCustomPenButton<D>::CustomPen() const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPen value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenButton &>(static_cast<const D &>(*this))->get_CustomPen(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomPenButton<D>::CustomPen(const Windows::UI::Xaml::Controls::InkToolbarCustomPen & value) const
{
    check_hresult(static_cast<const IInkToolbarCustomPenButton &>(static_cast<const D &>(*this))->put_CustomPen(get(value)));
}

template <typename D> Windows::UI::Xaml::UIElement impl_IInkToolbarCustomPenButton<D>::ConfigurationContent() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenButton &>(static_cast<const D &>(*this))->get_ConfigurationContent(put(value)));
    return value;
}

template <typename D> void impl_IInkToolbarCustomPenButton<D>::ConfigurationContent(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IInkToolbarCustomPenButton &>(static_cast<const D &>(*this))->put_ConfigurationContent(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomPenButtonStatics<D>::CustomPenProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenButtonStatics &>(static_cast<const D &>(*this))->get_CustomPenProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IInkToolbarCustomPenButtonStatics<D>::ConfigurationContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenButtonStatics &>(static_cast<const D &>(*this))->get_ConfigurationContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarCustomPenButton impl_IInkToolbarCustomPenButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarCustomPenButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarCustomPenButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarHighlighterButton impl_IInkToolbarHighlighterButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarHighlighterButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarHighlighterButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::InkToolbarPencilButton impl_IInkToolbarPencilButtonFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::InkToolbarPencilButton instance { nullptr };
    check_hresult(static_cast<const IInkToolbarPencilButtonFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::UI::Xaml::Controls::PivotItem impl_IPivotItemEventArgs<D>::Item() const
{
    Windows::UI::Xaml::Controls::PivotItem value { nullptr };
    check_hresult(static_cast<const IPivotItemEventArgs &>(static_cast<const D &>(*this))->get_Item(put(value)));
    return value;
}

template <typename D> void impl_IPivotItemEventArgs<D>::Item(const Windows::UI::Xaml::Controls::PivotItem & value) const
{
    check_hresult(static_cast<const IPivotItemEventArgs &>(static_cast<const D &>(*this))->put_Item(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickedEventArgs<D>::OldDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickedEventArgs &>(static_cast<const D &>(*this))->get_OldDate(put(value)));
    return value;
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickedEventArgs<D>::NewDate() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickedEventArgs &>(static_cast<const D &>(*this))->get_NewDate(put(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyoutItem<D>::PrimaryText() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyoutItem &>(static_cast<const D &>(*this))->get_PrimaryText(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyoutItem<D>::PrimaryText(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyoutItem &>(static_cast<const D &>(*this))->put_PrimaryText(get(value)));
}

template <typename D> hstring impl_IDatePickerFlyoutItem<D>::SecondaryText() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyoutItem &>(static_cast<const D &>(*this))->get_SecondaryText(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyoutItem<D>::SecondaryText(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyoutItem &>(static_cast<const D &>(*this))->put_SecondaryText(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutItemStatics<D>::PrimaryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutItemStatics &>(static_cast<const D &>(*this))->get_PrimaryTextProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutItemStatics<D>::SecondaryTextProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutItemStatics &>(static_cast<const D &>(*this))->get_SecondaryTextProperty(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IItemsPickedEventArgs<D>::AddedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IItemsPickedEventArgs &>(static_cast<const D &>(*this))->get_AddedItems(put(value)));
    return value;
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IItemsPickedEventArgs<D>::RemovedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IItemsPickedEventArgs &>(static_cast<const D &>(*this))->get_RemovedItems(put(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickedEventArgs<D>::OldTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePickedEventArgs &>(static_cast<const D &>(*this))->get_OldTime(put(value)));
    return value;
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickedEventArgs<D>::NewTime() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePickedEventArgs &>(static_cast<const D &>(*this))->get_NewTime(put(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyout<D>::CalendarIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_CalendarIdentifier(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::CalendarIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_CalendarIdentifier(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::Date() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_Date(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::Date(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_Date(get(value)));
}

template <typename D> bool impl_IDatePickerFlyout<D>::DayVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_DayVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::DayVisible(bool value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_DayVisible(value));
}

template <typename D> bool impl_IDatePickerFlyout<D>::MonthVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_MonthVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MonthVisible(bool value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_MonthVisible(value));
}

template <typename D> bool impl_IDatePickerFlyout<D>::YearVisible() const
{
    bool value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_YearVisible(&value));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::YearVisible(bool value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_YearVisible(value));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::MinYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_MinYear(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MinYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_MinYear(get(value)));
}

template <typename D> Windows::Foundation::DateTime impl_IDatePickerFlyout<D>::MaxYear() const
{
    Windows::Foundation::DateTime value {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->get_MaxYear(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout<D>::MaxYear(const Windows::Foundation::DateTime & value) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->put_MaxYear(get(value)));
}

template <typename D> event_token impl_IDatePickerFlyout<D>::DatePicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->add_DatePicked(get(value), &token));
    return token;
}

template <typename D> event_revoker<IDatePickerFlyout> impl_IDatePickerFlyout<D>::DatePicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::DatePickerFlyout, Windows::UI::Xaml::Controls::DatePickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IDatePickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IDatePickerFlyout::remove_DatePicked, DatePicked(value));
}

template <typename D> void impl_IDatePickerFlyout<D>::DatePicked(event_token token) const
{
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->remove_DatePicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>> impl_IDatePickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::DateTime>> returnValue;
    check_hresult(static_cast<const IDatePickerFlyout &>(static_cast<const D &>(*this))->abi_ShowAtAsync(get(target), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::CalendarIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_CalendarIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::DateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_DateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::DayVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_DayVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MonthVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_MonthVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::YearVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_YearVisibleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MinYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_MinYearProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics<D>::MaxYearProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_MaxYearProperty(put(value)));
    return value;
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::DayFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->get_DayFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::DayFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->put_DayFormat(get(value)));
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::MonthFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->get_MonthFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::MonthFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->put_MonthFormat(get(value)));
}

template <typename D> hstring impl_IDatePickerFlyout2<D>::YearFormat() const
{
    hstring value;
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->get_YearFormat(put(value)));
    return value;
}

template <typename D> void impl_IDatePickerFlyout2<D>::YearFormat(hstring_ref value) const
{
    check_hresult(static_cast<const IDatePickerFlyout2 &>(static_cast<const D &>(*this))->put_YearFormat(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::DayFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics2 &>(static_cast<const D &>(*this))->get_DayFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::MonthFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics2 &>(static_cast<const D &>(*this))->get_MonthFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IDatePickerFlyoutStatics2<D>::YearFormatProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IDatePickerFlyoutStatics2 &>(static_cast<const D &>(*this))->get_YearFormatProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IListPickerFlyout<D>::ItemsSource() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_ItemsSource(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::ItemsSource(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_ItemsSource(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IListPickerFlyout<D>::ItemTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_ItemTemplate(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::ItemTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_ItemTemplate(get(value)));
}

template <typename D> hstring impl_IListPickerFlyout<D>::DisplayMemberPath() const
{
    hstring value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_DisplayMemberPath(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::DisplayMemberPath(hstring_ref value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_DisplayMemberPath(get(value)));
}

template <typename D> Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode impl_IListPickerFlyout<D>::SelectionMode() const
{
    Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value {};
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectionMode(&value));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectionMode(Windows::UI::Xaml::Controls::ListPickerFlyoutSelectionMode value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_SelectionMode(value));
}

template <typename D> int32_t impl_IListPickerFlyout<D>::SelectedIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectedIndex(&value));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedIndex(int32_t value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_SelectedIndex(value));
}

template <typename D> Windows::IInspectable impl_IListPickerFlyout<D>::SelectedItem() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectedItem(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedItem(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_SelectedItem(get(value)));
}

template <typename D> Windows::IInspectable impl_IListPickerFlyout<D>::SelectedValue() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectedValue(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedValue(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_SelectedValue(get(value)));
}

template <typename D> hstring impl_IListPickerFlyout<D>::SelectedValuePath() const
{
    hstring value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectedValuePath(put(value)));
    return value;
}

template <typename D> void impl_IListPickerFlyout<D>::SelectedValuePath(hstring_ref value) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->put_SelectedValuePath(get(value)));
}

template <typename D> Windows::Foundation::Collections::IVector<Windows::IInspectable> impl_IListPickerFlyout<D>::SelectedItems() const
{
    Windows::Foundation::Collections::IVector<Windows::IInspectable> value;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->get_SelectedItems(put(value)));
    return value;
}

template <typename D> event_token impl_IListPickerFlyout<D>::ItemsPicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->add_ItemsPicked(get(value), &token));
    return token;
}

template <typename D> event_revoker<IListPickerFlyout> impl_IListPickerFlyout<D>::ItemsPicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::ListPickerFlyout, Windows::UI::Xaml::Controls::ItemsPickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IListPickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IListPickerFlyout::remove_ItemsPicked, ItemsPicked(value));
}

template <typename D> void impl_IListPickerFlyout<D>::ItemsPicked(event_token token) const
{
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->remove_ItemsPicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::IInspectable>> impl_IListPickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::Collections::IVectorView<Windows::IInspectable>> returnValue;
    check_hresult(static_cast<const IListPickerFlyout &>(static_cast<const D &>(*this))->abi_ShowAtAsync(get(target), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::ItemsSourceProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_ItemsSourceProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::ItemTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_ItemTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::DisplayMemberPathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_DisplayMemberPathProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectionModeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_SelectionModeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_SelectedIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_SelectedItemProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedValueProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_SelectedValueProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IListPickerFlyoutStatics<D>::SelectedValuePathProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IListPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_SelectedValuePathProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::UIElement impl_IPickerFlyout<D>::Content() const
{
    Windows::UI::Xaml::UIElement value { nullptr };
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->get_Content(put(value)));
    return value;
}

template <typename D> void impl_IPickerFlyout<D>::Content(const Windows::UI::Xaml::UIElement & value) const
{
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->put_Content(get(value)));
}

template <typename D> bool impl_IPickerFlyout<D>::ConfirmationButtonsVisible() const
{
    bool value {};
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->get_ConfirmationButtonsVisible(&value));
    return value;
}

template <typename D> void impl_IPickerFlyout<D>::ConfirmationButtonsVisible(bool value) const
{
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->put_ConfirmationButtonsVisible(value));
}

template <typename D> event_token impl_IPickerFlyout<D>::Confirmed(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->add_Confirmed(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPickerFlyout> impl_IPickerFlyout<D>::Confirmed(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::PickerFlyout, Windows::UI::Xaml::Controls::PickerConfirmedEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::IPickerFlyout::remove_Confirmed, Confirmed(value));
}

template <typename D> void impl_IPickerFlyout<D>::Confirmed(event_token token) const
{
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->remove_Confirmed(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<bool> impl_IPickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<bool> returnValue;
    check_hresult(static_cast<const IPickerFlyout &>(static_cast<const D &>(*this))->abi_ShowAtAsync(get(target), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPickerFlyoutStatics<D>::ContentProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_ContentProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPickerFlyoutStatics<D>::ConfirmationButtonsVisibleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPickerFlyoutStatics &>(static_cast<const D &>(*this))->get_ConfirmationButtonsVisibleProperty(put(value)));
    return value;
}

template <typename D> hstring impl_ITimePickerFlyout<D>::ClockIdentifier() const
{
    hstring value;
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->get_ClockIdentifier(put(value)));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::ClockIdentifier(hstring_ref value) const
{
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->put_ClockIdentifier(get(value)));
}

template <typename D> Windows::Foundation::TimeSpan impl_ITimePickerFlyout<D>::Time() const
{
    Windows::Foundation::TimeSpan value {};
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->get_Time(put(value)));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::Time(const Windows::Foundation::TimeSpan & value) const
{
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->put_Time(get(value)));
}

template <typename D> int32_t impl_ITimePickerFlyout<D>::MinuteIncrement() const
{
    int32_t value {};
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->get_MinuteIncrement(&value));
    return value;
}

template <typename D> void impl_ITimePickerFlyout<D>::MinuteIncrement(int32_t value) const
{
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->put_MinuteIncrement(value));
}

template <typename D> event_token impl_ITimePickerFlyout<D>::TimePicked(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->add_TimePicked(get(value), &token));
    return token;
}

template <typename D> event_revoker<ITimePickerFlyout> impl_ITimePickerFlyout<D>::TimePicked(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::TimePickerFlyout, Windows::UI::Xaml::Controls::TimePickedEventArgs> & value) const
{
    return impl::make_event_revoker<D, ITimePickerFlyout>(this, &ABI::Windows::UI::Xaml::Controls::ITimePickerFlyout::remove_TimePicked, TimePicked(value));
}

template <typename D> void impl_ITimePickerFlyout<D>::TimePicked(event_token token) const
{
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->remove_TimePicked(token));
}

template <typename D> Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>> impl_ITimePickerFlyout<D>::ShowAtAsync(const Windows::UI::Xaml::FrameworkElement & target) const
{
    Windows::Foundation::IAsyncOperation<Windows::Foundation::IReference<Windows::Foundation::TimeSpan>> returnValue;
    check_hresult(static_cast<const ITimePickerFlyout &>(static_cast<const D &>(*this))->abi_ShowAtAsync(get(target), put(returnValue)));
    return returnValue;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::ClockIdentifierProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_ClockIdentifierProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::TimeProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_TimeProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_ITimePickerFlyoutStatics<D>::MinuteIncrementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const ITimePickerFlyoutStatics &>(static_cast<const D &>(*this))->get_MinuteIncrementProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IPivot<D>::Title() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_Title(put(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::Title(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_Title(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot<D>::TitleTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_TitleTemplate(put(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::TitleTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_TitleTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot<D>::HeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_HeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::HeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_HeaderTemplate(get(value)));
}

template <typename D> int32_t impl_IPivot<D>::SelectedIndex() const
{
    int32_t value {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_SelectedIndex(&value));
    return value;
}

template <typename D> void impl_IPivot<D>::SelectedIndex(int32_t value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_SelectedIndex(value));
}

template <typename D> Windows::IInspectable impl_IPivot<D>::SelectedItem() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_SelectedItem(put(value)));
    return value;
}

template <typename D> void impl_IPivot<D>::SelectedItem(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_SelectedItem(get(value)));
}

template <typename D> bool impl_IPivot<D>::IsLocked() const
{
    bool value {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->get_IsLocked(&value));
    return value;
}

template <typename D> void impl_IPivot<D>::IsLocked(bool value) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->put_IsLocked(value));
}

template <typename D> event_token impl_IPivot<D>::SelectionChanged(const Windows::UI::Xaml::Controls::SelectionChangedEventHandler & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->add_SelectionChanged(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::SelectionChanged(auto_revoke_t, const Windows::UI::Xaml::Controls::SelectionChangedEventHandler & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_SelectionChanged, SelectionChanged(value));
}

template <typename D> void impl_IPivot<D>::SelectionChanged(event_token token) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->remove_SelectionChanged(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemLoading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->add_PivotItemLoading(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemLoading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemLoading, PivotItemLoading(value));
}

template <typename D> void impl_IPivot<D>::PivotItemLoading(event_token token) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->remove_PivotItemLoading(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemLoaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->add_PivotItemLoaded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemLoaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemLoaded, PivotItemLoaded(value));
}

template <typename D> void impl_IPivot<D>::PivotItemLoaded(event_token token) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->remove_PivotItemLoaded(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemUnloading(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->add_PivotItemUnloading(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemUnloading(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemUnloading, PivotItemUnloading(value));
}

template <typename D> void impl_IPivot<D>::PivotItemUnloading(event_token token) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->remove_PivotItemUnloading(token));
}

template <typename D> event_token impl_IPivot<D>::PivotItemUnloaded(const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    event_token token {};
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->add_PivotItemUnloaded(get(value), &token));
    return token;
}

template <typename D> event_revoker<IPivot> impl_IPivot<D>::PivotItemUnloaded(auto_revoke_t, const Windows::Foundation::TypedEventHandler<Windows::UI::Xaml::Controls::Pivot, Windows::UI::Xaml::Controls::PivotItemEventArgs> & value) const
{
    return impl::make_event_revoker<D, IPivot>(this, &ABI::Windows::UI::Xaml::Controls::IPivot::remove_PivotItemUnloaded, PivotItemUnloaded(value));
}

template <typename D> void impl_IPivot<D>::PivotItemUnloaded(event_token token) const
{
    check_hresult(static_cast<const IPivot &>(static_cast<const D &>(*this))->remove_PivotItemUnloaded(token));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::TitleProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_TitleProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::TitleTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_TitleTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::HeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_HeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SelectedIndexProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_SelectedIndexProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SelectedItemProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_SelectedItemProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::IsLockedProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_IsLockedProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics<D>::SlideInAnimationGroupProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->get_SlideInAnimationGroupProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup impl_IPivotStatics<D>::GetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element) const
{
    Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value {};
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->abi_GetSlideInAnimationGroup(get(element), &value));
    return value;
}

template <typename D> void impl_IPivotStatics<D>::SetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value) const
{
    check_hresult(static_cast<const IPivotStatics &>(static_cast<const D &>(*this))->abi_SetSlideInAnimationGroup(get(element), value));
}

template <typename D> Windows::UI::Xaml::Controls::Pivot impl_IPivotFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::Pivot instance { nullptr };
    check_hresult(static_cast<const IPivotFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

template <typename D> Windows::IInspectable impl_IPivot2<D>::LeftHeader() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->get_LeftHeader(put(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::LeftHeader(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->put_LeftHeader(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot2<D>::LeftHeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->get_LeftHeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::LeftHeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->put_LeftHeaderTemplate(get(value)));
}

template <typename D> Windows::IInspectable impl_IPivot2<D>::RightHeader() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->get_RightHeader(put(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::RightHeader(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->put_RightHeader(get(value)));
}

template <typename D> Windows::UI::Xaml::DataTemplate impl_IPivot2<D>::RightHeaderTemplate() const
{
    Windows::UI::Xaml::DataTemplate value { nullptr };
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->get_RightHeaderTemplate(put(value)));
    return value;
}

template <typename D> void impl_IPivot2<D>::RightHeaderTemplate(const Windows::UI::Xaml::DataTemplate & value) const
{
    check_hresult(static_cast<const IPivot2 &>(static_cast<const D &>(*this))->put_RightHeaderTemplate(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::LeftHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics2 &>(static_cast<const D &>(*this))->get_LeftHeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::LeftHeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics2 &>(static_cast<const D &>(*this))->get_LeftHeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::RightHeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics2 &>(static_cast<const D &>(*this))->get_RightHeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics2<D>::RightHeaderTemplateProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics2 &>(static_cast<const D &>(*this))->get_RightHeaderTemplateProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement impl_IPivot3<D>::HeaderFocusVisualPlacement() const
{
    Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value {};
    check_hresult(static_cast<const IPivot3 &>(static_cast<const D &>(*this))->get_HeaderFocusVisualPlacement(&value));
    return value;
}

template <typename D> void impl_IPivot3<D>::HeaderFocusVisualPlacement(Windows::UI::Xaml::Controls::PivotHeaderFocusVisualPlacement value) const
{
    check_hresult(static_cast<const IPivot3 &>(static_cast<const D &>(*this))->put_HeaderFocusVisualPlacement(value));
}

template <typename D> bool impl_IPivot3<D>::IsHeaderItemsCarouselEnabled() const
{
    bool value {};
    check_hresult(static_cast<const IPivot3 &>(static_cast<const D &>(*this))->get_IsHeaderItemsCarouselEnabled(&value));
    return value;
}

template <typename D> void impl_IPivot3<D>::IsHeaderItemsCarouselEnabled(bool value) const
{
    check_hresult(static_cast<const IPivot3 &>(static_cast<const D &>(*this))->put_IsHeaderItemsCarouselEnabled(value));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics3<D>::HeaderFocusVisualPlacementProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics3 &>(static_cast<const D &>(*this))->get_HeaderFocusVisualPlacementProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotStatics3<D>::IsHeaderItemsCarouselEnabledProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotStatics3 &>(static_cast<const D &>(*this))->get_IsHeaderItemsCarouselEnabledProperty(put(value)));
    return value;
}

template <typename D> Windows::IInspectable impl_IPivotItem<D>::Header() const
{
    Windows::IInspectable value;
    check_hresult(static_cast<const IPivotItem &>(static_cast<const D &>(*this))->get_Header(put(value)));
    return value;
}

template <typename D> void impl_IPivotItem<D>::Header(const Windows::IInspectable & value) const
{
    check_hresult(static_cast<const IPivotItem &>(static_cast<const D &>(*this))->put_Header(get(value)));
}

template <typename D> Windows::UI::Xaml::DependencyProperty impl_IPivotItemStatics<D>::HeaderProperty() const
{
    Windows::UI::Xaml::DependencyProperty value { nullptr };
    check_hresult(static_cast<const IPivotItemStatics &>(static_cast<const D &>(*this))->get_HeaderProperty(put(value)));
    return value;
}

template <typename D> Windows::UI::Xaml::Controls::PivotItem impl_IPivotItemFactory<D>::CreateInstance(const Windows::IInspectable & outer, Windows::IInspectable & inner) const
{
    Windows::UI::Xaml::Controls::PivotItem instance { nullptr };
    check_hresult(static_cast<const IPivotItemFactory &>(static_cast<const D &>(*this))->abi_CreateInstance(get(outer), put(inner), put(instance)));
    return instance;
}

inline AppBar::AppBar()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBar, IAppBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBar::IsOpenProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics>().IsOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::IsStickyProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics>().IsStickyProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::ClosedDisplayModeProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics2>().ClosedDisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBar::LightDismissOverlayModeProperty()
{
    return get_activation_factory<AppBar, IAppBarStatics4>().LightDismissOverlayModeProperty();
}

inline AppBarButton::AppBarButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarButton, IAppBarButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::LabelProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().LabelProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IconProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().IconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IsCompactProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::LabelPositionProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().LabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::IsInOverflowProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarButton::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarButton, IAppBarButtonStatics3>().DynamicOverflowOrderProperty();
}

inline AppBarSeparator::AppBarSeparator()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarSeparator, IAppBarSeparatorFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::IsCompactProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::IsInOverflowProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarSeparator::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarSeparator, IAppBarSeparatorStatics3>().DynamicOverflowOrderProperty();
}

inline AppBarToggleButton::AppBarToggleButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<AppBarToggleButton, IAppBarToggleButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::LabelProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().LabelProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IconProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().IconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IsCompactProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::LabelPositionProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().LabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::IsInOverflowProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().IsInOverflowProperty();
}

inline Windows::UI::Xaml::DependencyProperty AppBarToggleButton::DynamicOverflowOrderProperty()
{
    return get_activation_factory<AppBarToggleButton, IAppBarToggleButtonStatics3>().DynamicOverflowOrderProperty();
}

inline AutoSuggestBox::AutoSuggestBox() :
    AutoSuggestBox(activate_instance<AutoSuggestBox>())
{}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::MaxSuggestionListHeightProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().MaxSuggestionListHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::IsSuggestionListOpenProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().IsSuggestionListOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextMemberPathProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::UpdateTextOnSelectProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().UpdateTextOnSelectProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::PlaceholderTextProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::HeaderProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::AutoMaximizeSuggestionAreaProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().AutoMaximizeSuggestionAreaProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::TextBoxStyleProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics>().TextBoxStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::QueryIconProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics2>().QueryIconProperty();
}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBox::LightDismissOverlayModeProperty()
{
    return get_activation_factory<AutoSuggestBox, IAutoSuggestBoxStatics3>().LightDismissOverlayModeProperty();
}

inline AutoSuggestBoxQuerySubmittedEventArgs::AutoSuggestBoxQuerySubmittedEventArgs() :
    AutoSuggestBoxQuerySubmittedEventArgs(activate_instance<AutoSuggestBoxQuerySubmittedEventArgs>())
{}

inline AutoSuggestBoxSuggestionChosenEventArgs::AutoSuggestBoxSuggestionChosenEventArgs() :
    AutoSuggestBoxSuggestionChosenEventArgs(activate_instance<AutoSuggestBoxSuggestionChosenEventArgs>())
{}

inline AutoSuggestBoxTextChangedEventArgs::AutoSuggestBoxTextChangedEventArgs() :
    AutoSuggestBoxTextChangedEventArgs(activate_instance<AutoSuggestBoxTextChangedEventArgs>())
{}

inline Windows::UI::Xaml::DependencyProperty AutoSuggestBoxTextChangedEventArgs::ReasonProperty()
{
    return get_activation_factory<AutoSuggestBoxTextChangedEventArgs, IAutoSuggestBoxTextChangedEventArgsStatics>().ReasonProperty();
}

inline BackClickEventArgs::BackClickEventArgs() :
    BackClickEventArgs(activate_instance<BackClickEventArgs>())
{}

inline BitmapIcon::BitmapIcon()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<BitmapIcon, IBitmapIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty BitmapIcon::UriSourceProperty()
{
    return get_activation_factory<BitmapIcon, IBitmapIconStatics>().UriSourceProperty();
}

inline Border::Border() :
    Border(activate_instance<Border>())
{}

inline Windows::UI::Xaml::DependencyProperty Border::BorderBrushProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::BorderThicknessProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::BackgroundProperty()
{
    return get_activation_factory<Border, IBorderStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::CornerRadiusProperty()
{
    return get_activation_factory<Border, IBorderStatics>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::PaddingProperty()
{
    return get_activation_factory<Border, IBorderStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Border::ChildTransitionsProperty()
{
    return get_activation_factory<Border, IBorderStatics>().ChildTransitionsProperty();
}

inline Button::Button()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Button, IButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Button::FlyoutProperty()
{
    return get_activation_factory<Button, IButtonStaticsWithFlyout>().FlyoutProperty();
}

inline CalendarDatePicker::CalendarDatePicker()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarDatePicker, ICalendarDatePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsCalendarOpenProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsCalendarOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DateFormatProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DateFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::PlaceholderTextProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::HeaderProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::HeaderTemplateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::CalendarViewStyleProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().CalendarViewStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::MinDateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().MinDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::MaxDateProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().MaxDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsTodayHighlightedProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsTodayHighlightedProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DisplayModeProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::FirstDayOfWeekProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().FirstDayOfWeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::DayOfWeekFormatProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().DayOfWeekFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::CalendarIdentifierProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsOutOfScopeEnabledProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsOutOfScopeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::IsGroupLabelVisibleProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics>().IsGroupLabelVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarDatePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<CalendarDatePicker, ICalendarDatePickerStatics2>().LightDismissOverlayModeProperty();
}

inline CalendarView::CalendarView()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarView, ICalendarViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarIdentifierProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayOfWeekFormatProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayOfWeekFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsGroupLabelVisibleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsGroupLabelVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DisplayModeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstDayOfWeekProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstDayOfWeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsOutOfScopeEnabledProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsOutOfScopeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::IsTodayHighlightedProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().IsTodayHighlightedProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MaxDateProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MaxDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MinDateProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MinDateProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::NumberOfWeeksInViewProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().NumberOfWeeksInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedDatesProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedDatesProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectionModeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TemplateSettingsProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TemplateSettingsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FocusBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FocusBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedHoverBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedHoverBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedPressedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedPressedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HoverBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HoverBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::PressedBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().PressedBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBorderBrushProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::OutOfScopeBackgroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().OutOfScopeBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBackgroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::PressedForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().PressedForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TodayForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TodayForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::BlackoutForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().BlackoutForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::SelectedForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().SelectedForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::OutOfScopeForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().OutOfScopeForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemForegroundProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::DayItemFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().DayItemFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::TodayFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().TodayFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfMonthLabelFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfMonthLabelFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::MonthYearItemFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().MonthYearItemFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontFamilyProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontSizeProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::FirstOfYearDecadeLabelFontWeightProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().FirstOfYearDecadeLabelFontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HorizontalDayItemAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HorizontalDayItemAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::VerticalDayItemAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().VerticalDayItemAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::HorizontalFirstOfMonthLabelAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().HorizontalFirstOfMonthLabelAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::VerticalFirstOfMonthLabelAlignmentProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().VerticalFirstOfMonthLabelAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarItemBorderThicknessProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarItemBorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarView::CalendarViewDayItemStyleProperty()
{
    return get_activation_factory<CalendarView, ICalendarViewStatics>().CalendarViewDayItemStyleProperty();
}

inline CalendarViewDayItem::CalendarViewDayItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CalendarViewDayItem::IsBlackoutProperty()
{
    return get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemStatics>().IsBlackoutProperty();
}

inline Windows::UI::Xaml::DependencyProperty CalendarViewDayItem::DateProperty()
{
    return get_activation_factory<CalendarViewDayItem, ICalendarViewDayItemStatics>().DateProperty();
}

inline Canvas::Canvas()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Canvas, ICanvasFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Canvas::LeftProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().LeftProperty();
}

inline double Canvas::GetLeft(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetLeft(element);
}

inline void Canvas::SetLeft(const Windows::UI::Xaml::UIElement & element, double length)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetLeft(element, length);
}

inline Windows::UI::Xaml::DependencyProperty Canvas::TopProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().TopProperty();
}

inline double Canvas::GetTop(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetTop(element);
}

inline void Canvas::SetTop(const Windows::UI::Xaml::UIElement & element, double length)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetTop(element, length);
}

inline Windows::UI::Xaml::DependencyProperty Canvas::ZIndexProperty()
{
    return get_activation_factory<Canvas, ICanvasStatics>().ZIndexProperty();
}

inline int32_t Canvas::GetZIndex(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<Canvas, ICanvasStatics>().GetZIndex(element);
}

inline void Canvas::SetZIndex(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<Canvas, ICanvasStatics>().SetZIndex(element, value);
}

inline CaptureElement::CaptureElement() :
    CaptureElement(activate_instance<CaptureElement>())
{}

inline Windows::UI::Xaml::DependencyProperty CaptureElement::SourceProperty()
{
    return get_activation_factory<CaptureElement, ICaptureElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty CaptureElement::StretchProperty()
{
    return get_activation_factory<CaptureElement, ICaptureElementStatics>().StretchProperty();
}

inline CheckBox::CheckBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CheckBox, ICheckBoxFactory>().CreateInstance(outer, inner));
}

inline ChoosingGroupHeaderContainerEventArgs::ChoosingGroupHeaderContainerEventArgs() :
    ChoosingGroupHeaderContainerEventArgs(activate_instance<ChoosingGroupHeaderContainerEventArgs>())
{}

inline ChoosingItemContainerEventArgs::ChoosingItemContainerEventArgs() :
    ChoosingItemContainerEventArgs(activate_instance<ChoosingItemContainerEventArgs>())
{}

inline ColumnDefinition::ColumnDefinition() :
    ColumnDefinition(activate_instance<ColumnDefinition>())
{}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::WidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().WidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::MaxWidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().MaxWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ColumnDefinition::MinWidthProperty()
{
    return get_activation_factory<ColumnDefinition, IColumnDefinitionStatics>().MinWidthProperty();
}

inline ComboBox::ComboBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ComboBox, IComboBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::IsDropDownOpenProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics>().IsDropDownOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::MaxDropDownHeightProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics>().MaxDropDownHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::HeaderProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::HeaderTemplateProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::PlaceholderTextProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::LightDismissOverlayModeProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics3>().LightDismissOverlayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ComboBox::IsTextSearchEnabledProperty()
{
    return get_activation_factory<ComboBox, IComboBoxStatics3>().IsTextSearchEnabledProperty();
}

inline ComboBoxItem::ComboBoxItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ComboBoxItem, IComboBoxItemFactory>().CreateInstance(outer, inner));
}

inline CommandBar::CommandBar()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CommandBar, ICommandBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::PrimaryCommandsProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics>().PrimaryCommandsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::SecondaryCommandsProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics>().SecondaryCommandsProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::CommandBarOverflowPresenterStyleProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics2>().CommandBarOverflowPresenterStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::DefaultLabelPositionProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().DefaultLabelPositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::OverflowButtonVisibilityProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().OverflowButtonVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty CommandBar::IsDynamicOverflowEnabledProperty()
{
    return get_activation_factory<CommandBar, ICommandBarStatics3>().IsDynamicOverflowEnabledProperty();
}

inline CommandBarOverflowPresenter::CommandBarOverflowPresenter()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<CommandBarOverflowPresenter, ICommandBarOverflowPresenterFactory>().CreateInstance(outer, inner));
}

inline ContainerContentChangingEventArgs::ContainerContentChangingEventArgs() :
    ContainerContentChangingEventArgs(activate_instance<ContainerContentChangingEventArgs>())
{}

inline ContentControl::ContentControl()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentControl, IContentControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTemplateProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTemplateSelectorProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentControl::ContentTransitionsProperty()
{
    return get_activation_factory<ContentControl, IContentControlStatics>().ContentTransitionsProperty();
}

inline ContentDialog::ContentDialog()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentDialog, IContentDialogFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::TitleProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::TitleTemplateProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().TitleTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::FullSizeDesiredProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().FullSizeDesiredProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonTextProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonTextProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonCommandProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonCommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonCommandProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonCommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::PrimaryButtonCommandParameterProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().PrimaryButtonCommandParameterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::SecondaryButtonCommandParameterProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().SecondaryButtonCommandParameterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::IsPrimaryButtonEnabledProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().IsPrimaryButtonEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentDialog::IsSecondaryButtonEnabledProperty()
{
    return get_activation_factory<ContentDialog, IContentDialogStatics>().IsSecondaryButtonEnabledProperty();
}

inline ContentPresenter::ContentPresenter()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ContentPresenter, IContentPresenterFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTemplateProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTemplateSelectorProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ContentTransitionsProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ContentTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontSizeProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontFamilyProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontWeightProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontStyleProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::FontStretchProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::CharacterSpacingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::ForegroundProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::TextLineBoundsProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics3>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::TextWrappingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::MaxLinesProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::LineStackingStrategyProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::LineHeightProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BorderBrushProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BorderThicknessProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::CornerRadiusProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::PaddingProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::BackgroundProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::HorizontalContentAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().HorizontalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ContentPresenter::VerticalContentAlignmentProperty()
{
    return get_activation_factory<ContentPresenter, IContentPresenterStatics4>().VerticalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontSizeProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontFamilyProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontWeightProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontStyleProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FontStretchProperty()
{
    return get_activation_factory<Control, IControlStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::CharacterSpacingProperty()
{
    return get_activation_factory<Control, IControlStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::ForegroundProperty()
{
    return get_activation_factory<Control, IControlStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTabStopProperty()
{
    return get_activation_factory<Control, IControlStatics>().IsTabStopProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics>().IsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TabIndexProperty()
{
    return get_activation_factory<Control, IControlStatics>().TabIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TabNavigationProperty()
{
    return get_activation_factory<Control, IControlStatics>().TabNavigationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::TemplateProperty()
{
    return get_activation_factory<Control, IControlStatics>().TemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::PaddingProperty()
{
    return get_activation_factory<Control, IControlStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::HorizontalContentAlignmentProperty()
{
    return get_activation_factory<Control, IControlStatics>().HorizontalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::VerticalContentAlignmentProperty()
{
    return get_activation_factory<Control, IControlStatics>().VerticalContentAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BackgroundProperty()
{
    return get_activation_factory<Control, IControlStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BorderThicknessProperty()
{
    return get_activation_factory<Control, IControlStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::BorderBrushProperty()
{
    return get_activation_factory<Control, IControlStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::DefaultStyleKeyProperty()
{
    return get_activation_factory<Control, IControlStatics>().DefaultStyleKeyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::FocusStateProperty()
{
    return get_activation_factory<Control, IControlStatics>().FocusStateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics2>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::UseSystemFocusVisualsProperty()
{
    return get_activation_factory<Control, IControlStatics3>().UseSystemFocusVisualsProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsTemplateFocusTargetProperty()
{
    return get_activation_factory<Control, IControlStatics3>().IsTemplateFocusTargetProperty();
}

inline bool Control::GetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Control, IControlStatics3>().GetIsTemplateFocusTarget(element);
}

inline void Control::SetIsTemplateFocusTarget(const Windows::UI::Xaml::FrameworkElement & element, bool value)
{
    get_activation_factory<Control, IControlStatics3>().SetIsTemplateFocusTarget(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Control::IsFocusEngagementEnabledProperty()
{
    return get_activation_factory<Control, IControlStatics4>().IsFocusEngagementEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::IsFocusEngagedProperty()
{
    return get_activation_factory<Control, IControlStatics4>().IsFocusEngagedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::RequiresPointerProperty()
{
    return get_activation_factory<Control, IControlStatics4>().RequiresPointerProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusLeftProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusLeftProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusRightProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusRightProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusUpProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusUpProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::XYFocusDownProperty()
{
    return get_activation_factory<Control, IControlStatics4>().XYFocusDownProperty();
}

inline Windows::UI::Xaml::DependencyProperty Control::ElementSoundModeProperty()
{
    return get_activation_factory<Control, IControlStatics4>().ElementSoundModeProperty();
}

inline ControlTemplate::ControlTemplate() :
    ControlTemplate(activate_instance<ControlTemplate>())
{}

inline DataTemplateSelector::DataTemplateSelector()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<DataTemplateSelector, IDataTemplateSelectorFactory>().CreateInstance(outer, inner));
}

inline DatePickedEventArgs::DatePickedEventArgs() :
    DatePickedEventArgs(activate_instance<DatePickedEventArgs>())
{}

inline DatePicker::DatePicker()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<DatePicker, IDatePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::HeaderProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::HeaderTemplateProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::CalendarIdentifierProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DateProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DayVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DayVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MonthVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MonthVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::YearVisibleProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().YearVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::DayFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().DayFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MonthFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MonthFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::YearFormatProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().YearFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MinYearProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MinYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::MaxYearProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().MaxYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::OrientationProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<DatePicker, IDatePickerStatics2>().LightDismissOverlayModeProperty();
}

inline DatePickerFlyout::DatePickerFlyout() :
    DatePickerFlyout(activate_instance<DatePickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::CalendarIdentifierProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().CalendarIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DateProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().DateProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DayVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().DayVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MonthVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MonthVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::YearVisibleProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().YearVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MinYearProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MinYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MaxYearProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics>().MaxYearProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::DayFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().DayFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::MonthFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().MonthFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyout::YearFormatProperty()
{
    return get_activation_factory<DatePickerFlyout, IDatePickerFlyoutStatics2>().YearFormatProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyoutItem::PrimaryTextProperty()
{
    return get_activation_factory<DatePickerFlyoutItem, IDatePickerFlyoutItemStatics>().PrimaryTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty DatePickerFlyoutItem::SecondaryTextProperty()
{
    return get_activation_factory<DatePickerFlyoutItem, IDatePickerFlyoutItemStatics>().SecondaryTextProperty();
}

inline DragItemsStartingEventArgs::DragItemsStartingEventArgs() :
    DragItemsStartingEventArgs(activate_instance<DragItemsStartingEventArgs>())
{}

inline DynamicOverflowItemsChangingEventArgs::DynamicOverflowItemsChangingEventArgs() :
    DynamicOverflowItemsChangingEventArgs(activate_instance<DynamicOverflowItemsChangingEventArgs>())
{}

inline FlipView::FlipView()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<FlipView, IFlipViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty FlipView::UseTouchAnimationsForAllNavigationProperty()
{
    return get_activation_factory<FlipView, IFlipViewStatics2>().UseTouchAnimationsForAllNavigationProperty();
}

inline FlipViewItem::FlipViewItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<FlipViewItem, IFlipViewItemFactory>().CreateInstance(outer, inner));
}

inline Flyout::Flyout()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Flyout, IFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Flyout::ContentProperty()
{
    return get_activation_factory<Flyout, IFlyoutStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty Flyout::FlyoutPresenterStyleProperty()
{
    return get_activation_factory<Flyout, IFlyoutStatics>().FlyoutPresenterStyleProperty();
}

inline FlyoutPresenter::FlyoutPresenter()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<FlyoutPresenter, IFlyoutPresenterFactory>().CreateInstance(outer, inner));
}

inline FontIcon::FontIcon()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<FontIcon, IFontIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::GlyphProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().GlyphProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontSizeProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontFamilyProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontWeightProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::FontStyleProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics2>().IsTextScaleFactorEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty FontIcon::MirroredWhenRightToLeftProperty()
{
    return get_activation_factory<FontIcon, IFontIconStatics3>().MirroredWhenRightToLeftProperty();
}

inline Frame::Frame()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Frame, IFrameFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Frame::CacheSizeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CacheSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CanGoBackProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CanGoBackProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CanGoForwardProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CanGoForwardProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::CurrentSourcePageTypeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().CurrentSourcePageTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::SourcePageTypeProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().SourcePageTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::BackStackDepthProperty()
{
    return get_activation_factory<Frame, IFrameStatics>().BackStackDepthProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::BackStackProperty()
{
    return get_activation_factory<Frame, IFrameStatics2>().BackStackProperty();
}

inline Windows::UI::Xaml::DependencyProperty Frame::ForwardStackProperty()
{
    return get_activation_factory<Frame, IFrameStatics2>().ForwardStackProperty();
}

inline Grid::Grid()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Grid, IGridFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Grid::RowProperty()
{
    return get_activation_factory<Grid, IGridStatics>().RowProperty();
}

inline int32_t Grid::GetRow(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetRow(element);
}

inline void Grid::SetRow(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetRow(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::ColumnProperty()
{
    return get_activation_factory<Grid, IGridStatics>().ColumnProperty();
}

inline int32_t Grid::GetColumn(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetColumn(element);
}

inline void Grid::SetColumn(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetColumn(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::RowSpanProperty()
{
    return get_activation_factory<Grid, IGridStatics>().RowSpanProperty();
}

inline int32_t Grid::GetRowSpan(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetRowSpan(element);
}

inline void Grid::SetRowSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetRowSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::ColumnSpanProperty()
{
    return get_activation_factory<Grid, IGridStatics>().ColumnSpanProperty();
}

inline int32_t Grid::GetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Grid, IGridStatics>().GetColumnSpan(element);
}

inline void Grid::SetColumnSpan(const Windows::UI::Xaml::FrameworkElement & element, int32_t value)
{
    get_activation_factory<Grid, IGridStatics>().SetColumnSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Grid::BorderBrushProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::BorderThicknessProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::CornerRadiusProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty Grid::PaddingProperty()
{
    return get_activation_factory<Grid, IGridStatics2>().PaddingProperty();
}

inline GridView::GridView()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GridView, IGridViewFactory>().CreateInstance(outer, inner));
}

inline GridViewHeaderItem::GridViewHeaderItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GridViewHeaderItem, IGridViewHeaderItemFactory>().CreateInstance(outer, inner));
}

inline GridViewItem::GridViewItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GridViewItem, IGridViewItemFactory>().CreateInstance(outer, inner));
}

inline GroupItem::GroupItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupItem, IGroupItemFactory>().CreateInstance(outer, inner));
}

inline GroupStyle::GroupStyle()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupStyle, IGroupStyleFactory>().CreateInstance(outer, inner));
}

inline GroupStyleSelector::GroupStyleSelector()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<GroupStyleSelector, IGroupStyleSelectorFactory>().CreateInstance(outer, inner));
}

inline Hub::Hub()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Hub, IHubFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Hub::HeaderProperty()
{
    return get_activation_factory<Hub, IHubStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::HeaderTemplateProperty()
{
    return get_activation_factory<Hub, IHubStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::OrientationProperty()
{
    return get_activation_factory<Hub, IHubStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::DefaultSectionIndexProperty()
{
    return get_activation_factory<Hub, IHubStatics>().DefaultSectionIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::SemanticZoomOwnerProperty()
{
    return get_activation_factory<Hub, IHubStatics>().SemanticZoomOwnerProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::IsActiveViewProperty()
{
    return get_activation_factory<Hub, IHubStatics>().IsActiveViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty Hub::IsZoomedInViewProperty()
{
    return get_activation_factory<Hub, IHubStatics>().IsZoomedInViewProperty();
}

inline HubSection::HubSection()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<HubSection, IHubSectionFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty HubSection::HeaderProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::HeaderTemplateProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::ContentTemplateProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().ContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty HubSection::IsHeaderInteractiveProperty()
{
    return get_activation_factory<HubSection, IHubSectionStatics>().IsHeaderInteractiveProperty();
}

inline HubSectionHeaderClickEventArgs::HubSectionHeaderClickEventArgs() :
    HubSectionHeaderClickEventArgs(activate_instance<HubSectionHeaderClickEventArgs>())
{}

inline HyperlinkButton::HyperlinkButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<HyperlinkButton, IHyperlinkButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty HyperlinkButton::NavigateUriProperty()
{
    return get_activation_factory<HyperlinkButton, IHyperlinkButtonStatics>().NavigateUriProperty();
}

inline Windows::UI::Xaml::DependencyProperty IconElement::ForegroundProperty()
{
    return get_activation_factory<IconElement, IIconElementStatics>().ForegroundProperty();
}

inline Image::Image() :
    Image(activate_instance<Image>())
{}

inline Windows::UI::Xaml::DependencyProperty Image::SourceProperty()
{
    return get_activation_factory<Image, IImageStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::StretchProperty()
{
    return get_activation_factory<Image, IImageStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::NineGridProperty()
{
    return get_activation_factory<Image, IImageStatics>().NineGridProperty();
}

inline Windows::UI::Xaml::DependencyProperty Image::PlayToSourceProperty()
{
    return get_activation_factory<Image, IImageStatics>().PlayToSourceProperty();
}

inline InkCanvas::InkCanvas()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkCanvas, IInkCanvasFactory>().CreateInstance(outer, inner));
}

inline InkToolbar::InkToolbar()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbar, IInkToolbarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::InitialControlsProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().InitialControlsProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::ChildrenProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().ChildrenProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::ActiveToolProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().ActiveToolProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::InkDrawingAttributesProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().InkDrawingAttributesProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::IsRulerButtonCheckedProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().IsRulerButtonCheckedProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbar::TargetInkCanvasProperty()
{
    return get_activation_factory<InkToolbar, IInkToolbarStatics>().TargetInkCanvasProperty();
}

inline InkToolbarBallpointPenButton::InkToolbarBallpointPenButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarBallpointPenButton, IInkToolbarBallpointPenButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarCustomPenButton::InkToolbarCustomPenButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomPenButton::CustomPenProperty()
{
    return get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonStatics>().CustomPenProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomPenButton::ConfigurationContentProperty()
{
    return get_activation_factory<InkToolbarCustomPenButton, IInkToolbarCustomPenButtonStatics>().ConfigurationContentProperty();
}

inline InkToolbarCustomToggleButton::InkToolbarCustomToggleButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomToggleButton, IInkToolbarCustomToggleButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarCustomToolButton::InkToolbarCustomToolButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarCustomToolButton, IInkToolbarCustomToolButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarCustomToolButton::ConfigurationContentProperty()
{
    return get_activation_factory<InkToolbarCustomToolButton, IInkToolbarCustomToolButtonStatics>().ConfigurationContentProperty();
}

inline InkToolbarEraserButton::InkToolbarEraserButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarEraserButton, IInkToolbarEraserButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarHighlighterButton::InkToolbarHighlighterButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarHighlighterButton, IInkToolbarHighlighterButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::PaletteProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().PaletteProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::MinStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().MinStrokeWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::MaxStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().MaxStrokeWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedBrushProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedBrushIndexProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedBrushIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenButton::SelectedStrokeWidthProperty()
{
    return get_activation_factory<InkToolbarPenButton, IInkToolbarPenButtonStatics>().SelectedStrokeWidthProperty();
}

inline InkToolbarPenConfigurationControl::InkToolbarPenConfigurationControl()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarPenConfigurationControl, IInkToolbarPenConfigurationControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarPenConfigurationControl::PenButtonProperty()
{
    return get_activation_factory<InkToolbarPenConfigurationControl, IInkToolbarPenConfigurationControlStatics>().PenButtonProperty();
}

inline InkToolbarPencilButton::InkToolbarPencilButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarPencilButton, IInkToolbarPencilButtonFactory>().CreateInstance(outer, inner));
}

inline InkToolbarRulerButton::InkToolbarRulerButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<InkToolbarRulerButton, IInkToolbarRulerButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarRulerButton::RulerProperty()
{
    return get_activation_factory<InkToolbarRulerButton, IInkToolbarRulerButtonStatics>().RulerProperty();
}

inline Windows::UI::Xaml::DependencyProperty InkToolbarToolButton::IsExtensionGlyphShownProperty()
{
    return get_activation_factory<InkToolbarToolButton, IInkToolbarToolButtonStatics>().IsExtensionGlyphShownProperty();
}

inline ItemClickEventArgs::ItemClickEventArgs() :
    ItemClickEventArgs(activate_instance<ItemClickEventArgs>())
{}

inline ItemsControl::ItemsControl()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ItemsControl, IItemsControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemsSourceProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemTemplateProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemTemplateSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemTemplateSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemsPanelProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsPanelProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::DisplayMemberPathProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().DisplayMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerStyleProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerStyleSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerStyleSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::ItemContainerTransitionsProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemContainerTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::GroupStyleSelectorProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().GroupStyleSelectorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsControl::IsGroupingProperty()
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().IsGroupingProperty();
}

inline Windows::UI::Xaml::Controls::ItemsControl ItemsControl::GetItemsOwner(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().GetItemsOwner(element);
}

inline Windows::UI::Xaml::Controls::ItemsControl ItemsControl::ItemsControlFromItemContainer(const Windows::UI::Xaml::DependencyObject & container)
{
    return get_activation_factory<ItemsControl, IItemsControlStatics>().ItemsControlFromItemContainer(container);
}

inline ItemsPanelTemplate::ItemsPanelTemplate() :
    ItemsPanelTemplate(activate_instance<ItemsPanelTemplate>())
{}

inline ItemsPickedEventArgs::ItemsPickedEventArgs() :
    ItemsPickedEventArgs(activate_instance<ItemsPickedEventArgs>())
{}

inline ItemsPresenter::ItemsPresenter() :
    ItemsPresenter(activate_instance<ItemsPresenter>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderTemplateProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::HeaderTransitionsProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().HeaderTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::PaddingProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterTemplateProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsPresenter::FooterTransitionsProperty()
{
    return get_activation_factory<ItemsPresenter, IItemsPresenterStatics2>().FooterTransitionsProperty();
}

inline ItemsStackPanel::ItemsStackPanel() :
    ItemsStackPanel(activate_instance<ItemsStackPanel>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::GroupPaddingProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().GroupPaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::OrientationProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::GroupHeaderPlacementProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().GroupHeaderPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::CacheLengthProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics>().CacheLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsStackPanel::AreStickyGroupHeadersEnabledProperty()
{
    return get_activation_factory<ItemsStackPanel, IItemsStackPanelStatics2>().AreStickyGroupHeadersEnabledProperty();
}

inline ItemsWrapGrid::ItemsWrapGrid() :
    ItemsWrapGrid(activate_instance<ItemsWrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::GroupPaddingProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().GroupPaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::OrientationProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::ItemWidthProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::ItemHeightProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::GroupHeaderPlacementProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().GroupHeaderPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::CacheLengthProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics>().CacheLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ItemsWrapGrid::AreStickyGroupHeadersEnabledProperty()
{
    return get_activation_factory<ItemsWrapGrid, IItemsWrapGridStatics2>().AreStickyGroupHeadersEnabledProperty();
}

inline ListBox::ListBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ListBox, IListBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ListBox::SelectionModeProperty()
{
    return get_activation_factory<ListBox, IListBoxStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListBox::SingleSelectionFollowsFocusProperty()
{
    return get_activation_factory<ListBox, IListBoxStatics2>().SingleSelectionFollowsFocusProperty();
}

inline ListBoxItem::ListBoxItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ListBoxItem, IListBoxItemFactory>().CreateInstance(outer, inner));
}

inline ListPickerFlyout::ListPickerFlyout() :
    ListPickerFlyout(activate_instance<ListPickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::ItemsSourceProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().ItemsSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::ItemTemplateProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().ItemTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::DisplayMemberPathProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().DisplayMemberPathProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectionModeProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedIndexProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedItemProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedItemProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedValueProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedValueProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListPickerFlyout::SelectedValuePathProperty()
{
    return get_activation_factory<ListPickerFlyout, IListPickerFlyoutStatics>().SelectedValuePathProperty();
}

inline ListView::ListView()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ListView, IListViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SelectionModeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().SelectionModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsSwipeEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsSwipeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::CanDragItemsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().CanDragItemsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::CanReorderItemsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().CanReorderItemsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsItemClickEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsItemClickEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::DataFetchSizeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().DataFetchSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IncrementalLoadingThresholdProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IncrementalLoadingThresholdProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IncrementalLoadingTriggerProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IncrementalLoadingTriggerProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SemanticZoomOwnerProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().SemanticZoomOwnerProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsActiveViewProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsActiveViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsZoomedInViewProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().IsZoomedInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderTemplateProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::HeaderTransitionsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics>().HeaderTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::ShowsScrollingPlaceholdersProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().ShowsScrollingPlaceholdersProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterTemplateProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::FooterTransitionsProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics2>().FooterTransitionsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::ReorderModeProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics3>().ReorderModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::IsMultiSelectCheckBoxEnabledProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics4>().IsMultiSelectCheckBoxEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty ListViewBase::SingleSelectionFollowsFocusProperty()
{
    return get_activation_factory<ListViewBase, IListViewBaseStatics5>().SingleSelectionFollowsFocusProperty();
}

inline ListViewHeaderItem::ListViewHeaderItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ListViewHeaderItem, IListViewHeaderItemFactory>().CreateInstance(outer, inner));
}

inline ListViewItem::ListViewItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ListViewItem, IListViewItemFactory>().CreateInstance(outer, inner));
}

inline hstring ListViewPersistenceHelper::GetRelativeScrollPosition(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, const Windows::UI::Xaml::Controls::ListViewItemToKeyHandler & itemToKeyHandler)
{
    return get_activation_factory<ListViewPersistenceHelper, IListViewPersistenceHelperStatics>().GetRelativeScrollPosition(listViewBase, itemToKeyHandler);
}

inline Windows::Foundation::IAsyncAction ListViewPersistenceHelper::SetRelativeScrollPositionAsync(const Windows::UI::Xaml::Controls::ListViewBase & listViewBase, hstring_ref relativeScrollPosition, const Windows::UI::Xaml::Controls::ListViewKeyToItemHandler & keyToItemHandler)
{
    return get_activation_factory<ListViewPersistenceHelper, IListViewPersistenceHelperStatics>().SetRelativeScrollPositionAsync(listViewBase, relativeScrollPosition, keyToItemHandler);
}

inline MediaElement::MediaElement() :
    MediaElement(activate_instance<MediaElement>())
{}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PosterSourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PosterSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::SourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsMutedProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsMutedProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsAudioOnlyProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsAudioOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AutoPlayProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AutoPlayProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::VolumeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().VolumeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::BalanceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().BalanceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalVideoHeightProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalVideoHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalVideoWidthProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalVideoWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::NaturalDurationProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().NaturalDurationProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PositionProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PositionProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DownloadProgressProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DownloadProgressProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::BufferingProgressProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().BufferingProgressProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DownloadProgressOffsetProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DownloadProgressOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CurrentStateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CurrentStateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CanSeekProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CanSeekProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::CanPauseProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().CanPauseProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioStreamCountProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioStreamCountProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioStreamIndexProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioStreamIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlaybackRateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PlaybackRateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsLoopingProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsLoopingProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlayToSourceProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().PlayToSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::DefaultPlaybackRateProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().DefaultPlaybackRateProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AspectRatioWidthProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AspectRatioWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AspectRatioHeightProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AspectRatioHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::RealTimePlaybackProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().RealTimePlaybackProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioCategoryProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioCategoryProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AudioDeviceTypeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().AudioDeviceTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::ProtectionManagerProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().ProtectionManagerProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::Stereo3DVideoPackingModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().Stereo3DVideoPackingModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::Stereo3DVideoRenderModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().Stereo3DVideoRenderModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsStereo3DVideoProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().IsStereo3DVideoProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::ActualStereo3DVideoPackingModeProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics>().ActualStereo3DVideoPackingModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::AreTransportControlsEnabledProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().AreTransportControlsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::StretchProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::IsFullWindowProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().IsFullWindowProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaElement::PlayToPreferredSourceUriProperty()
{
    return get_activation_factory<MediaElement, IMediaElementStatics2>().PlayToPreferredSourceUriProperty();
}

inline MediaPlayerElement::MediaPlayerElement()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaPlayerElement, IMediaPlayerElementFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::SourceProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::AreTransportControlsEnabledProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().AreTransportControlsEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::PosterSourceProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().PosterSourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::StretchProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::AutoPlayProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().AutoPlayProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::IsFullWindowProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().IsFullWindowProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerElement::MediaPlayerProperty()
{
    return get_activation_factory<MediaPlayerElement, IMediaPlayerElementStatics>().MediaPlayerProperty();
}

inline MediaPlayerPresenter::MediaPlayerPresenter()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::MediaPlayerProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().MediaPlayerProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::StretchProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaPlayerPresenter::IsFullWindowProperty()
{
    return get_activation_factory<MediaPlayerPresenter, IMediaPlayerPresenterStatics>().IsFullWindowProperty();
}

inline MediaTransportControls::MediaTransportControls()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MediaTransportControls, IMediaTransportControlsFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFullWindowButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFullWindowButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFullWindowEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFullWindowEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsZoomButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsZoomButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsZoomEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsZoomEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastForwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastForwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastForwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastForwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastRewindButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastRewindButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsFastRewindEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsFastRewindEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsStopButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsStopButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsStopEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsStopEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsVolumeButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsVolumeButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsVolumeEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsVolumeEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPlaybackRateButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsPlaybackRateButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPlaybackRateEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsPlaybackRateEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSeekBarVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsSeekBarVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSeekEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsSeekEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsCompactProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics>().IsCompactProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipForwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipForwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipForwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipForwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipBackwardButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipBackwardButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsSkipBackwardEnabledProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsSkipBackwardEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsNextTrackButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsNextTrackButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::IsPreviousTrackButtonVisibleProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().IsPreviousTrackButtonVisibleProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControls::FastPlayFallbackBehaviourProperty()
{
    return get_activation_factory<MediaTransportControls, IMediaTransportControlsStatics2>().FastPlayFallbackBehaviourProperty();
}

inline Windows::UI::Xaml::DependencyProperty MediaTransportControlsHelper::DropoutOrderProperty()
{
    return get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().DropoutOrderProperty();
}

inline Windows::Foundation::IReference<int32_t> MediaTransportControlsHelper::GetDropoutOrder(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().GetDropoutOrder(element);
}

inline void MediaTransportControlsHelper::SetDropoutOrder(const Windows::UI::Xaml::UIElement & element, const Windows::Foundation::IReference<int32_t> & value)
{
    get_activation_factory<MediaTransportControlsHelper, IMediaTransportControlsHelperStatics>().SetDropoutOrder(element, value);
}

inline MenuFlyout::MenuFlyout()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyout, IMenuFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyout::MenuFlyoutPresenterStyleProperty()
{
    return get_activation_factory<MenuFlyout, IMenuFlyoutStatics>().MenuFlyoutPresenterStyleProperty();
}

inline MenuFlyoutItem::MenuFlyoutItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::TextProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::CommandProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().CommandProperty();
}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutItem::CommandParameterProperty()
{
    return get_activation_factory<MenuFlyoutItem, IMenuFlyoutItemStatics>().CommandParameterProperty();
}

inline MenuFlyoutPresenter::MenuFlyoutPresenter()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutPresenter, IMenuFlyoutPresenterFactory>().CreateInstance(outer, inner));
}

inline MenuFlyoutSeparator::MenuFlyoutSeparator()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<MenuFlyoutSeparator, IMenuFlyoutSeparatorFactory>().CreateInstance(outer, inner));
}

inline MenuFlyoutSubItem::MenuFlyoutSubItem() :
    MenuFlyoutSubItem(activate_instance<MenuFlyoutSubItem>())
{}

inline Windows::UI::Xaml::DependencyProperty MenuFlyoutSubItem::TextProperty()
{
    return get_activation_factory<MenuFlyoutSubItem, IMenuFlyoutSubItemStatics>().TextProperty();
}

inline Page::Page()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Page, IPageFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Page::FrameProperty()
{
    return get_activation_factory<Page, IPageStatics>().FrameProperty();
}

inline Windows::UI::Xaml::DependencyProperty Page::TopAppBarProperty()
{
    return get_activation_factory<Page, IPageStatics>().TopAppBarProperty();
}

inline Windows::UI::Xaml::DependencyProperty Page::BottomAppBarProperty()
{
    return get_activation_factory<Page, IPageStatics>().BottomAppBarProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::BackgroundProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().BackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::IsItemsHostProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().IsItemsHostProperty();
}

inline Windows::UI::Xaml::DependencyProperty Panel::ChildrenTransitionsProperty()
{
    return get_activation_factory<Panel, IPanelStatics>().ChildrenTransitionsProperty();
}

inline PasswordBox::PasswordBox() :
    PasswordBox(activate_instance<PasswordBox>())
{}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().PasswordProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordCharProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().PasswordCharProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::IsPasswordRevealButtonEnabledProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().IsPasswordRevealButtonEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::MaxLengthProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics>().MaxLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::HeaderProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::HeaderTemplateProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PlaceholderTextProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::PasswordRevealModeProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().PasswordRevealModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::TextReadingOrderProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty PasswordBox::InputScopeProperty()
{
    return get_activation_factory<PasswordBox, IPasswordBoxStatics3>().InputScopeProperty();
}

inline PathIcon::PathIcon()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<PathIcon, IPathIconFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty PathIcon::DataProperty()
{
    return get_activation_factory<PathIcon, IPathIconStatics>().DataProperty();
}

inline PickerConfirmedEventArgs::PickerConfirmedEventArgs() :
    PickerConfirmedEventArgs(activate_instance<PickerConfirmedEventArgs>())
{}

inline PickerFlyout::PickerFlyout() :
    PickerFlyout(activate_instance<PickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty PickerFlyout::ContentProperty()
{
    return get_activation_factory<PickerFlyout, IPickerFlyoutStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty PickerFlyout::ConfirmationButtonsVisibleProperty()
{
    return get_activation_factory<PickerFlyout, IPickerFlyoutStatics>().ConfirmationButtonsVisibleProperty();
}

inline Pivot::Pivot()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Pivot, IPivotFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Pivot::TitleProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::TitleTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().TitleTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::HeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SelectedIndexProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SelectedIndexProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SelectedItemProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SelectedItemProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::IsLockedProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().IsLockedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::SlideInAnimationGroupProperty()
{
    return get_activation_factory<Pivot, IPivotStatics>().SlideInAnimationGroupProperty();
}

inline Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup Pivot::GetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element)
{
    return get_activation_factory<Pivot, IPivotStatics>().GetSlideInAnimationGroup(element);
}

inline void Pivot::SetSlideInAnimationGroup(const Windows::UI::Xaml::FrameworkElement & element, Windows::UI::Xaml::Controls::PivotSlideInAnimationGroup value)
{
    get_activation_factory<Pivot, IPivotStatics>().SetSlideInAnimationGroup(element, value);
}

inline Windows::UI::Xaml::DependencyProperty Pivot::LeftHeaderProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().LeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::LeftHeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().LeftHeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::RightHeaderProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().RightHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::RightHeaderTemplateProperty()
{
    return get_activation_factory<Pivot, IPivotStatics2>().RightHeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::HeaderFocusVisualPlacementProperty()
{
    return get_activation_factory<Pivot, IPivotStatics3>().HeaderFocusVisualPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty Pivot::IsHeaderItemsCarouselEnabledProperty()
{
    return get_activation_factory<Pivot, IPivotStatics3>().IsHeaderItemsCarouselEnabledProperty();
}

inline PivotItem::PivotItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<PivotItem, IPivotItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty PivotItem::HeaderProperty()
{
    return get_activation_factory<PivotItem, IPivotItemStatics>().HeaderProperty();
}

inline PivotItemEventArgs::PivotItemEventArgs() :
    PivotItemEventArgs(activate_instance<PivotItemEventArgs>())
{}

inline ProgressBar::ProgressBar()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ProgressBar, IProgressBarFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::IsIndeterminateProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().IsIndeterminateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::ShowErrorProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().ShowErrorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ProgressBar::ShowPausedProperty()
{
    return get_activation_factory<ProgressBar, IProgressBarStatics>().ShowPausedProperty();
}

inline ProgressRing::ProgressRing() :
    ProgressRing(activate_instance<ProgressRing>())
{}

inline Windows::UI::Xaml::DependencyProperty ProgressRing::IsActiveProperty()
{
    return get_activation_factory<ProgressRing, IProgressRingStatics>().IsActiveProperty();
}

inline RadioButton::RadioButton()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<RadioButton, IRadioButtonFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RadioButton::GroupNameProperty()
{
    return get_activation_factory<RadioButton, IRadioButtonStatics>().GroupNameProperty();
}

inline RelativePanel::RelativePanel()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<RelativePanel, IRelativePanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::LeftOfProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().LeftOfProperty();
}

inline Windows::IInspectable RelativePanel::GetLeftOf(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetLeftOf(element);
}

inline void RelativePanel::SetLeftOf(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetLeftOf(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AboveProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AboveProperty();
}

inline Windows::IInspectable RelativePanel::GetAbove(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAbove(element);
}

inline void RelativePanel::SetAbove(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAbove(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::RightOfProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().RightOfProperty();
}

inline Windows::IInspectable RelativePanel::GetRightOf(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetRightOf(element);
}

inline void RelativePanel::SetRightOf(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetRightOf(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BelowProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BelowProperty();
}

inline Windows::IInspectable RelativePanel::GetBelow(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetBelow(element);
}

inline void RelativePanel::SetBelow(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetBelow(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignHorizontalCenterWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignHorizontalCenterWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignHorizontalCenterWith(element);
}

inline void RelativePanel::SetAlignHorizontalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignHorizontalCenterWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignVerticalCenterWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignVerticalCenterWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignVerticalCenterWith(element);
}

inline void RelativePanel::SetAlignVerticalCenterWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignVerticalCenterWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignLeftWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignLeftWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignLeftWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignLeftWith(element);
}

inline void RelativePanel::SetAlignLeftWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignLeftWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignTopWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignTopWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignTopWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignTopWith(element);
}

inline void RelativePanel::SetAlignTopWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignTopWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignRightWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignRightWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignRightWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignRightWith(element);
}

inline void RelativePanel::SetAlignRightWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignRightWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignBottomWithProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignBottomWithProperty();
}

inline Windows::IInspectable RelativePanel::GetAlignBottomWith(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignBottomWith(element);
}

inline void RelativePanel::SetAlignBottomWith(const Windows::UI::Xaml::UIElement & element, const Windows::IInspectable & value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignBottomWith(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignLeftWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignLeftWithPanelProperty();
}

inline bool RelativePanel::GetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignLeftWithPanel(element);
}

inline void RelativePanel::SetAlignLeftWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignLeftWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignTopWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignTopWithPanelProperty();
}

inline bool RelativePanel::GetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignTopWithPanel(element);
}

inline void RelativePanel::SetAlignTopWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignTopWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignRightWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignRightWithPanelProperty();
}

inline bool RelativePanel::GetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignRightWithPanel(element);
}

inline void RelativePanel::SetAlignRightWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignRightWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignBottomWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignBottomWithPanelProperty();
}

inline bool RelativePanel::GetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignBottomWithPanel(element);
}

inline void RelativePanel::SetAlignBottomWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignBottomWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignHorizontalCenterWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignHorizontalCenterWithPanelProperty();
}

inline bool RelativePanel::GetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignHorizontalCenterWithPanel(element);
}

inline void RelativePanel::SetAlignHorizontalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignHorizontalCenterWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::AlignVerticalCenterWithPanelProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().AlignVerticalCenterWithPanelProperty();
}

inline bool RelativePanel::GetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().GetAlignVerticalCenterWithPanel(element);
}

inline void RelativePanel::SetAlignVerticalCenterWithPanel(const Windows::UI::Xaml::UIElement & element, bool value)
{
    get_activation_factory<RelativePanel, IRelativePanelStatics>().SetAlignVerticalCenterWithPanel(element, value);
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BorderBrushProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::BorderThicknessProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::CornerRadiusProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty RelativePanel::PaddingProperty()
{
    return get_activation_factory<RelativePanel, IRelativePanelStatics>().PaddingProperty();
}

inline RichEditBox::RichEditBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<RichEditBox, IRichEditBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsReadOnlyProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsReadOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::AcceptsReturnProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().AcceptsReturnProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextAlignmentProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextWrappingProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsSpellCheckEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsSpellCheckEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsTextPredictionEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().IsTextPredictionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::InputScopeProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics>().InputScopeProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::HeaderProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::HeaderTemplateProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::PlaceholderTextProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::IsColorFontEnabledProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::DesiredCandidateWindowAlignmentProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics3>().DesiredCandidateWindowAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::TextReadingOrderProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics3>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichEditBox::ClipboardCopyFormatProperty()
{
    return get_activation_factory<RichEditBox, IRichEditBoxStatics4>().ClipboardCopyFormatProperty();
}

inline RichTextBlock::RichTextBlock() :
    RichTextBlock(activate_instance<RichTextBlock>())
{}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontSizeProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontFamilyProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontWeightProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontStyleProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::FontStretchProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::ForegroundProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextWrappingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextTrimmingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextTrimmingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextAlignmentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::PaddingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::LineHeightProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::LineStackingStrategyProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::CharacterSpacingProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::OverflowContentTargetProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().OverflowContentTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsTextSelectionEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().IsTextSelectionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::HasOverflowContentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().HasOverflowContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::SelectedTextProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().SelectedTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextIndentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics>().TextIndentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::MaxLinesProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextLineBoundsProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::SelectionHighlightColorProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsColorFontEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::TextReadingOrderProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics2>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlock::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<RichTextBlock, IRichTextBlockStatics3>().IsTextScaleFactorEnabledProperty();
}

inline RichTextBlockOverflow::RichTextBlockOverflow() :
    RichTextBlockOverflow(activate_instance<RichTextBlockOverflow>())
{}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::OverflowContentTargetProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().OverflowContentTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::PaddingProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::HasOverflowContentProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics>().HasOverflowContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty RichTextBlockOverflow::MaxLinesProperty()
{
    return get_activation_factory<RichTextBlockOverflow, IRichTextBlockOverflowStatics2>().MaxLinesProperty();
}

inline RowDefinition::RowDefinition() :
    RowDefinition(activate_instance<RowDefinition>())
{}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::HeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().HeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::MaxHeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().MaxHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty RowDefinition::MinHeightProperty()
{
    return get_activation_factory<RowDefinition, IRowDefinitionStatics>().MinHeightProperty();
}

inline ScrollContentPresenter::ScrollContentPresenter() :
    ScrollContentPresenter(activate_instance<ScrollContentPresenter>())
{}

inline ScrollViewer::ScrollViewer() :
    ScrollViewer(activate_instance<ScrollViewer>())
{}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalSnapPointsAlignmentProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalSnapPointsAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalSnapPointsAlignmentProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalSnapPointsAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomSnapPointsTypeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomSnapPointsTypeProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalOffsetProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ViewportWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ViewportWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ScrollableWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ScrollableWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedHorizontalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ComputedHorizontalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ExtentWidthProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ExtentWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalOffsetProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ViewportHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ViewportHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ScrollableHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ScrollableHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ComputedVerticalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ComputedVerticalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ExtentHeightProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ExtentHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MinZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().MinZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::MaxZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().MaxZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomFactorProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomFactorProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomSnapPointsProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomSnapPointsProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::Controls::ScrollBarVisibility ScrollViewer::GetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetHorizontalScrollBarVisibility(element);
}

inline void ScrollViewer::SetHorizontalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility horizontalScrollBarVisibility)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetHorizontalScrollBarVisibility(element, horizontalScrollBarVisibility);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollBarVisibilityProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalScrollBarVisibilityProperty();
}

inline Windows::UI::Xaml::Controls::ScrollBarVisibility ScrollViewer::GetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetVerticalScrollBarVisibility(element);
}

inline void ScrollViewer::SetVerticalScrollBarVisibility(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollBarVisibility verticalScrollBarVisibility)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetVerticalScrollBarVisibility(element, verticalScrollBarVisibility);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsHorizontalRailEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsHorizontalRailEnabledProperty();
}

inline bool ScrollViewer::GetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsHorizontalRailEnabled(element);
}

inline void ScrollViewer::SetIsHorizontalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalRailEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsHorizontalRailEnabled(element, isHorizontalRailEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsVerticalRailEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsVerticalRailEnabledProperty();
}

inline bool ScrollViewer::GetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsVerticalRailEnabled(element);
}

inline void ScrollViewer::SetIsVerticalRailEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalRailEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsVerticalRailEnabled(element, isVerticalRailEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsHorizontalScrollChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsHorizontalScrollChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsHorizontalScrollChainingEnabled(element);
}

inline void ScrollViewer::SetIsHorizontalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isHorizontalScrollChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsHorizontalScrollChainingEnabled(element, isHorizontalScrollChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsVerticalScrollChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsVerticalScrollChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsVerticalScrollChainingEnabled(element);
}

inline void ScrollViewer::SetIsVerticalScrollChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isVerticalScrollChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsVerticalScrollChainingEnabled(element, isVerticalScrollChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsZoomChainingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsZoomChainingEnabledProperty();
}

inline bool ScrollViewer::GetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsZoomChainingEnabled(element);
}

inline void ScrollViewer::SetIsZoomChainingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomChainingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsZoomChainingEnabled(element, isZoomChainingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsScrollInertiaEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsScrollInertiaEnabledProperty();
}

inline bool ScrollViewer::GetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsScrollInertiaEnabled(element);
}

inline void ScrollViewer::SetIsScrollInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isScrollInertiaEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsScrollInertiaEnabled(element, isScrollInertiaEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsZoomInertiaEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsZoomInertiaEnabledProperty();
}

inline bool ScrollViewer::GetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsZoomInertiaEnabled(element);
}

inline void ScrollViewer::SetIsZoomInertiaEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isZoomInertiaEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsZoomInertiaEnabled(element, isZoomInertiaEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::HorizontalScrollModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().HorizontalScrollModeProperty();
}

inline Windows::UI::Xaml::Controls::ScrollMode ScrollViewer::GetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetHorizontalScrollMode(element);
}

inline void ScrollViewer::SetHorizontalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode horizontalScrollMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetHorizontalScrollMode(element, horizontalScrollMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::VerticalScrollModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().VerticalScrollModeProperty();
}

inline Windows::UI::Xaml::Controls::ScrollMode ScrollViewer::GetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetVerticalScrollMode(element);
}

inline void ScrollViewer::SetVerticalScrollMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ScrollMode verticalScrollMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetVerticalScrollMode(element, verticalScrollMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::ZoomModeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().ZoomModeProperty();
}

inline Windows::UI::Xaml::Controls::ZoomMode ScrollViewer::GetZoomMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetZoomMode(element);
}

inline void ScrollViewer::SetZoomMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::ZoomMode zoomMode)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetZoomMode(element, zoomMode);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::IsDeferredScrollingEnabledProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().IsDeferredScrollingEnabledProperty();
}

inline bool ScrollViewer::GetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetIsDeferredScrollingEnabled(element);
}

inline void ScrollViewer::SetIsDeferredScrollingEnabled(const Windows::UI::Xaml::DependencyObject & element, bool isDeferredScrollingEnabled)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetIsDeferredScrollingEnabled(element, isDeferredScrollingEnabled);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::BringIntoViewOnFocusChangeProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().BringIntoViewOnFocusChangeProperty();
}

inline bool ScrollViewer::GetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics>().GetBringIntoViewOnFocusChange(element);
}

inline void ScrollViewer::SetBringIntoViewOnFocusChange(const Windows::UI::Xaml::DependencyObject & element, bool bringIntoViewOnFocusChange)
{
    get_activation_factory<ScrollViewer, IScrollViewerStatics>().SetBringIntoViewOnFocusChange(element, bringIntoViewOnFocusChange);
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::TopLeftHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().TopLeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::LeftHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().LeftHeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ScrollViewer::TopHeaderProperty()
{
    return get_activation_factory<ScrollViewer, IScrollViewerStatics2>().TopHeaderProperty();
}

inline ScrollViewerViewChangedEventArgs::ScrollViewerViewChangedEventArgs() :
    ScrollViewerViewChangedEventArgs(activate_instance<ScrollViewerViewChangedEventArgs>())
{}

inline SearchBox::SearchBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SearchBox, ISearchBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::SearchHistoryEnabledProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().SearchHistoryEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::SearchHistoryContextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().SearchHistoryContextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::PlaceholderTextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::QueryTextProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().QueryTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::FocusOnKeyboardInputProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().FocusOnKeyboardInputProperty();
}

inline Windows::UI::Xaml::DependencyProperty SearchBox::ChooseSuggestionOnEnterProperty()
{
    return get_activation_factory<SearchBox, ISearchBoxStatics>().ChooseSuggestionOnEnterProperty();
}

inline SearchBoxResultSuggestionChosenEventArgs::SearchBoxResultSuggestionChosenEventArgs() :
    SearchBoxResultSuggestionChosenEventArgs(activate_instance<SearchBoxResultSuggestionChosenEventArgs>())
{}

inline SelectionChangedEventArgs::SelectionChangedEventArgs(const Windows::Foundation::Collections::IVector<Windows::IInspectable> & removedItems, const Windows::Foundation::Collections::IVector<Windows::IInspectable> & addedItems)
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SelectionChangedEventArgs, ISelectionChangedEventArgsFactory>().CreateInstanceWithRemovedItemsAndAddedItems(removedItems, addedItems, outer, inner));
}

inline SemanticZoom::SemanticZoom() :
    SemanticZoom(activate_instance<SemanticZoom>())
{}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::ZoomedInViewProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().ZoomedInViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::ZoomedOutViewProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().ZoomedOutViewProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::IsZoomedInViewActiveProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().IsZoomedInViewActiveProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::CanChangeViewsProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().CanChangeViewsProperty();
}

inline Windows::UI::Xaml::DependencyProperty SemanticZoom::IsZoomOutButtonEnabledProperty()
{
    return get_activation_factory<SemanticZoom, ISemanticZoomStatics>().IsZoomOutButtonEnabledProperty();
}

inline SemanticZoomLocation::SemanticZoomLocation() :
    SemanticZoomLocation(activate_instance<SemanticZoomLocation>())
{}

inline SemanticZoomViewChangedEventArgs::SemanticZoomViewChangedEventArgs() :
    SemanticZoomViewChangedEventArgs(activate_instance<SemanticZoomViewChangedEventArgs>())
{}

inline SettingsFlyout::SettingsFlyout()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SettingsFlyout, ISettingsFlyoutFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::TitleProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().TitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::HeaderBackgroundProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().HeaderBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::HeaderForegroundProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().HeaderForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SettingsFlyout::IconSourceProperty()
{
    return get_activation_factory<SettingsFlyout, ISettingsFlyoutStatics>().IconSourceProperty();
}

inline Slider::Slider()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<Slider, ISliderFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty Slider::IntermediateValueProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IntermediateValueProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::StepFrequencyProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().StepFrequencyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::SnapsToProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().SnapsToProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::TickFrequencyProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().TickFrequencyProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::TickPlacementProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().TickPlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::OrientationProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::IsDirectionReversedProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IsDirectionReversedProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::IsThumbToolTipEnabledProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().IsThumbToolTipEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::ThumbToolTipValueConverterProperty()
{
    return get_activation_factory<Slider, ISliderStatics>().ThumbToolTipValueConverterProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::HeaderProperty()
{
    return get_activation_factory<Slider, ISliderStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty Slider::HeaderTemplateProperty()
{
    return get_activation_factory<Slider, ISliderStatics2>().HeaderTemplateProperty();
}

inline SplitView::SplitView()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SplitView, ISplitViewFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SplitView::ContentProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().ContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PaneProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PaneProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::IsPaneOpenProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().IsPaneOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::OpenPaneLengthProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().OpenPaneLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::CompactPaneLengthProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().CompactPaneLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PanePlacementProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PanePlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::DisplayModeProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().DisplayModeProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::TemplateSettingsProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().TemplateSettingsProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::PaneBackgroundProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics>().PaneBackgroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty SplitView::LightDismissOverlayModeProperty()
{
    return get_activation_factory<SplitView, ISplitViewStatics2>().LightDismissOverlayModeProperty();
}

inline StackPanel::StackPanel()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<StackPanel, IStackPanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::AreScrollSnapPointsRegularProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics>().AreScrollSnapPointsRegularProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::OrientationProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::BorderBrushProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().BorderBrushProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::BorderThicknessProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().BorderThicknessProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::CornerRadiusProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().CornerRadiusProperty();
}

inline Windows::UI::Xaml::DependencyProperty StackPanel::PaddingProperty()
{
    return get_activation_factory<StackPanel, IStackPanelStatics2>().PaddingProperty();
}

inline StyleSelector::StyleSelector()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<StyleSelector, IStyleSelectorFactory>().CreateInstance(outer, inner));
}

inline SwapChainBackgroundPanel::SwapChainBackgroundPanel()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SwapChainBackgroundPanel, ISwapChainBackgroundPanelFactory>().CreateInstance(outer, inner));
}

inline SwapChainPanel::SwapChainPanel()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<SwapChainPanel, ISwapChainPanelFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty SwapChainPanel::CompositionScaleXProperty()
{
    return get_activation_factory<SwapChainPanel, ISwapChainPanelStatics>().CompositionScaleXProperty();
}

inline Windows::UI::Xaml::DependencyProperty SwapChainPanel::CompositionScaleYProperty()
{
    return get_activation_factory<SwapChainPanel, ISwapChainPanelStatics>().CompositionScaleYProperty();
}

inline SymbolIcon::SymbolIcon() :
    SymbolIcon(activate_instance<SymbolIcon>())
{}

inline SymbolIcon::SymbolIcon(Windows::UI::Xaml::Controls::Symbol symbol) :
    SymbolIcon(get_activation_factory<SymbolIcon, ISymbolIconFactory>().CreateInstanceWithSymbol(symbol))
{}

inline Windows::UI::Xaml::DependencyProperty SymbolIcon::SymbolProperty()
{
    return get_activation_factory<SymbolIcon, ISymbolIconStatics>().SymbolProperty();
}

inline TextBlock::TextBlock() :
    TextBlock(activate_instance<TextBlock>())
{}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontSizeProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontSizeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontFamilyProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontFamilyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontWeightProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontWeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontStyleProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontStyleProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::FontStretchProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().FontStretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::CharacterSpacingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().CharacterSpacingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::ForegroundProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().ForegroundProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextWrappingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextTrimmingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextTrimmingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextAlignmentProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::PaddingProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().PaddingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::LineHeightProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().LineHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::LineStackingStrategyProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().LineStackingStrategyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsTextSelectionEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().IsTextSelectionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::SelectedTextProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics>().SelectedTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::SelectionHighlightColorProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::MaxLinesProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().MaxLinesProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextLineBoundsProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().TextLineBoundsProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::OpticalMarginAlignmentProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().OpticalMarginAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsColorFontEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::TextReadingOrderProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics2>().TextReadingOrderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBlock::IsTextScaleFactorEnabledProperty()
{
    return get_activation_factory<TextBlock, ITextBlockStatics3>().IsTextScaleFactorEnabledProperty();
}

inline TextBox::TextBox()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<TextBox, ITextBoxFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::MaxLengthProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().MaxLengthProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsReadOnlyProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsReadOnlyProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::AcceptsReturnProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().AcceptsReturnProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextAlignmentProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextWrappingProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().TextWrappingProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsSpellCheckEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsSpellCheckEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsTextPredictionEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().IsTextPredictionEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::InputScopeProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics>().InputScopeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::HeaderProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::HeaderTemplateProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::PlaceholderTextProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().PlaceholderTextProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::SelectionHighlightColorProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().SelectionHighlightColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::PreventKeyboardDisplayOnProgrammaticFocusProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().PreventKeyboardDisplayOnProgrammaticFocusProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::IsColorFontEnabledProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics2>().IsColorFontEnabledProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::DesiredCandidateWindowAlignmentProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics3>().DesiredCandidateWindowAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty TextBox::TextReadingOrderProperty()
{
    return get_activation_factory<TextBox, ITextBoxStatics3>().TextReadingOrderProperty();
}

inline TimePickedEventArgs::TimePickedEventArgs() :
    TimePickedEventArgs(activate_instance<TimePickedEventArgs>())
{}

inline TimePicker::TimePicker()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<TimePicker, ITimePickerFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::HeaderProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::HeaderTemplateProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::ClockIdentifierProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().ClockIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::MinuteIncrementProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().MinuteIncrementProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::TimeProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics>().TimeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePicker::LightDismissOverlayModeProperty()
{
    return get_activation_factory<TimePicker, ITimePickerStatics2>().LightDismissOverlayModeProperty();
}

inline TimePickerFlyout::TimePickerFlyout() :
    TimePickerFlyout(activate_instance<TimePickerFlyout>())
{}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::ClockIdentifierProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().ClockIdentifierProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::TimeProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().TimeProperty();
}

inline Windows::UI::Xaml::DependencyProperty TimePickerFlyout::MinuteIncrementProperty()
{
    return get_activation_factory<TimePickerFlyout, ITimePickerFlyoutStatics>().MinuteIncrementProperty();
}

inline ToggleMenuFlyoutItem::ToggleMenuFlyoutItem()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ToggleMenuFlyoutItem, IToggleMenuFlyoutItemFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ToggleMenuFlyoutItem::IsCheckedProperty()
{
    return get_activation_factory<ToggleMenuFlyoutItem, IToggleMenuFlyoutItemStatics>().IsCheckedProperty();
}

inline ToggleSwitch::ToggleSwitch() :
    ToggleSwitch(activate_instance<ToggleSwitch>())
{}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::IsOnProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().IsOnProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::HeaderProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().HeaderProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::HeaderTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().HeaderTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OnContentProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OnContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OnContentTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OnContentTemplateProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OffContentProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OffContentProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToggleSwitch::OffContentTemplateProperty()
{
    return get_activation_factory<ToggleSwitch, IToggleSwitchStatics>().OffContentTemplateProperty();
}

inline ToolTip::ToolTip()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<ToolTip, IToolTipFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::HorizontalOffsetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().HorizontalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::IsOpenProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().IsOpenProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::PlacementProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().PlacementProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::PlacementTargetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().PlacementTargetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTip::VerticalOffsetProperty()
{
    return get_activation_factory<ToolTip, IToolTipStatics>().VerticalOffsetProperty();
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::PlacementProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().PlacementProperty();
}

inline Windows::UI::Xaml::Controls::Primitives::PlacementMode ToolTipService::GetPlacement(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetPlacement(element);
}

inline void ToolTipService::SetPlacement(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::Primitives::PlacementMode value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetPlacement(element, value);
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::PlacementTargetProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().PlacementTargetProperty();
}

inline Windows::UI::Xaml::UIElement ToolTipService::GetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetPlacementTarget(element);
}

inline void ToolTipService::SetPlacementTarget(const Windows::UI::Xaml::DependencyObject & element, const Windows::UI::Xaml::UIElement & value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetPlacementTarget(element, value);
}

inline Windows::UI::Xaml::DependencyProperty ToolTipService::ToolTipProperty()
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().ToolTipProperty();
}

inline Windows::IInspectable ToolTipService::GetToolTip(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<ToolTipService, IToolTipServiceStatics>().GetToolTip(element);
}

inline void ToolTipService::SetToolTip(const Windows::UI::Xaml::DependencyObject & element, const Windows::IInspectable & value)
{
    get_activation_factory<ToolTipService, IToolTipServiceStatics>().SetToolTip(element, value);
}

inline UserControl::UserControl()
{
    Windows::IInspectable outer, inner;
    impl_move(get_activation_factory<UserControl, IUserControlFactory>().CreateInstance(outer, inner));
}

inline Windows::UI::Xaml::DependencyProperty UserControl::ContentProperty()
{
    return get_activation_factory<UserControl, IUserControlStatics>().ContentProperty();
}

inline VariableSizedWrapGrid::VariableSizedWrapGrid() :
    VariableSizedWrapGrid(activate_instance<VariableSizedWrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ItemHeightProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ItemWidthProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::OrientationProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::HorizontalChildrenAlignmentProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().HorizontalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::VerticalChildrenAlignmentProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().VerticalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::RowSpanProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().RowSpanProperty();
}

inline int32_t VariableSizedWrapGrid::GetRowSpan(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().GetRowSpan(element);
}

inline void VariableSizedWrapGrid::SetRowSpan(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().SetRowSpan(element, value);
}

inline Windows::UI::Xaml::DependencyProperty VariableSizedWrapGrid::ColumnSpanProperty()
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().ColumnSpanProperty();
}

inline int32_t VariableSizedWrapGrid::GetColumnSpan(const Windows::UI::Xaml::UIElement & element)
{
    return get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().GetColumnSpan(element);
}

inline void VariableSizedWrapGrid::SetColumnSpan(const Windows::UI::Xaml::UIElement & element, int32_t value)
{
    get_activation_factory<VariableSizedWrapGrid, IVariableSizedWrapGridStatics>().SetColumnSpan(element, value);
}

inline Viewbox::Viewbox() :
    Viewbox(activate_instance<Viewbox>())
{}

inline Windows::UI::Xaml::DependencyProperty Viewbox::StretchProperty()
{
    return get_activation_factory<Viewbox, IViewboxStatics>().StretchProperty();
}

inline Windows::UI::Xaml::DependencyProperty Viewbox::StretchDirectionProperty()
{
    return get_activation_factory<Viewbox, IViewboxStatics>().StretchDirectionProperty();
}

inline VirtualizingStackPanel::VirtualizingStackPanel() :
    VirtualizingStackPanel(activate_instance<VirtualizingStackPanel>())
{}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::AreScrollSnapPointsRegularProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().AreScrollSnapPointsRegularProperty();
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::OrientationProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::VirtualizationModeProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().VirtualizationModeProperty();
}

inline Windows::UI::Xaml::Controls::VirtualizationMode VirtualizingStackPanel::GetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element)
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().GetVirtualizationMode(element);
}

inline void VirtualizingStackPanel::SetVirtualizationMode(const Windows::UI::Xaml::DependencyObject & element, Windows::UI::Xaml::Controls::VirtualizationMode value)
{
    get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().SetVirtualizationMode(element, value);
}

inline Windows::UI::Xaml::DependencyProperty VirtualizingStackPanel::IsVirtualizingProperty()
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().IsVirtualizingProperty();
}

inline bool VirtualizingStackPanel::GetIsVirtualizing(const Windows::UI::Xaml::DependencyObject & o)
{
    return get_activation_factory<VirtualizingStackPanel, IVirtualizingStackPanelStatics>().GetIsVirtualizing(o);
}

inline WebView::WebView() :
    WebView(activate_instance<WebView>())
{}

inline WebView::WebView(Windows::UI::Xaml::Controls::WebViewExecutionMode executionMode) :
    WebView(get_activation_factory<WebView, IWebViewFactory4>().CreateInstanceWithExecutionMode(executionMode))
{}

inline Windows::Foundation::Collections::IVector<Windows::Foundation::Uri> WebView::AnyScriptNotifyUri()
{
    return get_activation_factory<WebView, IWebViewStatics>().AnyScriptNotifyUri();
}

inline Windows::UI::Xaml::DependencyProperty WebView::SourceProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().SourceProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::AllowedScriptNotifyUrisProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().AllowedScriptNotifyUrisProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DataTransferPackageProperty()
{
    return get_activation_factory<WebView, IWebViewStatics>().DataTransferPackageProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::CanGoBackProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().CanGoBackProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::CanGoForwardProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().CanGoForwardProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DocumentTitleProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().DocumentTitleProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::DefaultBackgroundColorProperty()
{
    return get_activation_factory<WebView, IWebViewStatics2>().DefaultBackgroundColorProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::ContainsFullScreenElementProperty()
{
    return get_activation_factory<WebView, IWebViewStatics3>().ContainsFullScreenElementProperty();
}

inline Windows::UI::Xaml::Controls::WebViewExecutionMode WebView::DefaultExecutionMode()
{
    return get_activation_factory<WebView, IWebViewStatics4>().DefaultExecutionMode();
}

inline Windows::Foundation::IAsyncAction WebView::ClearTemporaryWebDataAsync()
{
    return get_activation_factory<WebView, IWebViewStatics4>().ClearTemporaryWebDataAsync();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusLeftProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusLeftProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusRightProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusRightProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusUpProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusUpProperty();
}

inline Windows::UI::Xaml::DependencyProperty WebView::XYFocusDownProperty()
{
    return get_activation_factory<WebView, IWebViewStatics5>().XYFocusDownProperty();
}

inline WebViewBrush::WebViewBrush() :
    WebViewBrush(activate_instance<WebViewBrush>())
{}

inline Windows::UI::Xaml::DependencyProperty WebViewBrush::SourceNameProperty()
{
    return get_activation_factory<WebViewBrush, IWebViewBrushStatics>().SourceNameProperty();
}

inline WrapGrid::WrapGrid() :
    WrapGrid(activate_instance<WrapGrid>())
{}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::ItemWidthProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().ItemWidthProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::ItemHeightProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().ItemHeightProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::OrientationProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().OrientationProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::HorizontalChildrenAlignmentProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().HorizontalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::VerticalChildrenAlignmentProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().VerticalChildrenAlignmentProperty();
}

inline Windows::UI::Xaml::DependencyProperty WrapGrid::MaximumRowsOrColumnsProperty()
{
    return get_activation_factory<WrapGrid, IWrapGridStatics>().MaximumRowsOrColumnsProperty();
}

}

}
